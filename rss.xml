<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Mildly entertaining</title>
        <link>https://beepb00p.xyz</link>
        <description><![CDATA[feed]]></description>
        <atom:link href="https://beepb00p.xyz/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 18 Jan 2020 00:00:00 UT</lastBuildDate>
        <item>
    <title>In search of a better job scheduler</title>
    <link>https://beepb00p.xyz/scheduler.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="infra">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>In search of a better job scheduler | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/scheduler.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/scheduler.html" /> <!-- TODO base? -->
        <meta property="og:title" content="In search of a better job scheduler | beepb00p" />
        <meta property="og:description" content="What if cron and systemd had a baby? Wouldn't it be beautiful?" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>In search of a better job scheduler</h1>
    <div class="summary">What if cron and systemd had a baby? Wouldn't it be beautiful?</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
To support my <a href="./tags.html#infra">personal infrastructure</a>, I need a fair amount of regular automatic jobs:
</p>
<ul class="org-ul">
<li>for exporting <a href="my-data.html">my personal data</a> from the cloud</li>
<li>for generating <a href="orger.html">plaintext</a> views of my digital trace</li>
<li>for updating my <a href="orger-todos.html">todo lists</a></li>
<li>updating <a href="https://github.com/karlicoss/promnesia#demo">promnesia</a> index</li>
<li>lots of other backups and supplementary scripts</li>
</ul>
<p>
Running all that manually (more than 100 scripts across all devices) is an awful job for a human.
I want to set them up once and more or less forget about it, only checking now and then.
</p>
<p>
In addition, I am trying to share my knowledge with other people, and it turns out not many people (even programmers, let alone less technical people) are using scheduling software in a personal capacity. So in this post I'll be speculating why it's hard and how to make it easier.
</p>
<p>
I'll be considering pros and cons of job scheduling software mostly with the <b>emphasis on the personal infrastructure</b>. 
I'm sure there will be some aspects I'm missing out on, more specific to industrial-scale job management.
</p>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#cron">1. cron</a></li>
<li><a href="#systemd">2. systemd / launchd</a></li>
<li><a href="#what_do_i_want">3. What do I need?</a></li>
<li><a href="#other">4. What else did I try?</a></li>
<li><a href="#solution">5. Solution?</a></li>
<li><a href="#phone">6. Phone jobs?</a></li>
<li><a href="#fin">7. --</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="cron"><a class="headerlink" href="#cron">¶</a><span class="section-number-2">1</span> <a href="https://en.wikipedia.org/wiki/Cron">cron</a></h2>
<div class="outline-text-2" id="text-cron">
<p>
<b>Pros</b>:  
</p>
<ul class="org-ul">
<li>once you get used to the cron scheduling syntax, it's very easy to actually add new jobs.</li>
<li><p>
easy to adjust
</p>
<p>
You just type <code class="inline">crontab -e</code>, and you can insert/delete/comment jobs, overview when they are running, and space them out in time if necessary.
Once you saved the crontab and exited, it's applied immediately
</p></li>
<li><p>
even though systemd is present in most desktop Linux/Mac distributions, cron will <b>definitely</b> be there
</p>
<p>
This probably doesn't matter if you're using a general purpose Linux distribution.
</p></li>
</ul>
<p>
<b>Cons</b>: anything else you can think of is extremely tedious and repetitive to achieve in cron.
</p>
<ul class="org-ul">
<li><p>
no periodic (i.e. 'once a day' scheduling), only supports specific time
</p>
<p>
This is annoying when if you don't keep your computer always on.
</p></li>
<li>no job dependencies</li>
<li>no timeouts and generally no means of resource management</li>
<li>no restart policies</li>
<li>no means of failure notifications apart from local email</li>
<li>logs go to local mail by default and there are no other mechanisms of notification</li>
<li><p>
<a href="https://habilis.net/cronic/#disease">some bad defaults</a>
</p>
<p>
Fun fact: cron only emails you if the job has produced output. If your job failed with nonzero exit code but produced no output you'd never find out. 
</p></li>
</ul>
<p>
Cron has some variations that help with some of these problems:
</p>
<ul class="org-ul">
<li><a href="https://en.wikipedia.org/wiki/Anacron">anacron</a> – allows running commands periodically (e.g. weekly), which helps if your computer is sometimes offline; but it can't run more frequently than once a day</li>
<li><a id="fcron"></a><a href="https://wiki.archlinux.org/index.php/cron#Fcron">fcron</a>, which I'm <b>using at the moment</b>. Pretty decent:

<ul class="org-ul">
<li>unlike anacron, fully compatible with regular cron jobs and allows running periodically as well</li>
<li>got lots of cool <a href="http://fcron.free.fr/doc/en/fcrontab.5.html">options</a>, e.g.:

<ul class="org-ul">
<li>setting <a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.NICE"><code class="inline">nice</code></a> value</li>
<li><a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.LAVG"><code class="inline">lavg</code></a>: conditional running depending on load balancing</li>
<li><a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.JITTER"><code class="inline">jitter</code></a>, <a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.RANDOM"><code class="inline">random</code></a></li>
<li><a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.SERIAL"><code class="inline">serial</code></a> as a primitive way of specifying dependencies</li>
<li><a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.EXESEV"><code class="inline">exesev</code></a> to prevent multiple instances of the same job (although it doesn't treat it as error)</li>
</ul></li>
</ul></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="systemd"><a class="headerlink" href="#systemd">¶</a><span class="section-number-2">2</span> <a href="https://en.wikipedia.org/wiki/Systemd">systemd</a> / <a href="https://en.wikipedia.org/wiki/Launchd">launchd</a></h2>
<div class="outline-text-2" id="text-systemd">
<p>
Disclaimer: I'm not very familiar with Mac OS, but as far as I understand, launchd is very similar to systemd.
</p>
<p>
Systemd is very powerful and flexible, supports timers, dependencies, restart policies, monitoring, logging, etc.
</p>
<p>
<b>Pros</b>:
</p>
<ul class="org-ul">
<li>timers</li>
<li>dependencies</li>
<li>resource policies (restricting memory and CPU, timeouts)</li>
<li>restart policies (although <a href="https://github.com/systemd/systemd/issues/6129">no exponential backoff</a>)</li>
<li><p>
shared <a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile">environments</a>
</p>
<p>
It can be particularly helpful if a set of scripts shares certain libraries (e.g. <samp class="inline">PYTHONPATH</samp>) or data.
</p></li>
<li>tooling and monitoring</li>
<li>logging</li>
</ul>
<p>
<b>Cons</b>:
</p>
<ul class="org-ul">
<li><p>
tedious to add new jobs
</p>
<p>
If you want to add a job, you need to:
</p>
<ul class="org-ul">
<li><p>
write a unit file
</p>
<p>
Most of it is boilerplate, so good luck getting the syntax right.
</p></li>
<li>copy it to <samp class="inline">~/.config/systemd/user</samp></li>
<li>remember to enable the service</li>
<li>remember to run <code class="inline">systemctl --user reload-daemon</code>.</li>
</ul>
<p>
That's a <b>massive overhead</b> in comparison with <code class="inline">crontab -e</code>, edit, save.
</p></li>
<li><p>
<b>units are scattered</b> across <samp class="inline">~/.config/systemd/user</samp>
</p>
<p>
In cron if I have some boilerplate shared across several jobs (e.g. prefixed with <samp class="inline">nice</samp> or <samp class="inline">timeout</samp>), or multiple
very similar commands, I can align/tabulate them with spaces and use block editing in vim to add/remove/change it all at once, so if you keep the crontab tidy, there is little opportunity for error.
</p>
<p>
In systemd I'd have two options:
</p>
<ul class="org-ul">
<li>edit each unit file separately: boring and error-prone</li>
<li>use a script to generate boilerplate for unit files and manage them</li>
</ul></li>
<li>error notifications (even mailing) requires some <a href="https://wiki.archlinux.org/index.php/Systemd/Timers#MAILTO">hacking</a></li>
</ul>
<p>
Systemd feels like something desirable when scheduling services is your full time job, but not for personal scripts when everything is a bit more chaotic.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="what_do_i_want"><a class="headerlink" href="#what_do_i_want">¶</a><span class="section-number-2">3</span> What do I need?</h2>
<div class="outline-text-2" id="text-what_do_i_want">
<p>
I feel a serious lack of user-friendly job scheduling software for <b>personal</b> needs. I want it to be:
</p>
<ul class="org-ul">
<li><p>
<b>possible for regular people</b> to use
</p>
<p>
"Regular" has different meaning for different people, so imagine someone starting to learn to program. They are capable of writing and running scripts, committing and pushing to git, etc. Imagine they want to run their script periodically:
</p>
<ul class="org-ul">
<li><p>
with <a class="link-up" href="#cron">cron</a>: I'd say the difficulty for them is somewhere around 5/10
</p>
<p>
They need to run <samp class="inline">crontab -e</samp>, google the syntax, paste the path to their script, save and exit. That's it.
</p></li>
<li><p>
with <a class="link-up" href="#systemd">systemd</a>: I'd say the difficulty is 9/10
</p>
<p>
Several steps, confusing syntax and boilerplate, multiple different commands. It's not trivial even for experienced programmers.
</p></li>
</ul>
<p>
In addition, both of these would behave in confusing ways with respect to environment, error reporting, and logging.
</p>
<p>
It's understandable why these systems are so complex (they are very powerful and flexible!), but it's not impossible to have an alternative and user-friendlier interface for simple (cron-like) usecases.
</p></li>
<li><p>
as <b>easy to configure</b> as regular cron
</p>
<p>
So you can edit the single plaintext configuration file, quickly adjust the jobs, check and apply configuration immediately.
</p></li>
<li><p>
<b>better specs</b> for jobs
</p>
<p>
dependencies, timeouts, resource policies and retries without hacky wrappers and boilerplate
</p></li>
<li><p>
keeping configuration under <b>version control</b>
</p>
<p>
This is easy with systemd, and also possible with cron (with some extra hacks).
</p></li>
<li><p>
better means of <b>monitoring</b>
</p>
<p>
How often are the jobs running? Which ones are most flaky? How much resources are they using? 
</p></li>
<li><p>
simple way of running in <b>user's environment</b>
</p>
<p>
It's understandable that cron/systemd shell environment is kept minimal, but for personal scripts, you want the same environment as in your interactive shell.
</p></li>
<li><p>
means of <b>logging</b>
</p>
<p>
E.g. easy logging to the filesystem for later inspection.
</p></li>
<li><p>
means of <b>notification</b>
</p>
<p>
E.g. alternative ways of failure notification (e.g. sending desktop/phone notification).
</p>
<p>
Currently, I'm using <a href="https://wiki.archlinux.org/index.php/Mutt">mutt</a> for that which is fine, but TODO
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="other"><a class="headerlink" href="#other">¶</a><span class="section-number-2">4</span> What else did I try?</h2>
<div class="outline-text-2" id="text-other">
<p>
Some of the tools I tried, none of which really satisfied me:
</p>
<ul class="org-ul">
<li><a href="https://github.com/mesos/chronos">mesos/chronos</a>: too heavyweight to use personally</li>
<li><a href="https://habilis.net/cronic">cronic</a>: simple wrapper that helps with emailing on non-zero exit code, but not much else.</li>
<li><p>
<a href="https://github.com/instacart/ohmycron">instacart/ohmycron</a>
</p>
<p>
Supports locks to prevent simultaneous jobs, loads user environment and PATH.
</p>
<p>
The interesting idea is setting it as a <a href="https://github.com/instacart/ohmycron#ohmycron-as-the-cron-shell">cron shell</a>, which can enhance cron syntax.
</p></li>
<li><p>
<a id="huginn"></a><a href="https://github.com/huginn/huginn">huginn</a>: great example of a <b>user-friendly</b> tool
</p>
<p>
One thing that makes it different is that it's reactive and mainly event/data driven, so dependencies are first class citizens to the workflow.
There are multiple ways of inspecting jobs, e.g. list with some stats on events and dependency diagram. I highly recommend checking out <a href="https://github.com/huginn/huginn#examples">example</a>.
</p>
<p>
It seems good for simple pipelines (e.g. scrape something/transform/send Telegram notification), but you're gonna need a real programming language to do something more complicated. It's possible to run <a href="https://huginnio.herokuapp.com/agents#ShellCommandAgent">shell commands</a> and <a href="https://github.com/huginn/huginn/wiki/Creating-a-new-agent">write external agents</a>, but the primary interface for editing is GUI. That makes it not very programmer friendly, and in addition it suffers from the same issues as <a class="link-up" href="#systemd">systemd</a> in that aspect (e.g. no bulk edit for jobs).
</p></li>
<li><p>
<a href="https://dshearer.github.io/jobber/doc/v1.4/#jobfile">jobber</a>: looks the most promising so far
</p>
<p>
Supported:
</p>
<ul class="org-ul">
<li>plaintext configuration (yaml)</li>
<li>job execution history</li>
<li>quickly testing jobs</li>
<li>pausing/resuming jobs</li>
<li>success/failure notifications</li>
<li>backoffs (although they weren't configurable last time I checked)</li>
</ul>
<p>
However, still no timeouts, dependencies, and jobs can only run at the schedule, like <a class="link-up" href="#cron">cron</a>.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="solution"><a class="headerlink" href="#solution">¶</a><span class="section-number-2">5</span> Solution?</h2>
<div class="outline-text-2" id="text-solution">
<p>
<a class="link-up" href="#systemd">Systemd</a> feels almost perfect except for its boilerplate and being somewhat user-unfriendly.
</p>
<p>
What if we took the good bit that cron has (easy means of editing jobs), and tried to do the same within systemd?
</p>
<p>
Imagine a frontend (let's name it <code class="inline">systemdtab</code>), that gave something similar to cron experience:
</p>
<ul class="org-ul">
<li><p>
you type <code class="inline">systemdtab -e</code>, and that opens the text editor with your configuration
</p>
<p>
You can adjust your jobs as you wish, save the file and exit. It can check syntax the same way <code class="inline">crontab -e</code> checks it, and prompt to retry in case of typos.
</p>
<p>
Once you exit, your changes are applied automatically: 
</p>
<ul class="org-ul">
<li><samp class="inline">systemdtab</samp> generates individual unit files from your output</li>
<li>replaces the old unit files with the new ones and restarts the daemon</li>
</ul></li>
<li><p>
considering the boilerplate, it seems that the systemdtab config could be a script (e.g. <samp class="inline">~/.systemdtab.py</samp>), that generates the actual Systemd unit files
</p>
<p>
It doesn't matter which language is used, it could be bash, python or anything. It would allow one to massively save on boilerplate if you're running sets of similar jobs.
</p></li>
<li>the configuration is kept in a plaintext file, which makes it trivial to inspect and version control.</li>
<li>some means of simple visualization and monitoring, e.g. similar to <a class="link-up" href="#huginn">huginn</a>?</li>
</ul>
<p>
This doesn't have to be a replacement or something, <samp class="inline">systemdtab</samp> can manage its own set of unit files, completely separate from the rest of the services.
</p>
<p>
<span style="color:darkorange"><strong>Does such a tool exist?</strong></span> It feels like it's possible to hack together a rough implementation (at least satisfying to me) fairly quickly, but is there really nothing existing? Please let me know!
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000005">
<h2 id="phone"><a class="headerlink" href="#phone">¶</a><span class="section-number-2">6</span> Phone jobs?</h2>
<div class="outline-text-2" id="text-phone">
<p>
That's another problem I sort of solved for myself, but not fully satisfied.
</p>
<p>
I need to export app data regularly from my (rooted) Android phone (e.g. see <a href="file:///my-data.html#bluemaestro">here</a>). Export scripts themselves are trivial, it's just a matter of copying files from <samp class="inline">/data/data/</samp> directory. However, there is no software for Android to run these scripts regularly.
</p>
<p>
At the moment, I'm using <a href="https://llamalab.com/automate">Automate app</a> to run them. Automate is great, but it feels a bit wrong running a shell script using a complex flowchart, so I'd be interested to know if there are simpler alternatives.
</p>
<p>
Ideally, it would be a simple app that allows running shell scripts at regular intervals, keeping logs and notifying when they fail. 
</p>
<p>
<span style="color:darkorange"><strong>Is there such an app?</strong></span> Please let me know if you know one!
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000006">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">7</span> --</h2>
<div class="outline-text-2" id="text-fin">
<p>
Updates:
</p>
<ul class="org-ul">
<li><span class="timestamp-wrapper"><span class="timestamp">[2020-01-19]</span></span> added section on <a class="link-up" href="#huginn">huginn</a></li>
</ul>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#infra">#infra</a></div>
        <!-- TODO post-date? -->
        <div class="date">18 January 2020</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_scheduler"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sat, 18 Jan 2020 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/scheduler.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>What data on myself I collect and why?</title>
    <link>https://beepb00p.xyz/my-data.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="dataliberation pkm quantified-self">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>What data on myself I collect and why? | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/my-data.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/my-data.html" /> <!-- TODO base? -->
        <meta property="og:title" content="What data on myself I collect and why? | beepb00p" />
        <meta property="og:description" content="How I am using 50+ sources of my personal data" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>What data on myself I collect and why?</h1>
    <div class="summary">How I am using 50+ sources of my personal data</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
This is the list of personal data sources I use or planning to use with rough guides on how to get your hands on that data if you want it as well.
</p>
<p>
It's still incomplete and I'm going to update it regularly.
</p>
<p>
My goal is <b>automating data collection to the maximum extent possible</b> and making it work in the background, so one can set up pipelines once and hopefully never think about it again.
</p>
<p>
This is kind of a follow-up on my previous post on the <a href="sad-infra.html">sad state of personal data</a>, and part of my personal way of getting around this sad state.
</p>
<p>
If you're terrified by the long list, you can jump straight into <a class="link-down" href="#consumers">"Data consumers"</a> section to find out how I use it.
</p>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#why">1. Why do you collect X? How do you use your data?</a>
<ul>
<li><a href="#backup">backup</a></li>
<li><a href="#lifelogging">lifelogging</a></li>
<li><a href="#qs">quantified self</a></li>
</ul>
</li>
<li><a href="#what">2. What do I collect/want to collect?</a>
<ul>
<li><a href="#amazon">Amazon</a></li>
<li><a href="#arbtt">Arbtt (desktop time tracker)</a></li>
<li><a href="#bitbucket">Bitbucket (repositories)</a></li>
<li><a href="#bluemaestro">Bluemaestro (environment sensor)</a></li>
<li><a href="#blood">Blood</a></li>
<li><a href="#browser_history">Browser history (Firefox/Chrome)</a></li>
<li><a href="#emfit">Emfit QS (sleep tracker)</a></li>
<li><a href="#endomondo">Endomondo</a></li>
<li><a href="#facebook">Facebook</a></li>
<li><a href="#messenger">Facebook Messenger</a></li>
<li><a href="#feedbin">Feedbin</a></li>
<li><a href="#feedly">Feedly</a></li>
<li><a href="#fitbit">Fitbit</a></li>
<li><a href="#foursquare">Foursquare/Swarm</a></li>
<li><a href="#github_repos">Github (repositories)</a></li>
<li><a href="#github_events">Github (events)</a></li>
<li><a href="#gmail">Gmail</a></li>
<li><a href="#goodreads">Goodreads</a></li>
<li><a href="#takeout">Google takeout</a></li>
<li><a href="#hackernews"><span class="todo TODO">TODO</span> Hackernews</a></li>
<li><a href="#hsbc">HSBC bank</a></li>
<li><a href="#hypothesis">Hypothesis</a></li>
<li><a href="#instapaper">Instapaper</a></li>
<li><a href="#jawbone">Jawbone</a></li>
<li><a href="#kindle">Kindle</a></li>
<li><a href="#kobo">Kobo reader</a></li>
<li><a href="#lastfm">Last.fm</a></li>
<li><a href="#monzo">Monzo bank</a></li>
<li><a href="#nomie">Nomie</a></li>
<li><a href="#nutrition">Nutrition</a></li>
<li><a href="#photos">Photos</a></li>
<li><a href="#pdfs">PDF annotations</a></li>
<li><a href="#pinboard">Pinboard</a></li>
<li><a href="#notes">Plaintext notes</a></li>
<li><a href="#pocket">Pocket</a></li>
<li><a href="#reddit">Reddit</a></li>
<li><a href="#rtm">Remember the Milk</a></li>
<li><a href="#rescuetime">Rescuetime</a></li>
<li><a href="#shell">Shell history</a></li>
<li><a href="#sleep">Sleep</a></li>
<li><a href="#sms_calls">Sms/calls</a></li>
<li><a href="#spotify">Spotify</a></li>
<li><a href="#stackexchange">Stackexchange</a></li>
<li><a href="#taplog">Taplog</a></li>
<li><a href="#telegram">Telegram</a></li>
<li><a href="#twitter">Twitter</a></li>
<li><a href="#vk">VK.com</a></li>
<li><a href="#weight">Weight</a></li>
<li><a href="#whatsapp"><span class="todo TODO">TODO</span> Whatsapp</a></li>
<li><a href="#23andme">23andme</a></li>
</ul>
</li>
<li><a href="#consumers">3. Data consumers</a>
<ul>
<li><a href="#search">search</a></li>
<li><a href="#promnesia">promnesia</a></li>
<li><a href="#orger">orger</a></li>
<li><a href="#dashboard">dashboard</a></li>
<li><a href="#mypkg"><code class="inline">my.</code> python package</a></li>
</ul>
</li>
<li><a href="#fin">4. --</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="why"><a class="headerlink" href="#why">¶</a><span class="section-number-2">1</span> Why do you collect X? How do you use your data?</h2>
<div class="outline-text-2" id="text-why">
<p>
All things considered, I think it's a fair question!
Why bother with all this <a href="./tags.html#infra">infrastructure</a> and hoard the data if you never use it?
</p>
<p>
In the next section, I will elaborate on each specific data source, but to start with I'll list the rationales that all of them share:
</p>
</div>
<div class="outline-3" id="outline-container-org0000000">
<h3 id="backup"><a class="headerlink" href="#backup">¶</a>backup</h3>
<div class="outline-text-3" id="text-backup">
<p>
It may feel unnecessary, but shit happens. What if your device dies, account gets suspended for some reason or the company goes bust?
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000001">
<h3 id="lifelogging"><a class="headerlink" href="#lifelogging">¶</a><a href="./tags.html#lifelogging">lifelogging</a></h3>
<div class="outline-text-3" id="text-lifelogging">
<p>
Most data in digital form got timestamps, so automatically, without manual effort, constitutes data for your timeline.
</p>
<p>
I want to remember more, be able to review my past and bring back and reflect on memories. Practicing lifelogging helps with that.
</p>
<p>
It feels very wrong that things can be forgotten and lost forever.
It's understandable from the neuroscience point of view, i.e. the brain has limited capacity and it would be too distracting to remember everything all the time.
That said, I want to have a <b>choice</b> whether to forget or remember events, and I'd like to be able to potentially access forgotten ones.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000002">
<h3 id="qs"><a class="headerlink" href="#qs">¶</a><a href="./tags.html#quantifiedself">quantified self</a></h3>
<div class="outline-text-3" id="text-qs">
<p>
Most collected digital data is somewhat quantitative and can be used to analyze your body or mind.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000036">
<h2 id="what"><a class="headerlink" href="#what">¶</a><span class="section-number-2">2</span> What do I collect/want to collect?</h2>
<div class="outline-text-2" id="text-what">
<p>
As I mentioned, most of the collected data serve as a means of backup/lifelogging/quantified self, so I won't mention them again in the 'Why' sections.
</p>
<p>
All my data collection pipelines are <b>automatic unless mentioned otherwise</b>.
</p>
<p>
Some scripts are still private so if you want to know more, let me know so I can prioritize sharing them.
</p>
</div>
<div class="outline-3" id="outline-container-org0000004">
<h3 id="amazon"><a class="headerlink" href="#amazon">¶</a>Amazon</h3>
<div class="outline-text-3" id="text-amazon">
<p>
How: <a href="https://github.com/jbms/finance-dl">jbms/finance-dl</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>was planning to correlate them with <a class="link-down" href="#monzo">monzo</a>/<a class="link-down" href="#hsbc">HSBC</a> transactions, but haven't got to it yet</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000005">
<h3 id="arbtt"><a class="headerlink" href="#arbtt">¶</a>Arbtt (desktop time tracker)</h3>
<div class="outline-text-3" id="text-arbtt">
<p>
How: <a href="https://arbtt.nomeata.de">arbtt-capture</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>haven't used it yet, but it could be a rich source of lifelogging context</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="bitbucket"><a class="headerlink" href="#bitbucket">¶</a>Bitbucket (repositories)</h3>
<div class="outline-text-3" id="text-bitbucket">
<p>
How: <a href="https://github.com/samkuehn/bitbucket-backup">samkuehn/bitbucket-backup</a>
</p>
<p>
Why: 
</p>
<ul class="org-ul">
<li><p>
proved especially useful considering Atlassian is going to <a href="https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket"><b>wipe</b></a> mercurial repositories
</p>
<p>
I've got lots of private mercurial repositories with university homework and other early projects, and it's sad to think of people who will lose theirs during this wipe.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="bluemaestro"><a class="headerlink" href="#bluemaestro">¶</a><a href="https://bluemaestro.com/products/product-details/bluetooth-environmental-monitor-and-logger">Bluemaestro</a> (environment sensor)</h3>
<div class="outline-text-3" id="text-bluemaestro">
<p>
How: sensor syncs with phone app via Bluetooth, <samp class="inline">/data/data/com.bluemaestro.tempo_utility/databases/</samp> is regularly copied to grab the data.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>temperature during sleep data for the <a class="link-down" href="#dashboard">dashboard</a></li>
<li><p>
lifelogging: capturing weather conditions information
</p>
<p>
E.g. I can potentially see temperature/humidity readings along with my photos from hiking or skiing.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="blood"><a class="headerlink" href="#blood">¶</a>Blood</h3>
<div class="outline-text-3" id="text-blood">
<p>
How: via <a href="https://thriva.co">thriva</a>, data imported manually into an org-mode table (not doing too frequently so wasn't worth automated scraping)
</p>
<p>
Also tracked glucose and ketones (with <a href="https://freestylediabetes.co.uk/freestyle-libre">freestyle libre</a>) for a few days out of curiosity, also didn't bother automating it.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>contributes to the <a class="link-down" href="#dashboard">dashboard</a>, could be a good way of establishing your baselines</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="browser_history"><a class="headerlink" href="#browser_history">¶</a>Browser history (Firefox/Chrome)</h3>
<div class="outline-text-3" id="text-browser_history">
<p>
How: <a href="https://github.com/karlicoss/promnesia/tree/master/scripts">custom scripts</a>, copying the underlying sqlite databases directly, running on my computers and phone.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="emfit"><a class="headerlink" href="#emfit">¶</a><a href="https://shop-eu.emfit.com/products/emfit-qs">Emfit QS</a> (sleep tracker)</h3>
<div class="outline-text-3" id="text-emfit">
<p>
Emfit QS is kind of a medical grade sleep tracker. It's more expensive than wristband ones (e.g. <a class="link-down" href="#fitbit">fitbit</a>, <a class="link-down" href="#jawbone">jawbone</a>) but also more reliable and gives more data.
</p>
<p>
How: <a href="https://github.com/karlicoss/backup-emfit">emfitexport</a>.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>sleep data for the <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="endomondo"><a class="headerlink" href="#endomondo">¶</a>Endomondo</h3>
<div class="outline-text-3" id="text-endomondo">
<p>
How: Endomondo collects GPS data, and HR data (via <a href="https://uk.wahoofitness.com/devices/heart-rate-monitors/wahoo-tickr-x-heart-rate-strap">Wahoo Tickr X strap</a>). Then, <a href="https://github.com/karlicoss/endoexport">karlicoss/endoexport</a>.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>exercise data for the <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000c">
<h3 id="facebook"><a class="headerlink" href="#facebook">¶</a>Facebook</h3>
<div class="outline-text-3" id="text-facebook">
<p>
How: manual archive export.
</p>
<p>
I barely use Facebook, so don't even bother doing it regularly.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000d">
<h3 id="messenger"><a class="headerlink" href="#messenger">¶</a>Facebook Messenger</h3>
<div class="outline-text-3" id="text-messenger">
<p>
How: <a href="https://github.com/karlicoss/fbmessengerexport">karlicoss/fbmessengerexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000e">
<h3 id="feedbin"><a class="headerlink" href="#feedbin">¶</a>Feedbin</h3>
<div class="outline-text-3" id="text-feedbin">
<p>
How: via API
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000f">
<h3 id="feedly"><a class="headerlink" href="#feedly">¶</a>Feedly</h3>
<div class="outline-text-3" id="text-feedly">
<p>
How: via API
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000010">
<h3 id="fitbit"><a class="headerlink" href="#fitbit">¶</a>Fitbit</h3>
<div class="outline-text-3" id="text-fitbit">
<p>
How: manual CSV export, as I only used it for few weeks. Then the sync stopped working and I had to return it.
However, it seems <a href="https://dev.fitbit.com/build/reference/web-api/intraday-requests">possible</a> via API.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>activity data for the <a class="link-down" href="#dashboard">#dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000011">
<h3 id="foursquare"><a class="headerlink" href="#foursquare">¶</a>Foursquare/Swarm</h3>
<div class="outline-text-3" id="text-foursquare">
<p>
How: via API
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="github_repos"><a class="headerlink" href="#github_repos">¶</a>Github (repositories)</h3>
<div class="outline-text-3" id="text-github_repos">
<p>
How: <a href="https://github.com/josegonzalez/python-github-backup">github-backup</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>capable of exporting starred repositories as well, so if the authors delete them I will still have them</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="github_events"><a class="headerlink" href="#github_events">¶</a>Github (events)</h3>
<div class="outline-text-3" id="text-github_events">
<p>
How: manually requested archive (once), after that automatic <a href="https://github.com/karlicoss/ghexport">karlicoss/ghexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
<li><a class="link-down" href="#search">better search</a> in comments/open issues, etc.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="gmail"><a class="headerlink" href="#gmail">¶</a>Gmail</h3>
<div class="outline-text-3" id="text-gmail">
<p>
How: <a href="https://github.com/joeyates/imap-backup">imap-backup</a>, <a class="link-down" href="#takeout">Google Takeout</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>this is arguably <b>the most important</b> thing you should export considering how heavily everything relies on email</li>
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000015">
<h3 id="goodreads"><a class="headerlink" href="#goodreads">¶</a>Goodreads</h3>
<div class="outline-text-3" id="text-goodreads">
<p>
How: <a href="https://github.com/karlicoss/goodrexport">karlicoss/goodrexport</a>
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000016">
<h3 id="takeout"><a class="headerlink" href="#takeout">¶</a>Google takeout</h3>
<div class="outline-text-3" id="text-takeout">
<p>
How: semi-automatic. 
</p>
<ul class="org-ul">
<li>only manual step: enable scheduled exports (you can schedule 6 per year at a time), and choose to keep it on Google Drive in export settings</li>
<li>mount your Google Drive (e.g. via <a href="https://github.com/astrada/google-drive-ocamlfuse">google-drive-ocamlfuse</a>)</li>
<li>keep a script that checks mounted Google Drive for fresh takeout and moves it somewhere safe</li>
</ul>
<p>
Why:
</p>
<ul class="org-ul">
<li>Google collects lots of data, which you could put to some good use. However, old data is getting <a href="./takeout-data-gone.html">wiped</a>, so it's important to export Takeout regularly.</li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
<li>(potentially) search history for <a class="link-down" href="#promnesia">promnesia</a></li>
<li><a class="link-down" href="#search">search</a> in youtube watch history</li>
<li>location data for lifelogging and the <a class="link-down" href="#dashboard">dashboard</a> (activity)</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000017">
<h3 id="hackernews"><a class="headerlink" href="#hackernews">¶</a><span class="todo TODO">TODO</span> Hackernews</h3>
<div class="outline-text-3" id="text-hackernews">
<p>
How: haven't got to it yet. It's going to require:
</p>
<ul class="org-ul">
<li>extracting upvotes/saved items via web scraping since Hackernews doesn't offer an API for that. Hopefully, there is an existing library for that.</li>
<li><p>
I'm also using <a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic">Materialistic</a> app that has its own 'saved' posts and doesn't synchronize with Hackernews. 
</p>
<p>
Exporting them is going to require copying the database directly from the app private storage.
</p></li>
</ul>
<p>
Why: same reasons as <a class="link-down" href="#reddit">Reddit</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000018">
<h3 id="hsbc"><a class="headerlink" href="#hsbc">¶</a>HSBC bank</h3>
<div class="outline-text-3" id="text-hsbc">
<p>
How: manual exports of monthly PDFs with transactions. They don't really offer API, so unless you want to web scrape and deal with 2FA, it seems it's the best you can do.
</p>
<p>
Why
</p>
<ul class="org-ul">
<li>personal finance; used it with <a href="https://github.com/karlicoss/hsbc-parser">karlicoss/hsbc-parser</a> to feed into <a href="https://hledger.org">hledger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000019">
<h3 id="hypothesis"><a class="headerlink" href="#hypothesis">¶</a><a href="https://hypothes.is">Hypothesis</a></h3>
<div class="outline-text-3" id="text-hypothesis">
<p>
How: <a href="https://github.com/karlicoss/hypexport">karlicoss/hypexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
<li>quick todos via <a class="link-down" href="#orger">orger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000001a">
<h3 id="instapaper"><a class="headerlink" href="#instapaper">¶</a>Instapaper</h3>
<div class="outline-text-3" id="text-instapaper">
<p>
How: <a href="https://github.com/karlicoss/instapexport">karlicoss/instapexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a>, in particular implementing overlay with highlights</li>
<li>quick todos via <a class="link-down" href="#orger">orger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000001b">
<h3 id="jawbone"><a class="headerlink" href="#jawbone">¶</a>Jawbone</h3>
<div class="outline-text-3" id="text-jawbone">
<p>
How: via API.
Jawbone is dead now, so if you haven't exported it already, likely your data is lost forever.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>sleep data for the <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000001c">
<h3 id="kindle"><a class="headerlink" href="#kindle">¶</a>Kindle</h3>
<div class="outline-text-3" id="text-kindle">
<p>
How: manually exported <samp class="inline">MyClippings.txt</samp> from Kindle. Potentially can be automated similarly to <a class="link-down" href="#kobo">Kobo</a>.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000001d">
<h3 id="kobo"><a class="headerlink" href="#kobo">¶</a><a href="https://www.kobo.com">Kobo</a> reader</h3>
<div class="outline-text-3" id="text-kobo">
<p>
How: almost automatic via <a href="https://github.com/karlicoss/kobuddy">karlicoss/kobuddy</a>. Manual step: having to connect your reader via USB now and then.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a href="orger-todos.html#krill">spaced repetition</a> for unfamiliar words/new concepts via <a class="link-down" href="#orger">orger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000001e">
<h3 id="lastfm"><a class="headerlink" href="#lastfm">¶</a>Last.fm</h3>
<div class="outline-text-3" id="text-lastfm">
<p>
How: <a href="https://github.com/karlicoss/lastfm-backup">karlicoss/lastfm-backup</a>
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001f">
<h3 id="monzo"><a class="headerlink" href="#monzo">¶</a>Monzo bank</h3>
<div class="outline-text-3" id="text-monzo">
<p>
How: <a href="https://github.com/karlicoss/monzoexport">karlicoss/monzoexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>automatic personal finance, fed into <a href="https://hledger.org">hledger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000020">
<h3 id="nomie"><a class="headerlink" href="#nomie">¶</a><a href="https://nomie.app">Nomie</a></h3>
<div class="outline-text-3" id="text-nomie">
<p>
How: regular copies of <samp class="inline">/data/data/io.nomie.pro/files/_pouch_events</samp> and <samp class="inline">/data/data/io.nomie.pro/files/_pouch_trackers</samp>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>could be a great tool for detailed lifelogging if you're into it</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000021">
<h3 id="nutrition"><a class="headerlink" href="#nutrition">¶</a>Nutrition</h3>
<div class="outline-text-3" id="text-nutrition">
<p>
I tracked almost all nutrition data for stuff I ingested over the course of a year.
</p>
<p>
How: I found most existing apps/projects clumsy and unsatisfactory, so I developed my own system.
Not even a proper app, something simpler, basically a domain-specific language in Python to track it.
</p>
<p>
Tracking process was simply editing a python file and adding entries like:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-comment-delimiter"># </span><span class="org-comment">file: food_2017.py</span>
<span class="org-variable-name">july_09</span> = F(
  [  <span class="org-comment-delimiter"># </span><span class="org-comment">lunch</span>
       spinach * bag,
       tuna_spring_water * can,       <span class="org-comment-delimiter"># </span><span class="org-comment">can size for this tuna is 120g</span>
       beans_broad_wt    * can * 0.5, <span class="org-comment-delimiter"># </span><span class="org-comment">half can. can size for broad beans is 200g</span>
       onion_red_tsc     * gr(115)  , <span class="org-comment-delimiter"># </span><span class="org-comment">grams, explicit</span>
       cheese_salad_tsc  * 100,       <span class="org-comment-delimiter"># </span><span class="org-comment">grams, implicit as it makes sense for cheese</span>
       lime, <span class="org-comment-delimiter"># </span><span class="org-comment">1 fruit, implicit</span>
  ],
  [
     <span class="org-comment-delimiter"># </span><span class="org-comment">dinner...</span>
  ],
  tea_black * 10,     <span class="org-comment-delimiter"># </span><span class="org-comment">cups, implicit</span>
  wine_red * ml * 150, <span class="org-comment-delimiter"># </span><span class="org-comment">ml, explicit</span>
)

<span class="org-variable-name">july_10</span> = ... <span class="org-comment-delimiter"># </span><span class="org-comment">more logs</span>
</pre>
</div>
<p>
Comments added for clarity of course, so it'd be more compact normally.
</p>
<p>
Then some code was used for processing, calculating, <a href="https://postimg.cc/bdSVc43Y">visualizing</a>, etc.
</p>
<p>
Having a real programming language instead of an app let me make it very flexible and expressive, e.g.:
</p>
<ul class="org-ul">
<li><p>
I could define composite dishes as Python objects, and then easily reuse them.
</p>
<p>
E.g. if I made four servings of soup on 10.08.2018, ate one immediately and froze other three I would define something like <samp class="inline">soup_20180810 = [...]</samp>, and then I can simply reuse <samp class="inline">soup_20180810</samp> when I eat it again.
(date was easy to find out as I label food when put it in the freezer anyway)
</p></li>
<li>I could make many things implicit, making it pretty expressive without spending time on unnecessary typing</li>
<li>I rarely had to in nutrient composition manually, I just pasted the product link to supermarket website and had an automatic script to parse nutrient information</li>
<li>For micronutrients (that usually aren't listed on labels) I used the <a href="https://github.com/alyssaq/usda-sqlite">USDA sqlite database</a></li>
</ul>
<p>
The hard thing was actually not entering, but rather not having nutrition information if you're eating out. That year I was mostly cooking my own food, so tracking was fairly easy.
</p>
<p>
Also I was more interested in lower bounds, (e.g. "do I consume at least recommended amount of micronutrients"), so not having logged food now and then was fine for me.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><p>
I mostly wanted to learn about food composition and how it relates to my diet, and I did
</p>
<p>
That logging motivated me to learn about different foods and try them out while keeping dishes balanced.
I cooked so many different things, made my diet way more varied and became less picky.
</p>
<p>
I stopped because cooking did take some time and I actually realized that as long as I actually vary
food and try to eat everything now and then, I hit all recommended amounts of micronutrients, so I stopped.
It's kind of an obvious thing that everyone recommends, but one thing is hearing it as a common wisdom
and completely different is coming to the same conclusion <b>from your data</b>.
</p></li>
<li>nutritional information contributes to <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000022">
<h3 id="photos"><a class="headerlink" href="#photos">¶</a>Photos</h3>
<div class="outline-text-3" id="text-photos">
<p>
How: no extra effort required if you sync/organize your photos and videos now and then.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>obvious source of lifelogging, in addition comes with GPS data</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000023">
<h3 id="pdfs"><a class="headerlink" href="#pdfs">¶</a>PDF annotations</h3>
<div class="outline-text-3" id="text-pdfs">
<p>
As in, <a href="annotating.html#pdfs">native PDF annotations</a>. 
</p>
<p>
How: nothing needs to be done, PDFs are local to your computer. You do need <a href="https://github.com/karlicoss/my/blob/master/my/pdfs.py">some tools</a> to crawl your filesystem and extract the annotations.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><p>
experience of using your PDF annotations (e.g. searching) is <a href="annotating.html#comparison"><b>extremely poor</b></a>
</p>
<p>
I'm improving this by using <a class="link-down" href="#orger">orger</a>.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000024">
<h3 id="pinboard"><a class="headerlink" href="#pinboard">¶</a>Pinboard</h3>
<div class="outline-text-3" id="text-pinboard">
<p>
How: <a href="https://github.com/karlicoss/pinbexport">karlicoss/pinbexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000025">
<h3 id="notes"><a class="headerlink" href="#notes">¶</a>Plaintext notes</h3>
<div class="outline-text-3" id="text-notes">
<p>
Mostly this refers to org-mode files, which I use for notekeeping and logging.
</p>
<p>
How: nothing needs to be done, they are local. 
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">search</a> comes for free, it's already local</li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000026">
<h3 id="pocket"><a class="headerlink" href="#pocket">¶</a>Pocket</h3>
<div class="outline-text-3" id="text-pocket">
<p>
How: <a href="https://github.com/karlicoss/pockexport">karlicoss/pockexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a>, in particular implementing overlay with highlights</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000027">
<h3 id="reddit"><a class="headerlink" href="#reddit">¶</a>Reddit</h3>
<div class="outline-text-3" id="text-reddit">
<p>
How: <a href="https://github.com/karlicoss/rexport">karlicoss/rexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
<li><a href="orger-todos.html#reddit">org-mode interface</a> for processing saved Reddit posts/comments, via <a class="link-down" href="#orger">orger</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000028">
<h3 id="rtm"><a class="headerlink" href="#rtm">¶</a>Remember the Milk</h3>
<div class="outline-text-3" id="text-rtm">
<p>
How: ical export from the API.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><p>
<a class="link-down" href="#search">better search</a>
</p>
<p>
I stopped using RTM in favor of org-mode, but I can still easily find my old task and notes.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000029">
<h3 id="rescuetime"><a class="headerlink" href="#rescuetime">¶</a>Rescuetime</h3>
<div class="outline-text-3" id="text-rescuetime">
<p>
How: <a href="https://github.com/karlicoss/rescuexport">karlicoss/rescuexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>richer contexts for lifelogging</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000002a">
<h3 id="shell"><a class="headerlink" href="#shell">¶</a>Shell history</h3>
<div class="outline-text-3" id="text-shell">
<p>
How: many shells support keeping timestamps along your commands in history.
</p>
<p>
E.g. <a href="http://jesrui.sdf-eu.org/remember-all-your-bash-history-forever.html">"Remember all your bash history forever"</a>.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>potentially can be useful for detailed lifelogging</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000002b">
<h3 id="sleep"><a class="headerlink" href="#sleep">¶</a>Sleep</h3>
<div class="outline-text-3" id="text-sleep">
<p>
Apart from <a class="link-up" href="#emfit">automatic collection</a> of HR data, etc., I collect some extra stats like:
</p>
<ul class="org-ul">
<li>whether I woke up on my own or after alarm</li>
<li>whether I still feel sleepy shortly after waking up</li>
<li>whether I had dreams (and I log dreams if I did)</li>
<li>I log every time I feel sleepy throughout the day</li>
</ul>
<p>
How: org-mode, via <a href="https://emacs.stackexchange.com/a/45640/19521">org-capture into table</a>.
Alternatively, you could use a spreadsheet for that as well.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>I think it's important to find connections between subjective feelings and objective stats like amount of exercise, sleep HR, etc.,
so I'm trying to find correlations using my <a class="link-down" href="#dashboard">dashboard</a></li>
<li>dreams are quite fun part of lifelogging</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000002c">
<h3 id="sms_calls"><a class="headerlink" href="#sms_calls">¶</a>Sms/calls</h3>
<div class="outline-text-3" id="text-sms_calls">
<p>
How: <a href="https://play.google.com/store/apps/details?id=com.riteshsahu.SMSBackupRestore">SMS Backup &amp; Restore</a> app, automatic exports.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000002d">
<h3 id="spotify"><a class="headerlink" href="#spotify">¶</a>Spotify</h3>
<div class="outline-text-3" id="text-spotify">
<p>
How: export script, using <a href="https://github.com/plamere/spotipy">plamere/spotipy</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>potentially can be useful for better search in music listening history</li>
<li>can be used for custom recommendation algorithms</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000002e">
<h3 id="stackexchange"><a class="headerlink" href="#stackexchange">¶</a>Stackexchange</h3>
<div class="outline-text-3" id="text-stackexchange">
<p>
How: <a href="https://github.com/karlicoss/stexport">karlicoss/stexport</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000002f">
<h3 id="taplog"><a class="headerlink" href="#taplog">¶</a><a href="https://play.google.com/store/apps/details?id=com.waterbear.taglog">Taplog</a></h3>
<div class="outline-text-3" id="text-taplog">
<p>
(not using it anymore, in favor of org-mode)
</p>
<p>
How: regular copying of <samp class="inline">/data/data/com.waterbear.taglog/databases/Buttons Database</samp>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>a quick way of single tap logging (e.g. weight/sleep/exercise etc), contributes to the <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000030">
<h3 id="telegram"><a class="headerlink" href="#telegram">¶</a>Telegram</h3>
<div class="outline-text-3" id="text-telegram">
<p>
How: <a href="https://github.com/fabianonline/telegram_backup">fabianonline/telegram_backup</a>
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000031">
<h3 id="twitter"><a class="headerlink" href="#twitter">¶</a>Twitter</h3>
<div class="outline-text-3" id="text-twitter">
<p>
How: twitter archive (manually, once), after that regular automatic exports via API
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000032">
<h3 id="vk"><a class="headerlink" href="#vk">¶</a>VK.com</h3>
<div class="outline-text-3" id="text-vk">
<p>
How: <a href="https://github.com/Totktonada/vk_messages_backup">Totktonada/vk_messages_backup</a>.
</p>
<p>
Sadly VK broke their API so the script stopped working. I'm barely using VK now anyway so not motivated enough to work around it.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000033">
<h3 id="weight"><a class="headerlink" href="#weight">¶</a>Weight</h3>
<div class="outline-text-3" id="text-weight">
<p>
How: manually, used <a class="link-up" href="#nomie">Nomie</a> and <a class="link-up" href="#taplog">Taplog</a>, but now just using org-mode and extracting data with <a href="https://github.com/karlicoss/orgparse">orgparse</a>.
Could be potentially automated via wireless scales, but not much of a priority for me.
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li>obvious data source for the <a class="link-down" href="#dashboard">dashboard</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000034">
<h3 id="whatsapp"><a class="headerlink" href="#whatsapp">¶</a><span class="todo TODO">TODO</span> Whatsapp</h3>
<div class="outline-text-3" id="text-whatsapp">
<p>
Barely using it so haven't bothered yet.   
</p>
<p>
How: Whatsapp doesn't offer API, so potentially going to require grabbing sqlite database from Android app (<samp class="inline">/data/data/com.whatsapp/databases/msgstore.db</samp>)
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><a class="link-down" href="#search">better search</a></li>
<li><a class="link-down" href="#promnesia">better browsing history</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000035">
<h3 id="23andme"><a class="headerlink" href="#23andme">¶</a><a href="https://www.23andme.com">23andme</a></h3>
<div class="outline-text-3" id="text-23andme">
<p>
How: manual <a href="https://customercare.23andme.com/hc/en-us/articles/212196868-Accessing-Your-Raw-Genetic-Data">raw data export</a> from 23andme website. I hope your genome doesn't change so often to bother with automatic exports!
</p>
<p>
Why:
</p>
<ul class="org-ul">
<li><p>
was planning to setup some sort of automatic search of new genome insights against open source analysis tools
</p>
<p>
Haven't really had time to think about it yet, and it feels like a hard project out of my realm of competence.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000003c">
<h2 id="consumers"><a class="headerlink" href="#consumers">¶</a><span class="section-number-2">3</span> Data consumers</h2>
<div class="outline-text-2" id="text-consumers">
</div>
<div class="outline-3" id="outline-container-org0000037">
<h3 id="search"><a class="headerlink" href="#search">¶</a>search</h3>
<div class="outline-text-3" id="text-search">
<p>
Typical search interfaces make me unhappy as they are <b>siloed, slow, awkward to use and don't work offline</b>.
So I built my own ways around it! I write about it in detail <a href="pkm-search.html#personal_information">here</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000038">
<h3 id="promnesia"><a class="headerlink" href="#promnesia">¶</a>promnesia</h3>
<div class="outline-text-3" id="text-promnesia">
<p>
<a href="https://github.com/karlicoss/promnesia#demo">promnesia</a> is a browser extension I'm working on to escape silos by <b>unifying annotations and browsing history</b> from different data sources.
</p>
<p>
I've been using it for more than a year now and working on final touches to make it possible to be used by other people.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000039">
<h3 id="orger"><a class="headerlink" href="#orger">¶</a>orger</h3>
<div class="outline-text-3" id="text-orger">
<p>
<a href="https://github.com/karlicoss/orger">orger</a> is a tool and set of modules for converting data into org-mode to allow for <b>instant and offline search and overview</b>.
</p>
<p>
In addition, I'm using it for creating tasks straight from native app interfaces (e.g. Reddit/Telegram) and spaced repetition via <a href="https://orgmode.org/worg/org-contrib/org-drill.html">org-drill</a>.
</p>
<p>
I write about it in detail <a href="orger.html">here</a> and <a href="orger-todos.html">here</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000003a">
<h3 id="dashboard"><a class="headerlink" href="#dashboard">¶</a>dashboard</h3>
<div class="outline-text-3" id="text-dashboard">
<p>
I'm working on personal health, sleep and exercise dashboard, built from various data sources.
</p>
<p>
I'm working on making it public, you can see some screenshots <a href="https://www.reddit.com/r/QuantifiedSelf/comments/cokt4f/what_do_you_all_do_with_your_data/ewmucgk">here</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000003b">
<h3 id="mypkg"><a class="headerlink" href="#mypkg">¶</a><a href="https://github.com/karlicoss/my"><code class="inline">my.</code></a> python package</h3>
<div class="outline-text-3" id="text-mypkg">
<p>
This python package is a kind of my personal API to access all collected data.
</p>
<p>
I'm in the progress of writing about it <a href="mypkg.html">here</a>.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000003d">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">4</span> --</h2>
<div class="outline-text-2" id="text-fin">
<p>
Happy to answer any questions on my approach and help you with liberating your data.  
</p>
<p>
In the <a href="exports.html">next post</a> (writing still in progress) I'm going to elaborate on design decisions behind my data export and access infrastructure.
</p>
<p>
<b>Updates</b>:
</p>
<ul class="org-ul">
<li><span class="timestamp-wrapper"><span class="timestamp">[2020-01-14]</span></span>: added 'Nutrition', 'Shell history' and 'Sleep' sections</li>
</ul>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#dataliberation">#dataliberation</a> <a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a></div>
        <!-- TODO post-date? -->
        <div class="date">12 January 2020</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/DataHoarder/comments/eol6hw/how_i_collect_and_use_50_sources_of_my_personal">/r/DataHoarder</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_my_data"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sun, 12 Jan 2020 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/my-data.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>The sad state of personal data and infrastructure</title>
    <link>https://beepb00p.xyz/sad-infra.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="infra pkm">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>The sad state of personal data and infrastructure | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/sad-infra.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/sad-infra.html" /> <!-- TODO base? -->
        <meta property="og:title" content="The sad state of personal data and infrastructure | beepb00p" />
        <meta property="og:description" content="Why can't we have nice digital things?" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>The sad state of personal data and infrastructure</h1>
    <div class="summary">Why can't we have nice digital things?</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
<b>TLDR</b>: in this post, I'm going to be exploring <a class="link-down" href="#why">missed opportunities</a> at engaging and interacting with your personal data and digital trace,
and speculating on <a class="link-down" href="#exports_are_hard">why is it that way</a> and <a class="link-down" href="#data_mirror">how to make it easier</a>.
</p>
<p>
It might seem like a long rant, but I promise you I am not the kind of person who whines and vents just for the sake of it!
</p>
<p>
In this particular post, I'm just building up motivation and engaging you, and I <a class="link-down" href="#what_do_i_do">do have</a> some workarounds and suggestions.
This article got long enough, I also didn't want to mix discussions on motivation (this one) and my take on implementation (which will follow).
</p>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#data_is_trapped">1. Intro: your data is trapped</a></li>
<li><a href="#why">2. Why does it bother me?</a>
<ul>
<li><a href="#why_search">search and information access</a></li>
<li><a href="#why_productivity">productivity</a></li>
<li><a href="#why_journalling">journaling and history</a></li>
<li><a href="#why_content">consuming digital content</a></li>
<li><a href="#why_health">health and body maintenance</a></li>
<li><a href="#why_pfinance">personal finance</a></li>
<li><a href="#why_offline">why I can't do anything when I'm offline or have a wonky connection?</a></li>
<li><a href="#why_thinking">tools for thinking and learning</a></li>
<li><a href="#why_uis">mediocre interfaces</a></li>
<li><a href="#why_social">communication and collaboration</a></li>
<li><a href="#why_backups">backups</a></li>
<li><a href="#why_fin">--</a></li>
</ul>
</li>
<li><a href="#data_is_vanishing">3. Your data is vanishing</a></li>
<li><a href="#what_do_i_want">4. What do I want?</a></li>
<li><a href="#exports_are_hard">5. So what's the problem?</a>
<ul>
<li><a href="#auth">authorization</a></li>
<li><a href="#pagination">pagination</a></li>
<li><a href="#consistency">consistency</a></li>
<li><a href="#ratelimit">rate limiting</a></li>
<li><a href="#errorhandling">error handling</a></li>
<li><a href="#documentation">documentation and discovery</a></li>
<li><a href="#parsing">parsing</a></li>
<li><a href="#abstract">abstract representation</a></li>
<li><a href="#locked_in">no access to data</a></li>
<li><a href="#what_fin">--</a></li>
</ul>
</li>
<li><a href="#data_mirror">6. How to make it easier: data mirror</a>
<ul>
<li><a href="#caveats">potential caveats</a></li>
<li><a href="#unsolved">unsolved problems</a></li>
</ul>
</li>
<li><a href="#what_do_i_do">7. What do I do?</a>
<ul>
<li><a href="#exports">regular data exports</a></li>
<li><a href="#mypkg">python package to access data</a></li>
<li><a href="#how_it_is_used">how do I use the data?</a></li>
<li><a href="#sync">data availability</a></li>
<li><a href="#backups">backups</a></li>
</ul>
</li>
<li><a href="#links">8. Related links</a></li>
<li><a href="#fin">9. --</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="data_is_trapped"><a class="headerlink" href="#data_is_trapped">¶</a><span class="section-number-2">1</span> Intro: your data is trapped</h2>
<div class="outline-text-2" id="text-data_is_trapped">
<p>
Note: for clarity, I will use <b><span style="color:green">'service'</span> to refer to anything holding your data</b> and manipulating it, whether it's a website, phone app or a device (i.e. not necessarily something having an online presence).
</p>
<p>
On one hand, in 2019 things are pretty great. 
For almost anything you wish to do on your computer or phone, you can find several apps, platforms and ecosystems that will handle your task in one way or another.
</p>
<p>
On the other hand, typically, once the service has your data it's <b>siloed and trapped</b>.
You are completely at the mercy of service's developers and management. 
</p>
<ul class="org-ul">
<li><p>
Within the same ecosystem (e.g. Google/Apple/Microsoft) you might get some integrations and interactions if the company spares them.
Apart from these, <b>integrations are virtually non-existent</b>.
</p>
<p>
We have so much data, yet it just sits there doing nothing.
</p>
<p>
Now and then <a href="https://github.com/woop/awesome-quantified-self#applications-and-platforms">some startup</a> pops up that connects together couple of APIs for a fee.
I don't want to pick on startups but typically it's something trivial like displaying calories consumed from your food tracker app on the same plot as calories burnt from your fitness tracker.
Trivial is okay, and I do acknowledge it's way harder to implement than it looks (I even <a class="link-down" href="#exports_are_hard">explore why later</a>).
The sad reality is that as a user, you're lucky if you use the right kind of fitness tracker that the service supports, and you agree with their analysis methodology. Otherwise, sorry!
</p>
<p>
There are also services like <a href="https://ifttt.com">IFTTT</a> which offer pretty primitive integrations and also require cooperation from all parties:
</p>
<ul class="org-ul">
<li><a href="https://news.ycombinator.com/item?id=11378278">My Heroic and Lazy Stand Against IFTTT (Pinboard)</a></li>
<li><a href="https://news.ycombinator.com/item?id=19458172">Google removing Gmail access from IFTTT</a></li>
</ul></li>
</ul>
<ul class="org-ul">
<li><p>
Often UIs have inconveniences (or just plain suck). They are often fine for an average user (aka KPIs)
but leave a number of dissatisfied users, who are often the power users.
</p>
<p>
In essence, services fully control the way they present information to you.
</p>
<p>
Sure, it's a free market, just switch to another/better service, right? 
Switching to new and unfamiliar tools is cognitively hard enough as it is, but what's even worse is that in most cases you have to <b>leave behind</b> all your old data. 
You're lucky if you can do some sort of data import/export and if it works properly.
</p></li>
</ul>
<p>
Personal data is in a sad state these days. Let me elaborate.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000031">
<h2 id="why"><a class="headerlink" href="#why">¶</a><span class="section-number-2">2</span> Why does it bother me?</h2>
<div class="outline-text-2" id="text-why">
<style>.outline-4 h4              { font-weight: normal; } </style>
<style>.outline-4 .outline-text-4 { margin-left: 1em; color: #666; } </style>
<p>
To be fair, I don't understand how does it <b>not</b> bother you!
</p>
<p>
To start with, allow me to quote <a href="orger.html#intro">myself</a> here:
</p>
<blockquote>
<p>
I consume lots of digital content (books, articles, Reddit, Youtube, Twitter, etc.) and most of it I find somewhat useful and insightful.
I want to use that knowledge later, act and build on it. But there's an obstacle: the human brain.
</p>
<p>
It would be cool to be capable of always remembering and instantly recalling information you've interacted with, metadata and your thoughts on it.
Until we get augmented though, there are two options: the first is just to suck it up and live with it. You might have guessed this is not an option I'm comfortable with.
</p>
<div><span class="before-aside">
The second option is compensating for your sloppy meaty memory and having information you've read at hand and a quick way of searching over it. 

</span><aside class="sidenote">see <a class="post-tag" href="./tags.html#extendedmind">#extendedmind</a></aside></div>
<p>
<a id="motivation"></a>
That sounds simple enough but as with many simple things, in practice you run into obstacles. 
I'll give some I've personally been overcoming as examples:
</p>
<ul class="org-ul">
<li>convenience of access, e.g.:
<ul class="org-ul">
<li>to access highlights and notes on my Kobo ebook I need to actually <b>reach my reader and tap through e-ink</b> touch screen. Not much fun!</li>
<li><div><span class="before-aside">if you want to search over annotations in your PDF collections… well good luck, I'm just not aware of such a tool. It's actually way worse: many PDF viewers <b>wouldn't even let you search in highlights</b> within the file you're currently viewing. </span><aside class="sidenote">see PDF readers <a href="./annotating.html#pdfs">overview</a></aside></div></li>
<li>there is no easy way to quickly access all of your twitter favorites, people suggest using hacks like <a href="https://webapps.stackexchange.com/a/131374/68104">autoscroll extension</a>.</li>
</ul></li>
<li>searching data, e.g.:
<ul class="org-ul">
<li>search function often just isn't available at all, e.g. on Instapaper, you can't restrict search to highlights. If it is available, it's <b>almost never incremental</b>.</li>
<li>builtin browser search (<code class="inline">Ctrl-F</code>) sucks for the most part: it's not very easy to navigate as you don't get previews and you have to look through every match</li>
<li>sometimes you vaguely recall reading about something or seeing a link, but <b>don't remember where exactly</b>. Was it on stackoverflow? Or in some github issue? Or in a conversation with friend?</li>
</ul></li>
<li>data ownership and liberation, e.g.
<ul class="org-ul">
<li><p>
what happens if data disappears or service is down (temporary/permanently) or banned by your government?
</p>
<p>
You may think you live in a civilized country and that would never affect you. Well, <a href="https://www.theverge.com/2018/5/23/17387146/instapaper-gdpr-europe-access-shut-down-privacy-changes">in 2018</a>, Instapaper was unavailable in Europe for several months (!) due to missing the GDPR deadline.
</p></li>
<li><div><span class="before-aside">99% of services <b>don't have support for offline mode</b>. This may be just a small inconvenience if you're on a train or something, but there is more to it.
What if some sort of apocalypse happens and you lose all access to data? 
That depends on your paranoia level of course, and apocalypse is bad enough as it is, but my take on it is that at least I'd have my data :) </span><aside class="sidenote">see <a class="post-tag" href="./tags.html#offline">#offline</a></aside></div></li>
<li>if you delete a book on Kobo, not only you can't access its annotations anymore, but they seem to get <b>wiped</b> from the database.</li>
</ul></li>
</ul>
</blockquote>
<p>
As you can see, my main frustrations are around the lack of the very basic things that computers can do <b>extremely well</b>: data retrieval and search.
</p>
<p>
I'll carry on, just listing some examples. Let's see if any of them resonate with you:
</p>
</div>
<div class="outline-3" id="outline-container-org0000004">
<h3 id="why_search"><a class="headerlink" href="#why_search">¶</a>search and information access</h3>
<div class="outline-text-3" id="text-why_search">
</div>
<div class="outline-4" id="outline-container-org0000001">
<h4 id="org0000001">Why can't I search over all of my personal chat history with a friend, whether it's ICQ logs from 2005 or Whatsapp logs from 2019?</h4>
</div>
<div class="outline-4" id="outline-container-org0000002">
<h4 id="org0000002">Why can't I have incremental search over my tweets? Or browser bookmarks? Or over everything I've ever typed/read on the Internet?</h4>
</div>
<div class="outline-4" id="outline-container-org0000003">
<h4 id="org0000003">Why can't I search across watched youtube videos even though most of them have subtitles hence allowing for full text search?</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="why_productivity"><a class="headerlink" href="#why_productivity">¶</a>productivity</h3>
<div class="outline-text-3" id="text-why_productivity">
</div>
<div class="outline-4" id="outline-container-org0000005">
<h4 id="org0000005">Why can't my Google Home add shopping list items to Google Keep? Let alone other todo-list apps.</h4>
<div class="outline-text-4" id="text-org0000005">
<p>
Instead, it puts them in a completely separate product, <a href="https://shoppinglist.google.com">Shopping list</a>.
If any of these had an API, <b>any programmer</b> could write a script to synchronize them in a few hours.
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000006">
<h4 id="org0000006">Why can't I create a task in my todo list or calendar from a conversation on Facebook Messenger/Whatsapp/VK.com/Telegram?</h4>
<div class="outline-text-4" id="text-org0000006">
<p>
Often, a friend recommends a book to you so you want it to add to your reading list. Or they ask you for something and you want to schedule a reminder.
</p>
<p>
Instead, these apps <b>actively prevent</b> me from using builtin Android share functions (because it means leaving the app presumably).
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org000000c">
<h3 id="why_journalling"><a class="headerlink" href="#why_journalling">¶</a>journaling and history</h3>
<div class="outline-text-3" id="text-why_journalling">
</div>
<div class="outline-4" id="outline-container-org0000008">
<h4 id="org0000008">Why do I have to lose all my browser history if I decide to switch browsers?</h4>
<div class="outline-text-4" id="text-org0000008">
<p>
Even when you switch between major ones like Chrome/Firefox. Let alone for less common alternatives.
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000009">
<h4 id="org0000009">Why can't I see all the places I traveled to on a single map and photos alongside?</h4>
<div class="outline-text-4" id="text-org0000009">
<p>
I have location tracking and my photos have GPS and timestamps. 
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000000a">
<h4 id="org000000a">Why can't I see what my heart rate (i.e. excitement) and speed were side by side with the video I recorded on GoPro while skiing?</h4>
<div class="outline-text-4" id="text-org000000a">
<p>
I've used HR tracking and location tracking, surely that's possible?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000000b">
<h4 id="org000000b">Why can't I easily transfer all my books and metadata if I decide to switch from Kindle to PocketBook or vice versa?</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org0000016">
<h3 id="why_content"><a class="headerlink" href="#why_content">¶</a>consuming digital content</h3>
<div class="outline-text-3" id="text-why_content">
</div>
<div class="outline-4" id="outline-container-org000000d">
<h4 id="org000000d">Why can't I see stuff I highlighted on Instapaper as an overlay on top of web page?</h4>
<div class="outline-text-4" id="text-org000000d">
<p>
<a href="https://hypothes.is">Hypothes.is</a> does it, so it's totally possible, right?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000000e">
<h4 id="org000000e">Why can't I have single 'read it later' list, unifying all things saved on Reddit/Hackernews/Pocket?</h4>
</div>
<div class="outline-4" id="outline-container-org000000f">
<h4 id="org000000f">Why can't I use my todo app instead of 'Watch later' playlist on youtube?</h4>
<div class="outline-text-4" id="text-org000000f">
<p>
'Watch later' is fine for short videos that I can watch over dinner or on my commute.
Longer videos like talks and lectures need proper time commitment hence prioritizing.
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000010">
<h4 id="org0000010">Why can't I 'follow' some user on Hackernews?</h4>
<div class="outline-text-4" id="text-org0000010">
<p>
It's just a matter of regularly fetching new stories/comments by a person and showing new items, right?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000011">
<h4 id="org0000011">Why can't I see if I've run across a Youtube video because my friend sent me a link months ago?</h4>
<div class="outline-text-4" id="text-org0000011">
<p>
The links are there in the chat history, surely it's a trivial task to find it?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000012">
<h4 id="org0000012">Why can't I have uniform music listening stats based on my Last.fm/iTunes/Bandcamp/Spotify/Youtube?</h4>
</div>
<div class="outline-4" id="outline-container-org0000013">
<h4 id="org0000013">Why am I forced to use Spotify's music recommendation algorithm and don't have an option to try something else?</h4>
</div>
<div class="outline-4" id="outline-container-org0000014">
<h4 id="org0000014">Why can't I easily see what were the books/music/art recommended by my friends or some specific Twitter/Reddit/Hackernews users?</h4>
</div>
<div class="outline-4" id="outline-container-org0000015">
<h4 id="org0000015">Why my otherwise perfect hackernews <a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic">Android app</a> doesn't share saved posts/comments with the website?</h4>
<div class="outline-text-4" id="text-org0000015">
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org000001e">
<h3 id="why_health"><a class="headerlink" href="#why_health">¶</a>health and body maintenance</h3>
<div class="outline-text-3" id="text-why_health">
<p>
Aka <a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a>.
</p>
</div>
<div class="outline-4" id="outline-container-org0000017">
<h4 id="org0000017">Why can't I tell if I was more sedentary than usual during the past week and whether I need to compensate by doing a bit more exercise?</h4>
<div class="outline-text-4" id="text-org0000017">
<p>
I have all my location (hence step data), so what's the issue?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000018">
<h4 id="org0000018">Why can't I see what's the impact of aerobic exercise on my resting HR?</h4>
<div class="outline-text-4" id="text-org0000018">
<p>
I use HR tracker and sleep tracker, so all the necessary data is there.
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000019">
<h4 id="org0000019">Why can't I have a dashboard for all of my health: food, exercise and sleep to see baselines and trends?</h4>
<div class="outline-text-4" id="text-org0000019">
<p>
Why do I need to rely on some startup to implement this and trust them with my data?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000001a">
<h4 id="org000001a">Why can't I see the impact of temperature or CO2 concentration in room on my sleep?</h4>
<div class="outline-text-4" id="text-org000001a">
<p>
My sensors have Bluetooth and Android apps, why can't they interact with my sleep data?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000001b">
<h4 id="org000001b">Why can't I see how holidays (as in, not going to work) impact my stress levels?</h4>
<div class="outline-text-4" id="text-org000001b">
<p>
It's trivial to infer workdays by using my location data.    
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org000001c">
<h4 id="org000001c">Why can't I take my Headspace app data and see how/if meditation impacts my sleep?</h4>
</div>
<div class="outline-4" id="outline-container-org000001d">
<h4 id="org000001d">Why can't I run a short snippet of code and check some random health advice on the Internet against <b>my</b> health data.</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org0000021">
<h3 id="why_pfinance"><a class="headerlink" href="#why_pfinance">¶</a>personal finance</h3>
<div class="outline-text-3" id="text-why_pfinance">
</div>
<div class="outline-4" id="outline-container-org000001f">
<h4 id="org000001f">Why am I forced to manually copy transactions from different banking apps into a spreadsheet?</h4>
</div>
<div class="outline-4" id="outline-container-org0000020">
<h4 id="org0000020">Why can't I easily match my Amazon/Ebay orders with my bank transactions?</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org0000022">
<h3 id="why_offline"><a class="headerlink" href="#why_offline">¶</a>why I can't do anything when I'm offline or have a wonky connection?</h3>
<div class="outline-text-3" id="text-why_offline">
<p>
Aka <a class="post-tag" href="./tags.html#offline">#offline</a>.
On one hand it's less and less of an issue as the Internet gets more reliable.
On the other if you start relying on it too much, it's becoming more and more of a single point of failure.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000025">
<h3 id="why_thinking"><a class="headerlink" href="#why_thinking">¶</a>tools for thinking and learning</h3>
<div class="outline-text-3" id="text-why_thinking">
</div>
<div class="outline-4" id="outline-container-org0000023">
<h4 id="org0000023">Why when something like <a href="https://en.wikipedia.org/wiki/Method_of_loci">'mind palace'</a> is <b>literally possible</b> with VR technology, we don't see any in use?</h4>
</div>
<div class="outline-4" id="outline-container-org0000024">
<h4 id="org0000024">Why can't I easily convert select Instapaper highlights or new foreign words I encountered on my Kindle into Anki flashcards?</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org000002a">
<h3 id="why_uis"><a class="headerlink" href="#why_uis">¶</a>mediocre interfaces</h3>
<div class="outline-text-3" id="text-why_uis">
</div>
<div class="outline-4" id="outline-container-org0000026">
<h4 id="org0000026">Why do I have to suffer from poor management and design decisions in UI changes, even if the interface is not the main reason I'm using the product?</h4>
</div>
<div class="outline-4" id="outline-container-org0000027">
<h4 id="org0000027">Why can't I leave priorities and notes on my saved Reddit/Hackernews items?</h4>
<div class="outline-text-4" id="text-org0000027">
<p>
I've got too many saved things to read them linearly and I'll probably never read them all.
I've also got other things to read and do in general, why can't I have a unified queue for consuming content?
</p>
</div>
</div>
<div class="outline-4" id="outline-container-org0000028">
<h4 id="org0000028">Why can't I leave private notes on Deliveroo restaurants/dishes, so I'd remember what to order/not to order next time?</h4>
</div>
<div class="outline-4" id="outline-container-org0000029">
<h4 id="org0000029">Why do people have to suffer from Google Inbox shutdown?</h4>
<div class="outline-text-4" id="text-org0000029">
<p>
Not to undervalue Inbox developers, but fundamentally it's <b>just</b> a different interface.
I'm sure there are plenty of engineers who would happily support it in their spare time if only they had access to the APIs.
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org000002d">
<h3 id="why_social"><a class="headerlink" href="#why_social">¶</a>communication and collaboration</h3>
<div class="outline-text-3" id="text-why_social">
</div>
<div class="outline-4" id="outline-container-org000002b">
<h4 id="org000002b">Why can't I easily share my web or book highlights with a friend? Or just make highlights in select books public?</h4>
</div>
<div class="outline-4" id="outline-container-org000002c">
<h4 id="org000002c">Why can't I easily find out other person's expertise without interrogating them, just by looking what they read instead?</h4>
</div>
</div>
<div class="outline-3" id="outline-container-org000002f">
<h3 id="why_backups"><a class="headerlink" href="#why_backups">¶</a>backups</h3>
<div class="outline-text-3" id="text-why_backups">
</div>
<div class="outline-4" id="outline-container-org000002e">
<h4 id="org000002e">Why do I have to think about it and actively invest time and effort?</h4>
<div class="outline-text-4" id="text-org000002e">
<p>
What about regular people who <b>have no idea</b> how unreliable computers can be and might find out the hard way?
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000030">
<h3 id="why_fin"><a class="headerlink" href="#why_fin">¶</a>--</h3>
<div class="outline-text-3" id="text-why_fin">
<p>
I think all of this is pretty sad. Note that I haven't mentioned any mad science fiction stuff like tapping directly into the brain (as much as I wish it was possible).
All these things are totally doable with the <b>technology we already possess</b>.
</p>
<p>
I wonder what computing pioneers like <a href="https://en.wikipedia.org/wiki/Douglas_Engelbart#Career_and_accomplishments">Douglas Engelbart</a>
(e.g. see <a href="https://mnielsen.github.io/notes/engelbart/engelbart.html">Augmenting Human Intellect</a>) or 
<a href="https://en.wikipedia.org/wiki/Alan_Kay#Early_life_and_work">Alan Kay</a> thought/think about it and if they'd share my disappointment.
So many years have passed since the computing (and personal computers) spread, and we're still not quite there.
And companies are <b>actively</b> promoting these silos.
</p>
<p>
Imagine if all of this was on your fingertips? If you didn't have to think about <b>how and where</b> to find information and could just access it and interact with it?
If you could let computers handle the boring bits of your life and spend time on fun and creative things?
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000032">
<h2 id="data_is_vanishing"><a class="headerlink" href="#data_is_vanishing">¶</a><span class="section-number-2">3</span> Your data is vanishing</h2>
<div class="outline-text-2" id="text-data_is_vanishing">
<p>
Things I listed above are frustrating enough as they are.
There is another aspect to this: your data is <b>slipping away</b>.
</p>
<p>
Privacy concerns are important and it's understandable when people are pissed about services keeping hold of their data instead of properly wiping it.
</p>
<p>
However, oftentimes the opposite is the case and you find that your data is gone or very hard to access:
</p>
<ul class="org-ul">
<li><p>
Google Takeout data, that is, all your browser activity, Youtube watch history, etc., are only kept by Google for <a href="./takeout-data-gone.html">few years</a>
</p>
<p>
If you only began exporting it today, chances are you've already lost some of your history.
</p></li>
<li>Chrome browser deletes history older than <a href="https://superuser.com/a/364475/300795">90 days</a></li>
<li>Firefox browser expires history based on some <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_Expiration">magic algorithm</a></li>
<li><a href="https://github.com/karlicoss/rexport#limitations">Reddit API</a> limits your requests to 1000 results only</li>
<li><p>
<a href="https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline">Twitter API</a> would only give you 3200 latest tweets
</p>
<p>
You can get the rest of your tweets via manual export, but then you'll have to integrate two different ways of accessing data.
</p></li>
</ul>
<ul class="org-ul">
<li><p>
<a href="https://docs.monzo.com/#list-transactions">Monzo API</a> only allows fetching all of your transactions within 5 minutes of authentication.
</p>
<p>
I understand that it's a security measure, but my frustration still stands.
</p></li>
</ul>
<p>
The problems above are sort of technical and in theory, can be solved by some engineering. There is another side to vanishing data:
</p>
<ul class="org-ul">
<li>information is generally <a href="https://www.gwern.net/Archiving-URLs#link-rot">rotting away</a> from the Internet</li>
<li><p>
comments/posts/tweets you've interacted with get deleted by their authors
</p>
<p>
While people have the right to delete their data from the Internet, arguably it doesn't extend to derived content like comments or thoughts that you had on it.
</p></li>
</ul>
<p>
And a bit more:
</p>
<ul class="org-ul">
<li><p>
<a href="https://en.wikipedia.org/wiki/Jawbone_(company)#2014_to_2017">Jawbone UP</a> has gone bust
</p>
<blockquote>
<p>
In July 2017 Jawbone announced[73] it would liquidate its assets. Since the app is still available for at least some phones (Android) and the servers seem to be running, <b>it is unclear who has access to collected personal data</b>. 
</p>
</blockquote>
<p>
sweet. In addition, <a href="https://www.jawbone.com/nudge/api">the API</a> doesn't work anymore either, so if you haven't been exporting data, it's basically gone.
</p></li>
<li><a href="https://lobste.rs/s/dwjdml/my_github_account_has_been_restricted_due">'My GitHub account has been restricted due to US sanctions as I live in Crimea'</a></li>
<li><p>
<a href="https://news.ycombinator.com/item?id=21737696">Verizon/Yahoo Blocking Attempts to Archive Yahoo Groups</a>
</p>
<p>
This one is particularly bad.
</p></li>
</ul>
<p>
If you consider your digital trace <a href="./tags.html#extendedmind">part of yourself</a>, this is completely unacceptable. But sadly it's happening all the time.
You <b>can't rely on third parties</b> to keep it safe.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000033">
<h2 id="what_do_i_want"><a class="headerlink" href="#what_do_i_want">¶</a><span class="section-number-2">4</span> What do I want?</h2>
<div class="outline-text-2" id="text-what_do_i_want">
<p>
I want all these inconveniences somehow solved, but I live in the real world and it's not gonna magically happen.
So let me be more specific: I argue that one <b>major</b> reason these tools and integration I want don't exist is that people don't have easy uniform access to their data in the first place.
</p>
<p>
"Easy" is used here in two senses:
</p>
<ul class="org-ul">
<li><p>
<b>easy for humans</b> to look at and browse through
</p>
<p>
This bit is hard in practice as (typically) the more machine friendly something is, the less human friendly it's.
</p></li>
<li><p>
<b>easy for programmers</b> to manipulate, analyze and interact with
</p>
<p>
Let's concentrate on this part for now. If this is solved, it automatically enables programmers to develop human-friendly tools.
</p></li>
</ul>
<p>
So how would 'easy access to data' look in an ideal world?
Let me present you my speculations on it, and I would be happy to hear your opinions on it!
</p>
<p>
I want <b>an API</b> that I can query and get any of my personal data.
Ideally, it wouldn't really matter where the data is and it could be a web API.
</p>
<p>
Realistically, as of today, the easiest way to quickly access your data and more importantly, play with it, is when it's <b>already on your filesystem</b>.
</p>
<div><span class="before-aside">
Whether it's plaintext, sqlite or some sort of binary data – doesn't matter, already having it locally saves you from the whole class of problems (which I'm about to pinpoint in the following section).

</span><aside class="sidenote">even better if it's already in your RAM and interpreter, but that's a bit too much to wish for at this point.</aside></div>
<p>
As you've probably noticed, it's almost never the case that you have your personal data locally at hand. You need to spend extra effort to achieve this.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000003e">
<h2 id="exports_are_hard"><a class="headerlink" href="#exports_are_hard">¶</a><span class="section-number-2">5</span> So what's the problem?</h2>
<div class="outline-text-2" id="text-exports_are_hard">
<p>
Hopefully we can agree that the current situation isn't so great.
But I am a software engineer. And chances that if you're reading it, you're very likely a programmer as well. Surely we can deal with that and implement, right?
</p>
<p>
Kind of, but it's <b>really hard</b> to retrieve data created by you.
</p>
<blockquote>
<p>
Recommended soundtrack for rest of the section: <a href="https://www.youtube.com/watch?v=HFepeMG4-6A">The World's Smallest Violin</a>, playing for us software engineers.
</p>
</blockquote>
<p>
At first glance it doesn't look like a big deal. It's just data, right? Every programmer should be capable of getting it from the API, right?
</p>
<p>
This is until you realize you're probably using at least ten different services, and they all have different purposes,
with various kinds of data, endpoints and restrictions.
</p>
<p>
Even if you have the capacity and are willing to do it, it's still damn hard.
</p>
<p>
You're gonna have to deal with the following problems:
</p>
</div>
<div class="outline-3" id="outline-container-org0000034">
<h3 id="auth"><a class="headerlink" href="#auth">¶</a>authorization</h3>
<div class="outline-text-3" id="text-auth">
<p>
That's where it all starts with and it's a mess.
</p>
<ul class="org-ul">
<li>easiest scenario: the service lets you generate an API token from its settings and you can just use it. Example: <a href="https://pinboard.in">pinboard</a></li>
<li><p>
typical scenario: you need to do the whole <a href="https://aaronparecki.com/oauth-2-simplified">Oauth</a> thing. 
</p>
<p>
That involves creating a client app, getting client id, dealing with scopes and redirect urls, etc.
Pretty tedious, and you certainly can't expect a <b>nonprogrammer</b> to be able to follow these steps.
</p>
<p>
Examples: almost every service with an API out there: Twitter/Instapaper/Pocket/Github/etc.
</p></li>
<li><p>
worst case scenario: the service doesn't even offer a public API. That also has different grades of horrible:
</p>
<ul class="org-ul">
<li><p>
best worst: service uses a private API and you can spy on the token web app is using in browser dev tools.
</p>
<p>
Not too bad, but a bit dubious.
</p>
<p>
Example: Pocket API doesn't give you away highlights unless you <a href="https://github.com/karlicoss/pockexport#setting-up">mess with it</a>.
</p></li>
<li><p>
typical worst: no private API, so you need to scrape the data. Sometimes you can grab the cookies from browser dev tools and use them to access your data.
</p>
<p>
Scraping is orders of magnitude flakier, involves nasty parsing and obviously fragile.
Some services might even actively prevent you from doing so by banning unusual user agents.
</p>
<p>
Examples: <a href="https://fbchat.readthedocs.io/en/stable/intro.html#sessions">Facebook Messenger</a>, <a href="https://github.com/karlicoss/blinkist-backup">Blinkist</a>
</p></li>
<li><p>
worst worst: you need to scrape the data and cookies don't work or expire often.
</p>
<p>
Basically means you need to use your username/password. Bonus points if there is 2-factor auth involved.
</p>
<p>
Potentially means you're going to store your password somewhere which is way less secure than using a token.
</p>
<p>
Example: <a href="https://takeout.google.com">Google Takeout</a> exports are not only asynchronous, but also don't have an API so you have to login in order to export.
</p></li>
</ul>
<p>
All the 'worst' scenarios are extremely flaky and basically impossible for nonprogrammers to use.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000035">
<h3 id="pagination"><a class="headerlink" href="#pagination">¶</a>pagination</h3>
<div class="outline-text-3" id="text-pagination">
<p>
Whether you're using API or not, typically you'll have to retrieve multiple chunks of data and merge them after.
</p>
<p>
In principle, it's not hard to implement it on a one off basis, but unclear how to do it in some universal way because there is no common standard.
</p>
<p>
Pages might be addressed by page numbers and counts, offsets from start/end of data, before or after with respect to ids or timestamps, etc.
</p>
<p>
It's quite error prone: content might change under your feet, and if the API developers or you are not careful, you might end up with missing data or even some logical corruption.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000036">
<h3 id="consistency"><a class="headerlink" href="#consistency">¶</a>consistency</h3>
<div class="outline-text-3" id="text-consistency">
<p>
If you simply start fetching a json and writing to disk, you'd very quickly end up with a corrupt file on the first network failure.
You've gotta be really careful and ensure atomic writing and updating.
</p>
<p>
Even if you work around the atomicity issues, chances are you won't be able to guarantee atomic snapshotting as you're fetching your data within multiple requests,
and the data is changing as you retrieve it.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000037">
<h3 id="ratelimit"><a class="headerlink" href="#ratelimit">¶</a><a href="https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting">rate limiting</a></h3>
<div class="outline-text-3" id="text-ratelimit">
<p>
No one likes their API hammered, fair enough.
However, rate limits often vary from API endpoint to endpoint and are inherently tedious to get right.
</p>
<p>
If you're not using the API, you might get banned by DDOS prevention (e.g. Cloudflare) if you're not careful.
</p>
<p>
Overall, painful and not fun to implement.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000038">
<h3 id="errorhandling"><a class="headerlink" href="#errorhandling">¶</a>error handling</h3>
<div class="outline-text-3" id="text-errorhandling">
<p>
Authorization, network, serializing, parsing, storing, synchronizing. 
There are among the most common error sources (as in, actual unrecoverable errors, not necessarily bugs) in software engineering. Generally, getting it right is required for reliably retrieving your data.
</p>
<p>
In addition, you want to be somewhat <b>semi-defensive</b>, and this is the hardest kind of error handling:
</p>
<ul class="org-ul">
<li>you want to progress slowly but surely</li>
<li>you want to make sure it only fails in completely unrecoverable scenarios, otherwise it's going to require constant tending</li>
<li>and you want to somehow let user know of problems/suspicious data</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000039">
<h3 id="documentation"><a class="headerlink" href="#documentation">¶</a>documentation and discovery</h3>
<div class="outline-text-3" id="text-documentation">
<p>
If you want <b>all</b> your data, you have to look carefully through all the documentation and make sure you've got it all covered.
</p>
<p>
If the service adds some new endpoints, you might never find out.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000003a">
<h3 id="parsing"><a class="headerlink" href="#parsing">¶</a>parsing</h3>
<div class="outline-text-3" id="text-parsing">
<p>
For the most part not an issue, but some websites do not offer an API so you've got not choice but scraping and parsing HTML.
</p>
<p>
Notorious example: some Hackernews (!) endpoints like 'favorites' are not exposed via <a href="https://github.com/HackerNews/API">API</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000003b">
<h3 id="abstract"><a class="headerlink" href="#abstract">¶</a>abstract representation</h3>
<div class="outline-text-3" id="text-abstract">
<p>
Having raw export data (e.g. sqlite database/json file/etc) is nice, but to actually use it you need an abstract representation.
You basically have to reinvent whatever the service developer does on the backend already. 
</p>
<p>
Notable examples:
</p>
<ul class="org-ul">
<li>unclear which data types to choose: nullable/non-nullable, string or integer for ids, float or integer for amounts</li>
<li>timestamps: figuring out whether it was seconds or milliseconds, UTC or local timezone; and zillions of string formats which you need to parse (I had to do it so often that I even memorized the weird argument order in <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"><code class="inline">datetime.strptime</code></a>)</li>
<li>which situations are valid, e.g. can id be used as a dictionary key, can you assume that they are increasing, etc.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000003c">
<h3 id="locked_in"><a class="headerlink" href="#locked_in">¶</a>no access to data</h3>
<div class="outline-text-3" id="text-locked_in">
<p>
Sometimes you have no way to access your data at all:
</p>
<ul class="org-ul">
<li>you are offline: nuff said</li>
<li><p>
app data on your phone
</p>
<p>
Very few apps support data exports; even fewer support it in an automatic and regular way.
Normally, internally, apps keep their data in sqlite databases which is even more convenient than plaintext/csv export. 
</p>
<p>
However, there are caveats: e.g. on Android, app data is in <code class="inline">/data/data/</code> directory, which by default <b>isn't accessible unless you rooted the phone</b>. 
</p></li>
</ul>
<ul class="org-ul">
<li>devices that have no means of synchronizing

<ul class="org-ul">
<li><a id="kobo_sync"></a>Kobo <b><b>doesn't seem to support cloud sync for annotations</b></b>. I was considering syncing the database wirelessly, as <a href="https://github.com/dropmeaword/kobo-aura-remote">there are</a> some SSH modules for its firmware, but people report it <a href="https://github.com/dropmeaword/kobo-aura-remote/issues/1">may break wifi</a> on it.</li>
</ul></li>
<li>Some devices/apps and formats are <a href="https://en.wikipedia.org/wiki/Vendor_lock-in">vendor locked</a></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000003d">
<h3 id="what_fin"><a class="headerlink" href="#what_fin">¶</a>--</h3>
<div class="outline-text-3" id="text-what_fin">
<p>
Now, remember when I said it was tedious for programmers? 
Constant boilerplate, shitty APIs (you're lucky if the service offers one at all), latency, flakiness, having to code defensively, etc. 
</p>
<p>
Now think about ordinary people who have no clue what 'API' is.
They deserve to use their data too.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000041">
<h2 id="data_mirror"><a class="headerlink" href="#data_mirror">¶</a><span class="section-number-2">6</span> How to make it easier: data mirror</h2>
<div class="outline-text-2" id="text-data_mirror">
<p>
The way I see it, ideally the service you're using provides you with:
</p>
<ul class="org-ul">
<li><p>
a <b>data mirror</b> app
</p>
<p>
Best case scenario is if the service is <a href="https://www.inkandswitch.com/local-first.html">local-first</a> in the first place.
However, this may be a long way ahead and there are certain technical difficulties associated with such designs.
</p>
<p>
I'm suggesting a data mirror app which merely runs in background on the client side
and continuously/regularly sucks in and synchronizes backend data to the latest state.
</p>
<p>
Ideally this would be exactly the same state the backend uses, although in practice it would be hard from efficiency considerations
(e.g. it's faster for the backend to keep data in the same database instead of separate databases for each user).
</p>
<p>
It shouldn't be too resource demanding for the backend, e.g. data sync via push notifications basically already does that, but in an even less efficient way.
</p>
<p>
Data mirror app should dump data into an open machine-friendly format like json/sqlite database/etc.
</p>
<p>
This solves:
</p>
<ul class="org-ul">
<li><p>
authorization: however tedious it's to implement, can be handled by the service's developers.
</p>
<p>
They can make it as secure as necessary (e.g. 2FA/etc), and it's okay as long as you have to log onto it only once.
</p></li>
<li>pagination/consistency/rate limiting: non-problems, considering it's easier for the service's developers to correctly implement incremental data fetching</li>
<li>error handling: also the developers' responsibility. They would be better aware of which situations are programming bugs and which have to be handled carefully</li>
<li>documentation and discovery: hopefully developers are better suited to keep their internal representations and exports consistent (even incentivised as it allows for less code to be written)</li>
<li>backups: will still have to be done by external means, but the task is massively simplified: you just need to point your backup tool at your data storage</li>
</ul></li>
<li><p>
minimalistic <b>data bindings</b> in some reasonable programming language that represent all of this data.
</p>
<p>
Hopefully, specific language doesn't matter, it's a simple task to map data from one programming language to another.
</p>
<p>
This solves:
</p>
<ul class="org-ul">
<li>parsing: developers know better how to get it right; in addition the code can potentially be shared with the backend</li>
<li>abstract representation: would massively lower the barrier for integrating and interacting with data</li>
<li>offline: if you have all data locally you've got efficient access without latency and need for extra error handling</li>
</ul></li>
</ul>
<p>
That's perhaps a naive and oversimplified view.
But to be honest, we're so far away from that that even some small steps towards would be quite a progress.
</p>
<p>
These suggestions would <b>decouple data from the UI</b> and let the community develop better tools for consuming and working with it.
</p>
</div>
<div class="outline-3" id="outline-container-org000003f">
<h3 id="caveats"><a class="headerlink" href="#caveats">¶</a>potential caveats</h3>
<div class="outline-text-3" id="text-caveats">
<ul class="org-ul">
<li><p>
this might be <b>hard to support</b> for everyone
</p>
<p>
On the other hand, service developers would have more control on data access patterns, so in a way it might work better.
</p>
<p>
It would definitely be more efficient than third parties writing kludgy tools to export and backup data.  
</p>
<p>
In addition, for some services and scenarios, it would give better data locality and lower latencies.
</p></li>
<li><p>
'average' users often are <b>not motivated enough</b> to demand such things
</p>
<p>
In particular, not everyone has or willing to set up necessary infrastructure to run all these things.
</p>
<p>
However, if implemented properly, there is absolutely nothing preventing running a data mirror on your laptop or even phone.
It really doesn't require much CPU or bandwidth if you support incremental updates.
</p></li>
<li><p>
services have little motivation to promote this, <b>silos benefit them</b>
</p>
<p>
Having a monopoly on the client interface (e.g. web UI) keeps users on your platform even if you suck.
</p>
<p>
If anyone can implement a better interface, there would be little opportunity for stuff like ads, and the only way for the service to make money
would be to collect a fee for data collection and hosting. (which I personally would be happy to pay)
</p></li>
</ul>
<p>
Hopefully all of these issues would be solved by distributed/federated services, but we're pretty far from it.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000040">
<h3 id="unsolved"><a class="headerlink" href="#unsolved">¶</a>unsolved problems</h3>
<div class="outline-text-3" id="text-unsolved">
<ul class="org-ul">
<li><p>
deleted content
</p>
<p>
E.g. imagine you liked someone's post on Facebook, it got mirrored locally, and then the author removed the post.
</p>
<p>
What's the right thing to do for the data mirror app?
Should it erase just the post you liked from your data mirror?
Should it keep the fact that you liked it at all?
</p>
<p>
You may disagree with the way such a policy is imposed by the service, hence implement additional logic to keep more data,
and at that point it seems like a matter for legal debate.
</p></li>
<li><p>
synchronizing data
</p>
<p>
If you want to access data from multiple devices, you either have to run multiple mirrors, which would be a bit of a hassle, or use some continuous sync service like Dropbox or <a href="https://syncthing.net">Syncthing</a>.
</p>
<p>
That however might not be so atomic, depending on the way data is kept on the disk, since files might be pulled in random or lexicographic order, depending on sync configuration.
</p></li>
<li><p>
protecting the data
</p>
<p>
Even if you don't trust your average startup at securing your data, it might be even less safe on average user's disk.
</p></li>
<li><p>
it's assumed that these tools/integrations are open source and running on computers you own.
</p>
<p>
Realistically, closed source tools do exist and it's understandable when people want money for their efforts.
</p>
<p>
From a user's perspective not everyone wants the hassle of running things locally either and many people are happy with online services for the most part.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000047">
<h2 id="what_do_i_do"><a class="headerlink" href="#what_do_i_do">¶</a><span class="section-number-2">7</span> What do I do?</h2>
<div class="outline-text-2" id="text-what_do_i_do">
<p>
Of course, I'm not expecting someone to come and implement all of this for me.
I could start some sort of movement to demand it from services and platforms, but I hardly see myself as a good fit for that role.
</p>
<p>
Instead I've put effort into exporting, integrating and utilizing my data on my own according to the suggestions I formulated.
Putting this in writing helped me motivate and summarize many technical and infrastructural decisions.
</p>
<p>
I'll be describing my setup in more detail in future posts, however here are some bits and pieces:
</p>
</div>
<div class="outline-3" id="outline-container-org0000042">
<h3 id="exports"><a class="headerlink" href="#exports">¶</a>regular data exports</h3>
<div class="outline-text-3" id="text-exports">
<p>
This corresponds to the 'data mirror' bit.
</p>
<p>
I <a href="my-data.html">exported/scraped/reverse engineered</a> pretty much my entire digital trace and figured out automation and infrastructure which works for me.
</p>
<p>
I've shared <a href="https://github.com/search?utf8=%E2%9C%93&amp;q=topic%3Aexport+++user%3Akarlicoss&amp;type=Repositories">some</a> of my personal export scripts and tools.
</p>
<p>
I also have some helper scripts to keep individual exporter's code as clean as possible while ensuring exports are reliable.
</p>
<p>
As I mentioned, I'll share all of this later in a separate post.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000043">
<h3 id="mypkg"><a class="headerlink" href="#mypkg">¶</a>python package to access data</h3>
<div class="outline-text-3" id="text-mypkg">
<p>
Each data exporter comes with minimal bindings that merely map json/sqlite export into simple datatypes and data classes.
</p>
<p>
That way anyone who wishes to use data can kick off some reasonable representation, which is not overfitted to my specific needs.
</p>
<p>
Higher level querying and access, specific to myself is implemented in <a href="mypkg.html#examples">my.</a> package (note that this post is still in draft stage).
</p>
<p>
<a href="https://github.com/karlicoss/my"><code class="inline">my.</code></a> package allows me to query my data from anywhere, enabling me to use familiar data processing, analysis and visualization tools, and various integrations.
</p>
<p>
As a nice byproduct I've also finally figured out a reliable and elegant way to deal with <a href="mypy-error-handling.html">error handling in Python</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000044">
<h3 id="how_it_is_used"><a class="headerlink" href="#how_it_is_used">¶</a>how do I use the data?</h3>
<div class="outline-text-3" id="text-how_it_is_used">
<p>
Finally, some tools and scripts I've implemented to make possible the interactions <a class="link-up" href="#why">that I want</a>:
</p>
<ul class="org-ul">
<li>A <a href="pkm-search.html">personal search engine</a> for quick incremental search of my data and digital trace</li>
<li><a href="orger.html">orger</a>: tool to convert data into org-mode views for instant and offline search and overview
<ul class="org-ul">
<li><a href="orger-todos.html#reddit">also</a> for prioritizing content consumption (e.g. processing Reddit saves)</li>
<li><a href="orger-todos.html#krill">also</a> for populating my spaced repetition queue</li>
<li><a href="orger-todos.html#telegram2org">also</a> for creating TODOs straight from Telegram messages</li>
</ul></li>
<li><a href="./grasp.html">grasp</a>, browser extension to clip links straight into my org-mode notes</li>
<li><a href="https://github.com/karlicoss/promnesia">promnesia</a>, a browser extension to escape silos by unifying annotations and browsing history from different data sources (still somewhat WIP and needs final touches, but planning to release soon)</li>
<li>personal health, sleep and exercise dashboard, built from various data sources. I'm in the process of making it public, you can see some screenshots <a href="https://www.reddit.com/r/QuantifiedSelf/comments/cokt4f/what_do_you_all_do_with_your_data/ewmucgk">here</a></li>
</ul>
<p>
I wrote how each specific data source I export contributes to my personal infrastructure <a href="my-data.html#why">here</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000045">
<h3 id="sync"><a class="headerlink" href="#sync">¶</a>data availability</h3>
<div class="outline-text-3" id="text-sync">
<p>
I'm synchronizing everything across my computers with <a href="https://syncthing.net">syncthing</a>.   
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000046">
<h3 id="backups"><a class="headerlink" href="#backups">¶</a>backups</h3>
<div class="outline-text-3" id="text-backups">
<p>
I'm simply using <a href="https://borgbackup.readthedocs.io/en/stable">borg backup</a> against exported data, whether it's kept in json files or sqlite databases.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000048">
<h2 id="links"><a class="headerlink" href="#links">¶</a><span class="section-number-2">8</span> Related links</h2>
<div class="outline-text-2" id="text-links">
<ul class="org-ul">
<li>jborichevskiy: <a href="https://news.ycombinator.com/item?id=21659876">Digital Tools I Wish Existed (HN)</a></li>
<li><a href="https://commandcenter.blogspot.com/2017/10/the-upspin-manifesto-on-ownership-and.html">The Upspin manifesto</a>: On the ownership and sharing of data</li>
<li>IndieWeb wiki on <a href="https://indieweb.org/silo">silos</a></li>
<li><a href="https://news.ycombinator.com/item?id=21921323">The old Internet died and we watched and did nothing (HN)</a></li>
<li>NetOpWibby: <a href="https://news.ycombinator.com/item?id=21684949">A Personal API (HN)</a></li>
</ul>
<p>
Attempts of resolving this sad state:
</p>
<ul class="org-ul">
<li><p>
<a href="https://en.wikipedia.org/wiki/Solid_(web_decentralization_project)">Solid</a>, web decentralization project by Tim Berners-Lee, WWW pioneer and the director of W3C
</p>
<blockquote>
<p>
The project "aims to radically change the way Web applications work today, resulting in true data ownership as well as improved privacy" by developing a platform for linked-data applications that are completely decentralized and fully under users' control rather than controlled by other entities.
</p>
</blockquote></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000049">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">9</span> --</h2>
<div class="outline-text-2" id="text-fin">
<p>
I'd be interested to know your opinion or questions, whether on my motivation, or particularities of my suggestions or implementation.
</p>
<p>
Let me know if you can think of any other data integrations you are missing and perhaps we can think of something together!
</p>
<ul class="org-ul">
<li><b><span class="timestamp-wrapper"><span class="timestamp">[2020-01-12]</span></span></b> followup: <a href="my-data.html">What data on myself I collect and why?</a></li>
</ul>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#infra">#infra</a> <a class="post-tag" href="./tags.html#pkm">#pkm</a></div>
        <!-- TODO post-date? -->
        <div class="date">15 December 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://news.ycombinator.com/item?id=21844105"><b>hackernews</b></a></li>
    
        <li><a href="https://lobste.rs/s/ztwbh4/sad_state_personal_data_infrastructure">lobste.rs</a></li>
    
        <li><a href="https://www.reddit.com/r/QuantifiedSelf/comments/ecf8o5/the_sad_state_of_personal_data_and_infrastructure">/r/QuantifiedSelf</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_sad_infra"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sun, 15 Dec 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/sad-infra.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Analyzing accuracy of power reported by stationary bike</title>
    <link>https://beepb00p.xyz/exercise-bike-model.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="exercise quantified-self ipython">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Analyzing accuracy of power reported by stationary bike | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
        <script type="text/javascript">
 window.MathJax = {
     tex2jax: {
         // note that hakyll source has got double dollar signs due to special meaning in templates
         inlineMath: [ ['$','$'], ["\\(","\\)"] ],
         processEscapes: true
     }
 };
</script>
<script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        

        <link rel="canonical" href="https://beepb00p.xyz/exercise-bike-model.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/exercise-bike-model.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Analyzing accuracy of power reported by stationary bike | beepb00p" />
        <meta property="og:description" content="How I found my exercise machine to violate laws of physics" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            
<link rel="stylesheet" href="./css/ipynb.css" />
<link rel="stylesheet" href="./css/ipynb-syntax.css" />




<article>
    
    <section class="post-title">
    <h1>Analyzing accuracy of power reported by stationary bike</h1>
    <div class="summary">How I found my exercise machine to violate laws of physics</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    


    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>I was curious how effort exerted during the exercise impacts heart rate and whether that correlates strongly with subjective fatigue and exhaustion.</p>
<p>It seemed that easiest way to experiment would be stationary bike. Running only has single variable, speed. One could of course change incline, but that would be harder to predict.</p>
<p>For elliptical machine or rowing machine it would be even more complicated!</p>
<p>With stationary bike, there are two variables that potentially impact power you need to exert:</p>
<ul>
<li>RPM (revolutions per minute), or angular velocity, that should have linear effect on power (no air resistance as it's stationary!)</li>
<li>resistance, which isn't exactly specified, but one would expect it to be proportional to the force you have to apply (i.e. <a href="https://en.wikipedia.org/wiki/Torque">torque</a>)</li>
</ul>
<p>Or, simply put, $P = \tau \omega$ (<a href="https://en.wikipedia.org/wiki/Power_%28physics%29#Mechanical_power">wiki</a> )</p>
<p>The <a href="https://www.technogym.com/gb/indoor-cycling-live-bike.html">indoor exercise bike</a> displays the pace (i.e. revolutions per minute), so all you have to do is maintain it.
In addition it's displaying current resistance level (you can set it by adjusting a mechanical knob) and reports power in watts.</p>
<p>During exercise, I'm using a chest HR tracker, so simplest thing to do would be take whatever power the machine reports and try to find correlation with moving total/average of HR.</p>
<p>However, being paranoid and lacking any documentation for the machine, I decided no to trust its numbers blindly and check them instead. Technogym's website doesn't help in clarifying how power is computed. They have some sensible information <a href="https://www.technogym.com/gb/newsroom/power-meter-what-is-how-it-works">like</a>:</p>
<blockquote><p>The power meter must be accurate.</p>
<p>The power measurement must be precise and repeatable. A 3-5 watt error is not significant, but if a system is not reliable there may be deviations of many tens of watts, i.e. equal to or greater than the amount of power that is gained from one year's training.</p>
</blockquote>
<p>Let's see how accurate is their power meter!</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Initial-measurements-(2019-11-09)">Initial measurements (2019-11-09)<a class="anchor-link" href="#Initial-measurements-(2019-11-09)">¶</a></h2><p>Throughout different exercise sessions, I've taken bunch of measurements of RPM, resistance and power:</p>

</div>
</div>
</div>





   
   <details class="cell-collapsed">
   <summary>Measurements <span class="cell-collapsed-expand">(click to expand)</span></summary>
       
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="c1"># TODO could only collapse inputs?</span>
<span class="n">datas</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">58 10 129</span>
<span class="s2">56 10 127</span>
<span class="s2">56 10 127</span>
<span class="s2">56 8  94</span>
<span class="s2">57 8  98</span>
<span class="s2">56 8  94</span>
<span class="s2">58 10 133</span>
<span class="s2">56 10 126</span>
<span class="s2">56 8  93</span>
<span class="s2">55 8  91</span>
<span class="s2">56 8  94</span>
<span class="s2">56 10 128</span>
<span class="s2">55 10 124</span>
<span class="s2">54 10 119</span>
<span class="s2">53 8  87</span>
<span class="s2">55 8  93</span>
<span class="s2">55 8  90</span>
<span class="s2">95 8  240</span>

<span class="s2">70 10 198</span>
<span class="s2">55 8  85</span>
<span class="s2">95 8  226</span>
<span class="s2">95 8  229</span>
<span class="s2">95 8  228</span>
<span class="s2">95 8  227</span>

<span class="s2">97 8  236</span>
<span class="s2">95 8  227</span>
<span class="s2">95 8  227</span>
<span class="s2">95 8  230</span>
<span class="s2">60 10 156</span>
<span class="s2">61 10 154</span>
<span class="s2">62 10 162</span>
<span class="s2">61 10 156</span>
<span class="s2">55 10 125</span>
<span class="s2">56 10 128</span>
<span class="s2">57 8  89</span>
<span class="s2">56 8  87</span>
<span class="s2">57 8  90</span>
<span class="s2">57 8  91</span>
<span class="s2">60 8  101</span>
<span class="s2">56 10 129</span>
<span class="s2">57 10 131</span>
<span class="s2">&quot;&quot;&quot;</span>

<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
<span class="k">def</span> <span class="nf">make_df</span><span class="p">(</span><span class="n">datas</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">:</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span>
        <span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">split</span><span class="p">())</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">datas</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">),</span>
        <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">'rpm'</span><span class="p">,</span> <span class="s1">'resistance'</span><span class="p">,</span> <span class="s1">'watts'</span><span class="p">],</span>
    <span class="p">)</span>
    <span class="n">df</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">f</span><span class="s2">&quot;</span><span class="si">{row['rpm']}</span><span class="s2">_</span><span class="si">{row['resistance']}</span><span class="s2">_</span><span class="si">{row['watts']}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="s1">'columns'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">make_df</span><span class="p">(</span><span class="n">datas</span><span class="p">)</span>
<span class="n">old_df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
<span class="c1"># btw, if anyone knows a more elegant way of converting such a table in dataframe, I'd be happy to know!</span>
</pre></div>

    </div>
</div>
</div>

</div>
   </details>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>



<div class="output_html rendered_html output_subarea ">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>rpm</th>
      <th>resistance</th>
      <th>watts</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>95_8_227</th>
      <td>95</td>
      <td>8</td>
      <td>227</td>
    </tr>
    <tr>
      <th>56_8_87</th>
      <td>56</td>
      <td>8</td>
      <td>87</td>
    </tr>
    <tr>
      <th>61_10_154</th>
      <td>61</td>
      <td>10</td>
      <td>154</td>
    </tr>
    <tr>
      <th>57_8_98</th>
      <td>57</td>
      <td>8</td>
      <td>98</td>
    </tr>
    <tr>
      <th>56_8_94</th>
      <td>56</td>
      <td>8</td>
      <td>94</td>
    </tr>
    <tr>
      <th>61_10_156</th>
      <td>61</td>
      <td>10</td>
      <td>156</td>
    </tr>
    <tr>
      <th>95_8_230</th>
      <td>95</td>
      <td>8</td>
      <td>230</td>
    </tr>
    <tr>
      <th>56_10_128</th>
      <td>56</td>
      <td>10</td>
      <td>128</td>
    </tr>
    <tr>
      <th>57_8_90</th>
      <td>57</td>
      <td>8</td>
      <td>90</td>
    </tr>
    <tr>
      <th>62_10_162</th>
      <td>62</td>
      <td>10</td>
      <td>162</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It's reasonable to assume that power depends linearly both on RPM and resistance, so we conjecture <code>watts = rpm x resistance</code>. Let's see if it holds against what the exercise bike reports:</p>

</div>
</div>
</div>





   
   <details class="cell-collapsed">
   <summary>hack to make seaborn plots deterministic <span class="cell-collapsed-expand">(click to expand)</span></summary>
       
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="k">if</span> <span class="n">sns</span><span class="o">.</span><span class="n">algorithms</span><span class="o">.</span><span class="n">bootstrap</span><span class="o">.</span><span class="vm">__module__</span> <span class="o">==</span> <span class="s1">'seaborn.algorithms'</span><span class="p">:</span>
    <span class="c1"># prevents nondeterminism in plots https://github.com/mwaskom/seaborn/issues/1924</span>
    <span class="c1"># we only want to do it once</span>
    <span class="k">def</span> <span class="nf">bootstrap_hacked</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">bootstrap_orig</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">algorithms</span><span class="o">.</span><span class="n">bootstrap</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">bootstrap_orig</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">random_seed</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    
    <span class="n">sns</span><span class="o">.</span><span class="n">algorithms</span><span class="o">.</span><span class="n">bootstrap</span> <span class="o">=</span> <span class="n">bootstrap_hacked</span>
</pre></div>

    </div>
</div>
</div>

</div>
   </details>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">matplotlib</span> inline
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="k">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">plt</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s1">'seaborn'</span><span class="p">)</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>
<span class="n">sns</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">font_scale</span><span class="o">=</span><span class="mf">1.25</span><span class="p">)</span> <span class="c1"># TODO not sure?</span>

<span class="k">def</span> <span class="nf">plot_df</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">dff</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">dff</span><span class="p">[</span><span class="s1">'rpm x resistance'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">'rpm'</span><span class="p">]</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="s1">'resistance'</span><span class="p">]</span>
    <span class="k">if</span> <span class="s1">'color'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dff</span><span class="p">:</span>
        <span class="n">dff</span><span class="p">[</span><span class="s1">'color'</span><span class="p">]</span> <span class="o">=</span> <span class="s1">'blue'</span>

    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">dff</span><span class="p">[</span><span class="s1">'rpm x resistance'</span><span class="p">])</span> <span class="o">*</span> <span class="mf">1.1</span><span class="p">))</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">ylim</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">dff</span><span class="p">[</span><span class="s1">'watts'</span><span class="p">])</span> <span class="o">*</span> <span class="mf">1.1</span><span class="p">))</span>

    <span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">regplot</span><span class="p">(</span>
        <span class="n">data</span><span class="o">=</span><span class="n">dff</span><span class="p">,</span>
        <span class="n">x</span><span class="o">=</span><span class="s1">'rpm x resistance'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s1">'watts'</span><span class="p">,</span>
        <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span>
        <span class="n">scatter_kws</span><span class="o">=</span><span class="p">{</span><span class="s1">'facecolors'</span><span class="p">:</span><span class="n">dff</span><span class="p">[</span><span class="s1">'color'</span><span class="p">]}</span>
    <span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">'Power, theoretical, angular velocity multiplied by resistance'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s1">'Power, watts as reported by the machine'</span><span class="p">)</span>

    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">plot_df</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_6_0.png">
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Wow, that doesn't look so well, I'd expect the regression line to intersect (0, 0). Let's double check this:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
<span class="k">def</span> <span class="nf">print_stats</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">dff</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">dff</span><span class="p">[</span><span class="s1">'rpm x resistance'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s1">'rpm'</span><span class="p">]</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="s1">'resistance'</span><span class="p">]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">dff</span><span class="p">[[</span><span class="s1">'rpm x resistance'</span><span class="p">]]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">add_constant</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">OLS</span><span class="p">(</span><span class="n">dff</span><span class="p">[</span><span class="s1">'watts'</span><span class="p">],</span> <span class="n">X</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
    <span class="n">summary</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">summary</span><span class="p">())</span>
    <span class="kn">import</span> <span class="nn">re</span> <span class="c1"># filter out nondeterministic stuff from the report</span>
    <span class="n">summary</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">'Date:.*\d</span><span class="si">{4}</span><span class="s1">.*</span><span class="se">\n</span><span class="s1">'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">summary</span><span class="p">))</span>
    <span class="n">summary</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s1">'Time:.*\d</span><span class="si">{2}</span><span class="s1">:\d</span><span class="si">{2}</span><span class="s1">:\d</span><span class="si">{2}</span><span class="s1">.*</span><span class="se">\n</span><span class="s1">'</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">summary</span><span class="p">))</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">summary</span><span class="p">)</span>
<span class="n">print_stats</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.982
Model:                            OLS   Adj. R-squared:                  0.981
Method:                 Least Squares   F-statistic:                     2109.
No. Observations:                  41   AIC:                             281.4
Df Residuals:                      39   BIC:                             284.8
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const             -110.6016      5.605    -19.732      0.000    -121.939     -99.264
rpm x resistance     0.4406      0.010     45.929      0.000       0.421       0.460
==============================================================================
Omnibus:                        1.196   Durbin-Watson:                   1.017
Prob(Omnibus):                  0.550   Jarque-Bera (JB):                1.049
Skew:                          -0.190   Prob(JB):                        0.592
Kurtosis:                       2.315   Cond. No.                     2.87e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 2.87e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
</pre>
</div>
</div>

<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stderr output_text">
<pre>/home/karlicos/.local/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Free parameter is about <code>-100</code> watts, which is quite a lot considering my high intensity intervals are <code>250</code> watts (so it means <strong>about 40% error</strong>!). 
I don't think it can be explained by friction either: if anything, friction would shift the plot up and make the free coefficient positive.</p>
<p>At this point, I'm not sure what it means. I guess I'll try to make more measurements at really low resistances and speeds to make the model more complete, but I would be too surprised if either watts or resistance reported by the machine are just made up.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="More-data-(2019-11-14)">More data (2019-11-14)<a class="anchor-link" href="#More-data-(2019-11-14)">¶</a></h2><p>I collected more data corresponding to different resistances/velocities. It's actually quite hard to consistently spin under low resistance setting, so I think I might need one more round of data collection to complete the picture!</p>

</div>
</div>
</div>





   
   <details class="cell-collapsed">
   <summary>More measurements <span class="cell-collapsed-expand">(click to expand)</span></summary>
       
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">new_df</span> <span class="o">=</span> <span class="n">make_df</span><span class="p">(</span><span class="s2">&quot;&quot;&quot;</span>
<span class="s2">96  4  66</span>
<span class="s2">99  4  69</span>
<span class="s2">101 6  146</span>
<span class="s2">103 6  149</span>
<span class="s2">110 6  166</span>
<span class="s2">111 6  170</span>
<span class="s2">50  13 186</span>
<span class="s2">36  13 107</span>
<span class="s2">36  13 105</span>
<span class="s2">31  10 41</span>
<span class="s2">30  10 44</span>
<span class="s2">28  10 39</span>
<span class="s2">117 8  323</span>
<span class="s2">116 8  320</span>
<span class="s2">116 8  322</span>
<span class="s2">48  6  40</span>
<span class="s2">49  6  37</span>
<span class="s2">60  2  24</span>
<span class="s2">59  2  23</span>
<span class="s2">86  2  40</span>
<span class="s2">106 2  48</span>
<span class="s2">62  5  44</span>
<span class="s2">61  5  44</span>
<span class="s2">81  5  70</span>
<span class="s2">81  5  70</span>
<span class="s2">93  5  90</span>
<span class="s2">97  5  97</span>
<span class="s2">35  12 87</span>
<span class="s2">33  12 81</span>
<span class="s2">25  12 51</span>
<span class="s2">26  12 55</span>
<span class="s2">27  1  50</span>
<span class="s2">39  8  46</span>
<span class="s2">39  8  44</span>
<span class="s2">30  8  29</span>
<span class="s2">30  8  31</span>
<span class="s2">32  8  31</span>
<span class="s2">32  8  31</span>
<span class="s2">29  8  29</span>
<span class="s2">&quot;&quot;&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>
   </details>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">old_df</span><span class="p">,</span> <span class="n">new_df</span><span class="p">])</span>
<span class="n">plot_df</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="n">print_stats</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_12_0.png">
</div>

</div>

<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.924
Model:                            OLS   Adj. R-squared:                  0.923
Method:                 Least Squares   F-statistic:                     952.2
No. Observations:                  80   AIC:                             709.6
Df Residuals:                      78   BIC:                             714.3
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -60.3329      6.129     -9.843      0.000     -72.535     -48.130
rpm x resistance     0.3614      0.012     30.857      0.000       0.338       0.385
==============================================================================
Omnibus:                       57.648   Durbin-Watson:                   1.094
Prob(Omnibus):                  0.000   Jarque-Bera (JB):              238.330
Skew:                           2.326   Prob(JB):                     1.77e-52
Kurtosis:                      10.062   Cond. No.                     1.42e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.42e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Ok, it clearly started diverging from the nice linear dependency, especially at lower values of theoretical power. It's time to try to break it down and see what is to blame: e.g., resistance or speed component, or perhaps some individual measurements.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Analyzing-data-and-looking-at-outliers-(2019-11-24)">Analyzing data and looking at outliers (2019-11-24)<a class="anchor-link" href="#Analyzing-data-and-looking-at-outliers-(2019-11-24)">¶</a></h2>
</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">import</span> <span class="nn">statsmodels.api</span> <span class="k">as</span> <span class="nn">sm</span>
<span class="k">def</span> <span class="nf">plot_influence</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="c1"># TODO FIXME use it in prev section</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="n">formula</span><span class="o">.</span><span class="n">ols</span><span class="p">(</span><span class="s2">&quot;watts ~ rpm * resistance - resistance - rpm&quot;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">)</span><span class="o">.</span><span class="n">fit</span><span class="p">()</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
    <span class="n">sm</span><span class="o">.</span><span class="n">graphics</span><span class="o">.</span><span class="n">influence_plot</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">criterion</span><span class="o">=</span><span class="s2">&quot;cooks&quot;</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
<span class="n">plot_influence</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
<span class="c1"># sm.graphics.plot_partregress_grid(res, fig=fig)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_15_0.png">
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>TODO hmm, 0.10 is not <em>that</em> high leverage right?
Although depends on residual too, and here the residual is very high, so it would have high influence..
<a href="https://www.statsmodels.org/dev/examples/notebooks/generated/regression_plots.html">https://www.statsmodels.org/dev/examples/notebooks/generated/regression_plots.html</a></p>
<p>'27_1_50' seems like a typo. Let's drop it and ignore.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">fdf</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">drop</span><span class="p">([</span>
    <span class="s1">'27_1_50'</span><span class="p">,</span>
<span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Ok, that's somewhat better at least in terms of outliers. Let's see if that helps:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[10]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">plot_df</span><span class="p">(</span><span class="n">fdf</span><span class="p">)</span>
<span class="n">print_stats</span><span class="p">(</span><span class="n">fdf</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_19_0.png">
</div>

</div>

<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.950
Model:                            OLS   Adj. R-squared:                  0.949
Method:                 Least Squares   F-statistic:                     1467.
No. Observations:                  79   AIC:                             667.9
Df Residuals:                      77   BIC:                             672.7
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -69.9960      5.203    -13.454      0.000     -80.356     -59.636
rpm x resistance     0.3784      0.010     38.307      0.000       0.359       0.398
==============================================================================
Omnibus:                       27.329   Durbin-Watson:                   0.562
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               40.545
Skew:                           1.500   Prob(JB):                     1.57e-09
Kurtosis:                       4.823   Cond. No.                     1.49e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.49e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So, on one hand that did make fit look more linear. On the other hand we've had to filter out all the low-resistance observations to achieve that.</p>
<p>I guess I'll collect more observations to be absolutely sure.</p>
<p>TODO add TOC or something?</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<h2 id="Even-more-data-(2019-11-25)">Even more data (2019-11-25)<a class="anchor-link" href="#Even-more-data-(2019-11-25)">¶</a></h2><p>I've collected a bit more data, especially at lower velocities and resistance:</p>

</div>
</div>
</div>





   
   <details class="cell-collapsed">
   <summary>More measurements <span class="cell-collapsed-expand">(click to expand)</span></summary>
       
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[11]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">new_df_2</span> <span class="o">=</span> <span class="n">make_df</span><span class="p">(</span><span class="s2">&quot;&quot;&quot;</span>
<span class="s2">113 2  50</span>
<span class="s2">73  2  32</span>
<span class="s2">71  2  30</span>
<span class="s2">70  2  29</span>
<span class="s2">107 3  64</span>
<span class="s2">108 3  65</span>
<span class="s2">114 4  103</span>
<span class="s2">48  4  25</span>
<span class="s2">40  4  20</span>
<span class="s2">31  13 81</span>
<span class="s2">36  16 163</span>
<span class="s2">40  5  24</span>
<span class="s2">35  6  23</span>
<span class="s2">31  7  23</span>
<span class="s2">31  9  40</span>
<span class="s2">40  9  64</span>
<span class="s2">115 6  175</span>
<span class="s2">109 6  163</span>
<span class="s2">31  12 72</span>
<span class="s2">30  13 76</span>
<span class="s2">54  4  33</span>
<span class="s2">38  4  19</span>
<span class="s2">75  4  55</span>
<span class="s2">36  8  40</span>
<span class="s2">39  8  46</span>
<span class="s2">32  8  34</span>
<span class="s2">70  3  39</span>
<span class="s2">49  3  22</span>
<span class="s2">37  3  14</span>
<span class="s2">&quot;&quot;&quot;</span><span class="p">)</span>

<span class="n">ndf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">fdf</span><span class="p">,</span> <span class="n">new_df_2</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

</div>
   </details>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Let's check for outliers first:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[12]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">plot_influence</span><span class="p">(</span><span class="n">ndf</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_24_0.png">
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Residuals of 3 are borderline, but don't immediately mean outliers.</p>
<p>Let's plot and analyze! Just out of curiosity, in addition we'll color values corresponding to different resistances (the darker, the more resistance):</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[13]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">ress</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">ndf</span><span class="p">[</span><span class="s1">'resistance'</span><span class="p">])))</span>
<span class="n">colors</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">ress</span><span class="p">,</span> <span class="n">sns</span><span class="o">.</span><span class="n">light_palette</span><span class="p">(</span><span class="s1">'navy'</span><span class="p">,</span> <span class="n">n_colors</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">ress</span><span class="p">))))</span>
<span class="n">ndf</span><span class="p">[</span><span class="s1">'color'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">colors</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ndf</span><span class="p">[</span><span class="s1">'resistance'</span><span class="p">]]</span>
<span class="c1"># if you know of an easier way to use column value as a color in seaborn, please let me know!</span>
<span class="n">plot_df</span><span class="p">(</span><span class="n">ndf</span><span class="p">)</span>
<span class="n">print_stats</span><span class="p">(</span><span class="n">ndf</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="exercise-bike-model_files/exercise-bike-model_26_0.png">
</div>

</div>

<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.943
Model:                            OLS   Adj. R-squared:                  0.942
Method:                 Least Squares   F-statistic:                     1754.
No. Observations:                 108   AIC:                             922.1
Df Residuals:                     106   BIC:                             927.5
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -52.5400      4.002    -13.130      0.000     -60.474     -44.606
rpm x resistance     0.3483      0.008     41.880      0.000       0.332       0.365
==============================================================================
Omnibus:                       20.686   Durbin-Watson:                   0.646
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               25.653
Skew:                           1.159   Prob(JB):                     2.69e-06
Kurtosis:                       3.574   Cond. No.                     1.17e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.17e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So, there is a clear trend of points clumping towards 0, which means that the model ceases to be linear.</p>
<p>If we try to fit the line to the points in a more reasonable exercise range (e.g. at least 50 RPM and resistance of 6, which would mean Power &gt;= 300), that would skew the regression line even more to the right and move the coefficient even further away from zero.</p>
<p>So overall it means that either:</p>
<ul>
<li>the assumption of linear dependency on resistance and velocity is wrong, but then it's completely unclear how the power is estimated</li>
<li>I wasn't accurate during measurements on lower intensities, but I think it's pretty unlikely as I did multiple measurement sessions and even if you ignore the higher variance, mean is still way above the regression line </li>
<li>the velocity/resistance reported by the machine are wrong or misleading. It's possible that the number machine assigns to 'resistance' doesn't really mean anything.</li>
</ul>
<h2 id="Conclusion">Conclusion<a class="anchor-link" href="#Conclusion">¶</a></h2><p>¯\<em>(ツ)</em>/¯</p>
<p>I guess be careful about trusting the equipment and do your own experiments.</p>
<p>As you can see, my initial project of finding some correlation with my HR turned out in a completely different direction.</p>
<h3 id="Next-steps">Next steps<a class="anchor-link" href="#Next-steps">¶</a></h3><p>Would be interesting to at least compare watts (theoretical and reported by the machine) versus calories estimated by Endomondo (which takes heart rate into account).</p>

</div>
</div>
</div>



 


    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#exercise">#exercise</a> <a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a> <a class="post-tag" href="./tags.html#ipython">#ipython</a></div>
        <!-- TODO post-date? -->
        <div class="date">08 December 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_exercise_bike_model"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sun, 08 Dec 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/exercise-bike-model.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Scrapyroo</title>
    <link>https://beepb00p.xyz/scrapyroo.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="infra scraping rust">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Scrapyroo | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/scrapyroo.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/scrapyroo.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Scrapyroo | beepb00p" />
        <meta property="og:description" content="How I was unhappy about Deliveroo search and implemented my own" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Scrapyroo</h1>
    <div class="summary">How I was unhappy about Deliveroo search and implemented my own</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org0000000">1. Past Rust experience</a></li>
<li><a href="#org0000001">2. Deliveroo is great!</a></li>
<li><a href="#org0000006">3. The problem</a></li>
<li><a href="#org000000b">4. What can we do?</a></li>
<li><a href="#scrapyroo">5. Scrapy<font color="#b7410e">r</font><font color="#00ccbc">oo</font></a></li>
<li><a href="#org000000e">6. Why Tantivy?</a></li>
<li><a href="#org0000010">7. Tantivy: good</a></li>
<li><a href="#tantivy_bad">8. Tantivy: bad</a></li>
<li><a href="#org0000014">9. Enhancing Tantivy</a></li>
<li><a href="#org0000015">10. Contributions back</a></li>
<li><a href="#org0000016">11. Outtakes</a></li>
<li><a href="#org0000017">12. Credits</a></li>
<li><a href="#fin">13. Thanks!</a></li>
<li><a href="#org000001b">14. Appendix: Tantivy details</a></li>
<li><a href="#org000001f">15. Appendix: random Rust things</a></li>
</ul>
</div>
</div>
<style>.NOTES {background-color: lightgray;}</style>
<div class="NOTES">
<p>
These are my slides + speaker notes from <a href="https://www.meetup.com/Rust-London-User-Group/events/266262531">November Rust London User Group meetup</a>. 
Huge thanks to <a href="https://twitter.com/ernestkissiedu">Ernest</a> for organising!
</p>
<p>
Presentation is done in org-reveal and source is available <a href="https://github.com/karlicoss/scrapyroo-slides">here</a>. <b>Grey areas are speaker notes</b>, rest are actual slides.
</p>
</div>
<div class="NOTES">
<p>
Hi, I'm Dima and today I'm gonna tell you about <a href="https://github.com/karlicoss/scrapyroo">Scrapyroo</a>, which is a tool I built to search over Deliveroo menus and make my life a bit easier.
</p>
<p>
The tool was made possible by <a href="https://github.com/tantivy-search/tantivy">Tantivy</a>, <a href="https://github.com/scrapy/scrapy">scrapy</a> and <a href="https://reactjs.org">React</a>
</p>
<p>
Also just to make clear: I'm not employed by Deliveroo!
So it's not like I'm just pitching you the feature I implemented on my day job :P
</p>
</div>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="org0000000"><a class="headerlink" href="#org0000000">¶</a><span class="section-number-2">1</span> Past Rust experience</h2>
<div class="outline-text-2" id="text-1">
<p>
Virtually none apart from some Project Euler.
</p>
<div class="NOTES">
<p>
This time I also got away with not writing much of new Rust code.
Which is a good thing! Library I'm going to tell you about does deals with most of complicated and tedious stuff.
</p>
<p>
But this is my first proper interaction with the Rust ecosystem.
</p>
<p>
I am comfortable with many different other programming languages though and have been following Rust news, so haven't struggled with the languages specifically.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="org0000001"><a class="headerlink" href="#org0000001">¶</a><span class="section-number-2">2</span> Deliveroo is great!</h2>
<div class="outline-text-2" id="text-2">
<p>
I can't imagine ordering food without a service like this.
</p>
<div class="NOTES">
<p>
Not sure if there are any Deliveroo employees here, but I want to thank you for a great product!
</p>
<p>
As a millennial/someone born in mid 90s, I am imagining life before services like Deliveroo and Uber as some sort of dark ages.
</p>
<p>
My older friends told me some dreadful stories. Apparently you'd browse through paper menus, have to phone call the operator and coordinate the courier?
</p>
<p>
Brrr.. I'm lucky to live now.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000006">
<h2 id="org0000006"><a class="headerlink" href="#org0000006">¶</a><span class="section-number-2">3</span> The problem</h2>
<div class="outline-text-2" id="text-3">
<p>
No search by menus, only restaurants/cuisines :(
</p>
<p>
It's ok for getting <b>something</b> to eat, but not great when you know what you want to order.
</p>
<div class="NOTES">
<p>
UPDATE: Some spooky stuff happened 🎃
On the morning of Tuesday, 19 November when I was to give this talk I found out that the search bar on Deliveroo has gone from "Restaurants or cuisines" to "Dishes, restaurants or cuisines"!
</p>
<p>
Which meant  that Deliveroo supported searching in dish names.
I thought I'd gone bonkers until few of my friends confirmed that they didn't remember that and it must have been added very recently, over the weekend.
</p>
<p>
I like to think that I'm very important and that wasn't a coincidence so maybe I have some sort of superpower.
If you miss a feature in some web service you're using, let me know, maybe I can implement it and that would get the service to implement it too :P (could start with editing tweets, perhaps?)
</p>
<p>
So, you can search in dishes too now, however hopefully that doesn't make my tool irrelevant, you'd be able to see for yourself later.
(e.g. full text menu search, not just titles, search as you type, queries)
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000002">
<h3 id="org0000002"><a class="headerlink" href="#org0000002">¶</a><span class="section-number-3">3.1</span> You can't find specific dishes!</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li>craving things</li>
<li>varying your diet</li>
<li>accommodating multiple people's prefs at the same time</li>
</ul>
<div class="NOTES">
<p>
Why would you want this?
</p>
<ul class="org-ul">
<li>Craving: e.g. if you want to treat yourself with some dessert, better get something you'd <b>really</b> enjoy instead of mediocre one because that's what the restaurant offered.</li>
<li>Varying: I'm trying to expose myself to all kinds of food to make sure I'm not missing on some important nutrients.</li>
<li>Multiple people: you and your friends want different things and you need to choose a single restaurant to order from.</li>
</ul>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000003">
<h3 id="org0000003"><a class="headerlink" href="#org0000003">¶</a><span class="section-number-3">3.2</span> </h3>
<div class="outline-text-3" id="text-3-2">
<div class="figure">
<p><img alt="categories.png" src="pic/categories.png" />
</p>
</div>
<div class="NOTES">
<p>
Just to demonstrate what I'm talking about, here's the Deliveroo web interface (mobile looks similar).
</p>
<p>
You can filter by dietary restrictions, fair enough, but then finest you can do is to pick "Categories".
</p>
<p>
Some of them kinda make sense (e.g. "Bagels"), some of them are too broad (e.g. what is "Asian/American"? could be anything).
Some of them are just plain weird, like what is "Back to school" supposed to mean?
</p>
<p>
This is the best you're gonna get from Deliveroo.
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000004">
<h3 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><span class="section-number-3">3.3</span> </h3>
<div class="outline-text-3" id="text-3-3">
<div class="figure">
<p><img alt="tabs.png" src="pic/tabs.png" />
</p>
</div>
<div class="NOTES">
<p>
Say, you want some grilled tuna and green vegetables. 
</p>
<p>
Best you can do is open all 15 places that serve fish in different tabs,
Ctrl-F tuna and then try to decide among them.
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000005">
<h3 id="org0000005"><a class="headerlink" href="#org0000005">¶</a><span class="section-number-3">3.4</span> Sad!</h3>
<div class="outline-text-3" id="text-3-4">
<p>
Full text search is a basic human right!     
</p>
<div class="NOTES">
<p>
I asked people and apparently they just accepted and never questioned that sad workflow!  
</p>
<p>
It feels especially wrong to me because human brains are good at creative things.
Not so good at stuff like text search – that's one of things computers are <b>exceptionally</b> good at and we're ought to exploit that.
</p>
</div>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000b">
<h2 id="org000000b"><a class="headerlink" href="#org000000b">¶</a><span class="section-number-2">4</span> What can we do?</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li><p>
scrape menu data off Deliveroo website
</p>
<div class="NOTES">
<p>
e.g. every day at 10 AM
</p>
<p>
About 600 restaurants deliver to my postcode.
</p>
<p>
Results in huge json file.
</p>
</div></li>
<li><p>
index menu data
</p>
<div class="NOTES">
<p>
Indexing needed mostly because I want
</p>
<ul class="org-ul">
<li>search operators</li>
<li>stemming, e.g. removing inflection, so there's no difference, between 'grill and grilled'</li>
</ul>
</div></li>
<li>backend to serve indexed data</li>
<li>frontend to search in the data</li>
</ul>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="org0000007"><a class="headerlink" href="#org0000007">¶</a><span class="section-number-3">4.1</span> Scraping menus</h3>
<div class="outline-text-3" id="text-4-1">
<p>
Python (<a href="https://github.com/scrapy/scrapy">scrapy</a>). Almost no need for HTML parsing!
</p>
<div class="figure">
<p><img alt="json.png" src="pic/json.png" />
</p>
</div>
<div class="NOTES">
<p>
To try it for yourself, go to some restaurant, e.g.
<a href="https://deliveroo.co.uk/menu/london/spitalfields/tokyo-sushi-finsbury-park">https://deliveroo.co.uk/menu/london/spitalfields/tokyo-sushi-finsbury-park</a>
open chrome inspector and type <code class="inline">{"</code> .  <code class="inline">js-react-on-rails-context</code> should be among the results.
</p>
<p>
If there are any Deliveroo developers here, sorry for public dissection of your website!
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="org0000008"><a class="headerlink" href="#org0000008">¶</a><span class="section-number-3">4.2</span> Scraping menus</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">
<pre class="src src-json">{
  "urls": ["/menu/london/liverpool-street/pub-classics-from-greene-king-bishopsgate"],
  "delivery_location": { "address": [ -0.0623, 51.123 ]},
  "id": 189155,
  "name": "Pub Classics from Greene King - Kings Arms",
  "description": "Bringing the pub to your door",
  "uname": "pub-classics-from-greene-king-bishopsgate",
  "menu": {"items": [
     {
	 "id": 31299189,
	 "name": "Chickpea, Red Pepper &amp; Hoisin Burger (VE)",
	 "description": "Chickpea and mixed vegetable burger",
	 "price": "\u00a310.79"
     },
     {
	 "id": 31085809,
	 "name": "Fish &amp; Chips with Wine for 2",
	 "description": "2 x cod with chips and a bottle of wine\r\n",
	 "price": "\u00a338.99"
     }
  ]}
}
</pre>
</div>
<div class="NOTES">
<p>
We get something like that (I've filtered out irrelevant stuff) for each restaurant.
</p>
<p>
Scraped json data is kept separately to checkpoint in case scraping/indexing fails.
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="org0000009"><a class="headerlink" href="#org0000009">¶</a><span class="section-number-3">4.3</span> Indexing menus &amp; serving data</h3>
<div class="outline-text-3" id="text-4-3">
<p>
<a href="https://github.com/tantivy-search/tantivy">Tantivy</a>!   
</p>
<div class="NOTES">
<p>
I'm going to be explaining why it works well later in the presentation.
</p>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="org000000a"><a class="headerlink" href="#org000000a">¶</a><span class="section-number-3">4.4</span> Frontend</h3>
<div class="outline-text-3" id="text-4-4">
<p>
HTML and some Javascript/React
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000d">
<h2 id="scrapyroo"><a class="headerlink" href="#scrapyroo">¶</a><span class="section-number-2">5</span> Scrapy<font color="#b7410e">r</font><font color="#00ccbc">oo</font></h2>
<div class="outline-text-2" id="text-scrapyroo">
<p>
(Live demo). You can try it here: <a href="https://scrapyroo.karlicoss.xyz">scrapyroo.karlicoss.xyz</a>
</p>
<div class="NOTES">
<p>
Note that this only indexes my district (Whitechapel).
Also not sure for how long I'll expose it, but I'll make a demo video before shutting it down.
</p>
<p>
Also there is a screenshot in <a href="https://github.com/karlicoss/scrapyroo">readme</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000c">
<h3 id="org000000c"><a class="headerlink" href="#org000000c">¶</a><span class="section-number-3">5.1</span> Features</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li><p>
search queries
</p>
<div class="NOTES">
<p>
demo: say you want some halloumi and green vegetables.
</p>
<p>
Type: 'halloumi AND vegetables'. Whoa, vegetable smoothie in results? No, thank you.
So we can use phrase query (quotes) and exclusive query (-): add 'AND -"vegetable smoothie"'. Ah, that's better now!
</p>
<p>
Say you also want some desert. Add 'AND cheesecake' or 'AND "ice cream"'. Nice, few places actually serve this combination!
</p>
</div>
<div class="NOTES">
<p>
Or you're ordering with two other friends. 
</p>
<p>
You want prawns, another one wants chicken salad, and the third wants some feta.
</p>
<p>
'prawns AND "chicken salad" AND "feta"' – and we instantly find few matches!
</p>
<p>
Without full text search there is no way you would ever find it, and someone would be unsatisfied about collective choice.
</p>
</div></li>
<li><p>
search as you type
</p>
<div class="NOTES">
<p>
At the moment requests index on almost every keystroke, would be nice to keep a persistent connection,
although that's something that is hard to implement in a generic way.
</p>
<p>
Demonstrate in dev tools
</p>
</div></li>
<li>works from phone as well as desktop browser</li>
</ul>
<div class="NOTES">
<ul class="org-ul">
<li>show debug mode? maybe later if I got a bit more time</li>
<li>ui perhaps is a bit rough</li>
</ul>
</div>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000e">
<h2 id="org000000e"><a class="headerlink" href="#org000000e">¶</a><span class="section-number-2">6</span> Why Tantivy?</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
initial <a href="https://lunrjs.com">lunrjs</a> implementation was visibly laggy even on desktop
</p>
<div class="NOTES">
<p>
Need to carry data inside the huge html – not that great.
</p>
<p>
You need internet anyway to make an order, so I didn't mind having a proper backend.
</p>
</div></li>
<li><p>
also, why not?
</p>
<div class="NOTES">
<p>
Wanted to try out Rust for some real project.
</p>
<p>
Never used any other search engine libraries and was recommended Tantivy.
</p>
</div></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000010">
<h2 id="org0000010"><a class="headerlink" href="#org0000010">¶</a><span class="section-number-2">7</span> Tantivy: good</h2>
<div class="outline-text-2" id="text-7">
<p>
Features:
</p>
<ul class="org-ul">
<li><p>
<a href="https://docs.rs/tantivy/0.10.3/tantivy/struct.Snippet.html">highlight positions</a>, snippets
</p>
<div class="NOTES">
<p>
alt-tab to the presentation and show what I mean by snippets?
</p>
<p>
Without the snippets: pretty sad. 
</p>
<p>
Demonstrate lack of snippets:
</p>
<ul class="org-ul">
<li>disable highlights in chrome inspector</li>
<li>tick 'show unmatched'</li>
<li>untick 'show matched first'</li>
</ul>
</div></li>
<li><p>
<a href="https://docs.rs/tantivy/0.10.3/tantivy/struct.IndexWriter.html">transactional</a> index updates
</p>
<div class="NOTES">
<p>
add/delete/rollback/commit
</p>
</div></li>
<li><p>
<a href="https://docs.rs/tantivy/0.10.3/tantivy/enum.ReloadPolicy.html">autoreloading</a> latest commit in searchers 
</p>
<div class="NOTES">
<p>

Caveat: have to be careful when deploying index remotely, <code class="inline">meta.json</code> file has to be deployed <b>last</b>!
</p>
<p>
I'm in progress of writing up a github issue, will put the link here.  
</p>
</div></li>
<li><a href="https://github.com/tantivy-search/tantivy-py">Python bindings</a></li>
<li><p>
well documented, easy to modify
</p>
<div class="NOTES">
<p>
Mention <a href="https://tantivy-search.github.io/tantivy/tantivy/schema/struct.Facet.html">facets</a>? 
</p>
</div></li>
</ul>
</div>
<div class="outline-3" id="outline-container-org000000f">
<h3 id="org000000f"><a class="headerlink" href="#org000000f">¶</a><span class="section-number-3">7.1</span> Tantivy CLI: awesome</h3>
<div class="outline-text-3" id="text-7-1">
<p>
Takes you from zero to prototype in a matter of <b>minutes</b> without distracting on irrelevant stuff.
</p>
<div class="org-src-container">
<pre class="src src-bash">tantivy-cli new    -i your_index  <span class="org-comment-delimiter"># </span><span class="org-comment">interactive!</span>
tantivy-cli index  -i your_index &lt; data.jsonl
tantivy-cli serve  -i your_index <span class="org-comment-delimiter"># </span><span class="org-comment">http interface</span>
tantivy-cli search -i your_index -q <span class="org-string">"spinach AND paneer"</span> <span class="org-comment-delimiter"># </span><span class="org-comment">cli queries</span>
tantivy-cli bench  <span class="org-comment-delimiter"># </span><span class="org-comment">query benchmarking</span>
</pre>
</div>
<div class="NOTES">
<p>
And I'm not exaggerating about minutes!
You can index data and expose it to your frontend without a singe line of code.
</p>
<p>
I spent most time on scraping and frontend.
</p>
</div>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000011">
<h2 id="tantivy_bad"><a class="headerlink" href="#tantivy_bad">¶</a><span class="section-number-2">8</span> Tantivy: bad</h2>
<div class="outline-text-2" id="text-tantivy_bad">
<ul class="org-ul">
<li><p>
no nested document support (<a href="https://github.com/tantivy-search/tantivy/issues/617">yet</a>)
</p>
<ul class="org-ul">
<li>would be nice to have queries like <samp class="inline">starter:dumpling AND main:salad</samp></li>
<li>potentially less resource wasteful</li>
</ul>
<div class="NOTES">
<p>
You can't return matched menu items only, have to index and serve the whole menu.
</p>
<p>
It's not too bad though, I'm getting around this by relying on line breaks to only display matched items.
</p>
</div></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000014">
<h2 id="org0000014"><a class="headerlink" href="#org0000014">¶</a><span class="section-number-2">9</span> Enhancing Tantivy</h2>
<div class="outline-text-2" id="text-9">
<p>
Rust observations:
</p>
<ul class="org-ul">
<li><p>
single binary: very easy to deploy
</p>
<div class="org-src-container">
<pre class="src src-bash">cargo install tantivy-cli --root /Dropbox/soft/tantivy-cli
</pre>
</div>
<div class="NOTES">
<p>
Especially on VPS, which only (huh!) got two cores and wouldn't handle compiling Rust well
</p>
</div></li>
<li><p>
<a href="https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html"><code class="inline">musl</code></a>: minimal libc implementation
</p>
<div class="org-src-container">
<pre class="src src-bash">apt install musl-tools 
rustup target add x86_64-unknown-linux-musl
cargo build/install --target x86_64-unknown-linux-musl
</pre>
</div>
<div class="NOTES">
<p>
Turned out my desktop and my VPS where I wanted to run the backend use different libc version.
</p>
<p>
Normally that would mean crosscompiling and all the associated horror.
</p>
<p>
With Rust it turned out to be a matter of adding a target via rustup and that's it!
</p>
</div></li>
<li><p>
<a href="https://doc.rust-lang.org/rust-by-example/trait/derive.html">derive</a> debug/serialize
</p>
<div class="NOTES">
<p>
First seen in Haskell!
</p>
<p>
Python: kind of there via NamedTuples/dataclasses
</p>
<p>
I often miss it in C++!
You can implement it with templates, macros or <code class="inline">boost::preprocessor</code> depending on how much you hate yourself/your team :P
But it's a very reasonable default feature to have.
</p>
</div></li>
</ul>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="org0000012"><a class="headerlink" href="#org0000012">¶</a><span class="section-number-3">9.1</span> </h3>
<div class="outline-text-3" id="text-9-1">
<p>
Cargo: <b>very</b> easy to change dependency to local
</p>
<pre class="example">
tantivy-cli/Cargo.toml:
- tantivy = "0.10"
+ tantivy = { path = "/coding/tantivy" }
</pre>
<div class="NOTES">
<p>
I managed to run this with the minimal effort.
</p>
<p>
There is tantivy, tantivy-cli and tantivy-py.
I was experimenting with exposing this snippet API from tantivy so needed to change dependency.
</p>
<p>
To be fair, not too bad in pip:
</p>
<p>
<code class="inline">pip3 install --user 'git+https://github.com/karlicoss/tantivy-py@delete-all-documents'</code>
</p>
<p>
However, not discoverable via <code class="inline">--help</code>, you have to know what to look for!
</p>
</div>
<ul class="org-ul">
<li><p>
or, github: 
</p>
<div class="org-src-container">
<pre class="src src-bash">cargo install  <span class="org-sh-escaped-newline">\</span>
--git https://github.com/karlicoss/tantivy-cli <span class="org-sh-escaped-newline">\</span>
--branch serve-snippets
</pre>
</div>
<div class="NOTES">
<p>
I had to patch tantivy a bit, and it would take me a bit of time to get PRs accepted to upstream.
</p>
<p>
You can try it as easy as you would 
</p>
</div></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="org0000013"><a class="headerlink" href="#org0000013">¶</a><span class="section-number-3">9.2</span> </h3>
<div class="outline-text-3" id="text-9-2">
<p>
<a href="https://github.com/tantivy-search/tantivy-py">tantivy-py</a>: surprisingly simple integration
</p>
<ul class="org-ul">
<li><p>
just <code class="inline">pip install</code> thanks to <a href="https://github.com/PyO3/setuptools-rust"><samp class="inline">setuptools-rust</samp></a>.
</p>
<div class="NOTES">
<p>
Benefits from existing Rust ecosystem: e.g. can run <code class="inline">cargo build</code>, etc. You just write normal Rust code.
</p>
</div></li>
<li><p>
easy to interface
</p>
<div class="org-src-container">
<pre class="src src-rust">fn delete_all_documents(&amp;mut self) -&gt; PyResult&lt;u64&gt; {
  self.inner_index_writer.delete_all_documents().map_err(to_pyerr)
}
</pre>
</div>
<p>
Powered by <a href="https://github.com/PyO3/pyo3#using-rust-from-python">PyO3</a>.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000015">
<h2 id="org0000015"><a class="headerlink" href="#org0000015">¶</a><span class="section-number-2">10</span> Contributions back</h2>
<div class="outline-text-2" id="text-10">
<div class="NOTES">
<p>
I figured Tantivy could benefit from some things I implemented.
</p>
</div>
<p>
Pull requests in progress:
</p>
<ul class="org-ul">
<li><p>
exposing absolute highlight positions
</p>
<div class="NOTES">
<p>
<a href="https://docs.rs/tantivy/0.10.2/tantivy/struct.Snippet.html#method.to_html"><code class="inline">to_html</code></a> isn't gonna work well, you'll want to restyle it.
</p>
</div></li>
<li><p>
React boilerplate to interact with CLI backend
</p>
<div class="NOTES">
<p>
Most of my time was spent on getting around frontend quirks, so that would make prototyping even easier.
</p>
</div></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000016">
<h2 id="org0000016"><a class="headerlink" href="#org0000016">¶</a><span class="section-number-2">11</span> Outtakes</h2>
<div class="outline-text-2" id="text-11">
<ul class="org-ul">
<li><p>
rust &amp; tantivy
</p>
<p>
Very pleasant experience, no frustration
</p></li>
<li><p>
my life is simpler now!
</p>
<p>
I don't have to waste time browsing through the website
</p></li>
<li>discovered places I'd have never found otherwise</li>
<li><p>
you don't have to suffer from inconvenience in your life   
</p>
<div class="NOTES">
<p>
If you can program, you are literally capable of anything you can think of (well, given enough time :P).
</p>
<p>
You can bend the interactions with the outside world the way you want.
</p>
</div></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000017">
<h2 id="org0000017"><a class="headerlink" href="#org0000017">¶</a><span class="section-number-2">12</span> Credits</h2>
<div class="outline-text-2" id="text-12">
<ul class="org-ul">
<li><p>
<a href="https://github.com/petr-tik">github.com/petr-tik</a>: ask him about Tantivy!
</p>
<div class="NOTES">
<p>
Petr pushed me to actually give a talk, helped with Tantivy and gave me lots of helpful advice on improving the presentation. Thank you!
</p>
<p>
He's passionate about Tantivy and will be happy to help you if you think something is missing or can be improved.
</p>
</div></li>
<li><a href="https://twitter.com/katya_titkova">Katya</a>: beta testing and ghostwriting</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000018">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">13</span> Thanks!</h2>
<div class="outline-text-2" id="text-fin">
<div class="NOTES">
<p>
Questions?  
</p>
</div>
<ul class="org-ul">
<li><a href="https://github.com/karlicoss/scrapyroo">github.com/karlicoss/scrapyroo</a></li>
<li><p>
<a href="https://beepb00p.xyz/scrapyroo.html">beepb00p.xyz/scrapyroo.html</a>: speaker notes!
</p>
<div class="NOTES">
<p>
The presentation will be available as plain text (as well as my notes), so hopefully you won't miss anything.
</p>
</div></li>
</ul>
<p>
Tantivy: 
</p>
<ul class="org-ul">
<li><a href="https://github.com/tantivy-search">github.com/tantivy-search</a></li>
<li><a href="https://gitter.im/tantivy-search/tantivy">gitter.im/tantivy-search/tantivy</a></li>
<li><a href="https://docs.rs/tantivy">docs.rs/tantivy</a></li>
</ul>
<p>
Me:
</p>
<ul class="org-ul">
<li>💻 <a href="https://github.com/karlicoss">github.com/karlicoss</a></li>
<li>🐦 <a href="https://twitter.com/karlicoss">twitter.com/karlicoss</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org000001b">
<h2 id="org000001b"><a class="headerlink" href="#org000001b">¶</a><span class="section-number-2">14</span> Appendix: Tantivy details</h2>
<div class="outline-text-2" id="text-14">
</div>
<div class="outline-3" id="outline-container-org0000019">
<h3 id="org0000019"><a class="headerlink" href="#org0000019">¶</a><span class="section-number-3">14.1</span> how are scores calculated?</h3>
<div class="outline-text-3" id="text-14-1">
<p>
See <a href="https://docs.rs/tantivy/0.10.3/tantivy/query/struct.Explanation.html"><code class="inline">Explanation</code></a>. Basically builds a computation tree for a given match.
</p>
<p>
Demonstrate <a href="https://docs.rs/tantivy/0.10.3/tantivy/query/trait.Query.html#method.explain"><code class="inline">explain</code></a> in logs?
</p>
<p>
'pretty' json is a little rough at the moment.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001a">
<h3 id="org000001a"><a class="headerlink" href="#org000001a">¶</a><span class="section-number-3">14.2</span> how are snippets selected?</h3>
<div class="outline-text-3" id="text-14-2">
<p>
Somewhat heuristic, see <a href="https://github.com/tantivy-search/tantivy/blob/42756c7474317c2b1aa0610278b54c0bb0c70fb9/src/snippet/mod.rs#L144"><code class="inline">search_fragment</code></a>
</p>
<blockquote>
<p>
The returned list is non-empty and contain less than 12 possibly overlapping fragments.
</p>
<p>
It is ok to emit non-overlapping fragments, for instance, one short and one long containing the same keyword, in order
to leave optimization opportunity to the fragment selector upstream.
</p>
</blockquote>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000001f">
<h2 id="org000001f"><a class="headerlink" href="#org000001f">¶</a><span class="section-number-2">15</span> Appendix: random Rust things</h2>
<div class="outline-text-2" id="text-15">
</div>
<div class="outline-3" id="outline-container-org000001c">
<h3 id="org000001c"><a class="headerlink" href="#org000001c">¶</a><span class="section-number-3">15.1</span> Unicode handling</h3>
<div class="outline-text-3" id="text-15-1">
<p>
didn't have time to figure it out, so I just stripped all non-ascii
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001d">
<h3 id="org000001d"><a class="headerlink" href="#org000001d">¶</a><span class="section-number-3">15.2</span> <a href="https://github.com/serde-rs/serde">serde</a> and <code class="inline">#[derive(Serialize)]</code></h3>
<div class="outline-text-3" id="text-15-2">
<p>
ran into <a href="https://serde.rs/remote-derive.html">orphan rule</a>
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001e">
<h3 id="org000001e"><a class="headerlink" href="#org000001e">¶</a><span class="section-number-3">15.3</span> binary size:</h3>
<div class="outline-text-3" id="text-15-3">
<pre class="example">
/coding/tantivy-cli/target $ du -hd1
2.2G	./x86_64-unknown-linux-musl
2.2G	./debug
1.5G	./release
5.8G	.
</pre>
<p>
Not very cloud sync-friendly! However happily accepts symlink as <code class="inline">target</code> directory, so not too bad.
</p>
</div>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#infra">#infra</a> <a class="post-tag" href="./tags.html#scraping">#scraping</a> <a class="post-tag" href="./tags.html#rust">#rust</a></div>
        <!-- TODO post-date? -->
        <div class="date">19 November 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_scrapyroo"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Tue, 19 Nov 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/scrapyroo.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Building personal search infrastructure for your knowledge and code</title>
    <link>https://beepb00p.xyz/pkm-search.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm search emacs orgmode">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Building personal search infrastructure for your knowledge and code | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/pkm-search.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/pkm-search.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Building personal search infrastructure for your knowledge and code | beepb00p" />
        <meta property="og:description" content="Overview of search tools for desktop and mobile; using Emacs and Ripgrep as desktop search engine" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Building personal search infrastructure for your knowledge and code</h1>
    <div class="summary">Overview of search tools for desktop and mobile; using Emacs and Ripgrep as desktop search engine</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#why">1. Why search?</a></li>
<li><a href="#what">2. What do I search?</a></li>
<li><a href="#personal_information">3. Searching in personal information</a>
<ul>
<li><a href="#org_mode">Org mode notes</a></li>
<li><a href="#other">Other plaintext, chats and social media</a></li>
</ul>
</li>
<li><a href="#recoll">4. Recoll</a></li>
<li><a href="#android">5. Searching on Android</a>
<ul>
<li><a href="#org0000006">Orgzly</a></li>
<li><a href="#org0000007">Docsearch +</a></li>
<li><a href="#recoll_web">Recoll Web</a></li>
</ul>
</li>
<li><a href="#web">6. Web search</a>
<ul>
<li><a href="#org000000a">Firefox enhancements</a></li>
<li><a href="#org000000b">Chrome enhancements</a></li>
</ul>
</li>
<li><a href="#code">7. Searching in code</a>
<ul>
<li><a href="#org000000d">Why?</a></li>
<li><a href="#org000000e">What do I want</a></li>
<li><a href="#org000000f">Existing code search tools</a></li>
<li><a href="#org0000010">Solution: use Emacs and Ripgrep</a></li>
</ul>
</li>
<li><a href="#appendix_cloudmacs">8. Appendix: searching away from computer</a></li>
<li><a href="#appendix_daemon">9. Appendix: Lightning fast Emacs</a>
<ul>
<li><a href="#org0000013">running daemon on startup</a></li>
</ul>
</li>
<li><a href="#appendix_emacs">10. Appending: general Emacs tips</a></li>
<li><a href="#future">11. Future and my holy grail of search</a></li>
<li><a href="#org0000017">12. --</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="why"><a class="headerlink" href="#why">¶</a><span class="section-number-2">1</span> Why search?</h2>
<div class="outline-text-2" id="text-why">
<div><span class="before-aside">
Having information in the digital form, collecting and writing notes is incredibly valuable.
Our brains are good at associations, pattern matching and creative thinking, not storing arrays of structured data, and external memory is one of the main thinking hacks computers aid us with. 
</span><aside class="sidenote">see <a class="post-tag" href="./tags.html#extendedmind">#extendedmind</a></aside></div>
<p>
However this information is not so useful if you can't access and search it quickly.
Instant search changes the way you think. Ever got sense of flow while working through some problem, and trying different things from Stackoverflow or documentation?
</p>
<p>
These days, if you have decent connection, you are seconds away from finding almost any public knowledge in the internet.
However, there is another aspect of information: personal and specific to <i>your</i> needs, work and hobbies.
It's <i>your</i> todo list, <i>your</i> private notes, books <i>you</i> are reading. Of course, it's not that well integrated with the outside world, hence the tooling and experience of interacting with it is very different.
</p>
<p>
Some examples:
</p>
<ul class="org-ul">
<li><div><span class="before-aside">
To find something from <i>my</i> Messenger history with a friend, I need to be online, open Facebook, navigate to search and use the interface Facebook's employees thought convenient (spoiler: it sucks) 
</span><aside class="sidenote"><a class="post-tag" href="./tags.html#offline">#offline</a></aside></div>
<p>
It's <i>my</i> information, something that came out from my brain. Why can't I have it available anywhere, anytime, presented the way I prefer?
</p></li>
<li><p>
To find something in <i>my</i> Kobo ebook, I need to reach my device physically and type the query using the virtual keyboard (yep, e-ink lag!). Not a very pleasant experience.
</p>
<p>
It's something <i>I</i> own and have read. Why does it have to be so hard?
</p></li>
</ul>
<p>
Such things are pretty frustrating to me, so I've been working on making them easier. Search has to be <a href="https://en.wikipedia.org/wiki/Incremental_search">incremental</a>, fast and as convenient to use as possible.
I'll be sharing some of workflows, tricks and thoughts in this post.
</p>
<p>
The post is geared towards using Emacs and Org-mode, but hopefully you'll find some useful tricks for your current tools and workflow even if you don't.
There is (almost) nothing inherently special about Emacs, I'm sure you can achieve similar workflows in other modern text editors given they are flexible enough.
</p>
<p>
Note: throughout the post I will link to my <a href="https://github.com/karlicoss/dotfiles-emacs">emacs config</a> snippets. 
To prevent code references from staling, I use permalinks, but check master branch as well in case of patches or more comments in code.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="what"><a class="headerlink" href="#what">¶</a><span class="section-number-2">2</span> What do I search?</h2>
<div class="outline-text-2" id="text-what">
<p>
I'll write about searching in
</p>
<ul class="org-ul">
<li>my personal notes, tasks and knowledge repository (this blog included)</li>
<li>all digital trace I'm leaving (tweets, internet comments, annotations)</li>
<li>chat logs with people</li>
<li>books and papers I'm reading</li>
<li>code that I'm working on</li>
<li>information on the Internet (duh!)</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="personal_information"><a class="headerlink" href="#personal_information">¶</a><span class="section-number-2">3</span> Searching in personal information</h2>
<div class="outline-text-2" id="text-personal_information">
<p>
By personal information I refer to things like todo list, personal wiki or whatever you use to store information relevant to your life.
</p>
</div>
<div class="outline-3" id="outline-container-org0000002">
<h3 id="org_mode"><a class="headerlink" href="#org_mode">¶</a>Org mode notes</h3>
<div class="outline-text-3" id="text-org_mode">
<p>
For the most part, I keep things in Org mode, and I use Emacs to work with it. Apart from regular means of plaintext search (I'll write about it <a class="link-down" href="#other">later</a>), for me it's important to search over tags:
</p>
<ul class="org-ul">
<li><a href="https://orgmode.org/manual/Matching-tags-and-properties.html"><code class="inline">org-tags-view</code></a> is available by default and an easy way to run simple tag searches</li>
<li><p>
<a href="https://github.com/alphapapa/org-ql#screenshots">org-ql</a>
</p>
<p>
It's a relatively new package, with new query syntax as the main feature, which is much easier to use and remember than builtin Org query syntax: <a href="https://github.com/alphapapa/org-ql#comparison-with-org-agenda-searches">comparison</a>.
</p>
<p>
I mainly use these commands:
</p>
<ul class="org-ul">
<li><a href="https://github.com/alphapapa/org-ql#helm-org-ql"><code class="inline">helm-org-ql</code></a> for <b>incremental</b> search in the current buffer</li>
<li><a href="https://github.com/alphapapa/org-ql#org-ql-search"><code class="inline">org-ql-search</code></a> <b>interactively</b> prompts you for the search target, sort and grouping</li>
</ul></li>
</ul>
<p>
Another notable mention is <a href="https://github.com/alphapapa/org-rifle#screenshots">org-rifle</a>, which is an entry based search, presenting headings along with the matched content in Helm buffer.
However as the author <a href="https://github.com/alphapapa/org-rifle/issues/42#issuecomment-544114082">mentioned</a> it might be obsoleted by org-ql soon. 
</p>
<p>
Here are some typical workflows with my org-mode:
</p>
<ul class="org-ul">
<li><p>
<a id="friends_tags"></a> tags for friends
</p>
<p>
I see an interesting article or think of something which would be good to share with a friend, but at the moment it's not quite a good time to send it.  I can just capture it and attach a tag (e.g. <samp class="inline">ann</samp> or <samp class="inline">jeremy</samp>). That way next time we chat I can just look up things under their tag and send them.
</p>
<p>
It works the other way around as well: imagine they sent me a link or asked me to do something, but I can't do it immediately. I have a special script that converts chat messages into todo items and automatically attaches the corresponding tag. I write more about it <a href="orger-todos.html#telegram2org">here</a>.
</p></li>
<li><p>
assembling blog posts
</p>
<p>
Unfortunately, I can't just sit and write comprehensible texts without preparation.
Typically I have thoughts on the topic now and then, which I just note down and mark with the tag.
When I feel it's time to prepare the post, I can just search by the tag (e.g. <code class="inline">tags:search</code> for this post), and refile the items into the file with the post draft.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000003">
<h3 id="other"><a class="headerlink" href="#other">¶</a>Other plaintext, chats and social media</h3>
<div class="outline-text-3" id="text-other">
<p>
As I mentioned, I find having to switch to the browser, wait till the website loads and cope with crappy search implementations very distracting and frustrating.
</p>
<p>
What is more, often you don't even remember whether exactly you were discussing something: on Telegram or Facebook or Reddit? So having a single point of entry to your information and unified search over all of your stuff is extremely helpful.
</p>
<p>
For instant messaging, I'm using plaintext mirrors, so chat history is always available in plaintext on my computers:
</p>
<ul class="org-ul">
<li><a href="https://github.com/karlicoss/telegram-backup-to-txt">Telegram messages</a>
Didn't bother with org-mode because files would be too huge and there isn't much structure anyway.</li>
<li><a href="https://github.com/Totktonada/vk_messages_backup">Vkontakte messages</a>
Sadly export tool stopped working because of API restrictions, but I'm not using VK much anymore either. At least I got historic messages.</li>
</ul>
<p>
Most services where I can comment, write or leave annotation, I'm mirroring as org-mode.
I write about it in detail here: <a href="orger.html">part I</a>, <a href="orger-todos.html">part II</a>.
</p>
<p>
That gives me source data for a search engine over anything I've ever:
</p>
<ul class="org-ul">
<li>tweeted</li>
<li>bookmarked on Pinboard</li>
<li>highlighted in Instapaper or Kobo</li>
<li>saved or upvoted on Reddit</li>
<li>etc., etc.</li>
</ul>
<p>
All these files are either non-Org or somewhat heavy for structured Org-mode search. In addition, I have many old files from my pre-orgmode era when I was using Gitit or Zim.
</p>
<p>
To search over them, I'm using Emacs and Ripgrep (you can read why <a class="link-down" href="#ripgrep">later</a>):
</p>
<p>
<a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L130-L134"><code class="inline">my/search</code></a>
runs ripgrep against <code class="inline">my/search-targets</code> variable contains paths to notes, chat logs, Orger outputs etc.
</p>
<p>
The interesting bit about <code class="inline">my/search</code> is <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L87-L127"><code class="inline">--my/one-off-helm-follow-mode</code></a> call. It's a somewhat horrible hack that  automatically enables helm-follow mode so you don't have to press <code class="inline">C-c C-f</code> every time you invoke helm.
</p>
<p>
Finally, to make sure I can invoke search in an instance, I'm using a <a class="link-down" href="#snippet_other">global keybinding</a>.
</p>
<p>
Here's a <b>demo</b> <a href="https://file.globalupload.io/wu7HYYyJaY.gif">gif (5Mb)</a> of using this to search 'greg egan' in my knowledge repository.
You can see that as a result, I'm getting my Kobo highlights (<samp class="inline">kobo.org</samp>), my reading list (<samp class="inline">read.org</samp>) and even some video (<samp class="inline">youtube.org</samp>)!
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000005">
<h2 id="recoll"><a class="headerlink" href="#recoll">¶</a><span class="section-number-2">4</span> Recoll</h2>
<div class="outline-text-2" id="text-recoll">
<p>
Recoll is an indexer that runs as daemon (or a regular cron job) and a full text search tool.
</p>
<p>
It supports many <a href="https://www.lesbonscomptes.com/recoll/features.html">formats and other features</a>, so I suggest checking them out for yourself.
</p>
<p>
Even though I index all my documents, I find it quicker to run grep I described above to search in plaintext. 
So for me, Recoll is mostly for searching and quickly jumping to results in <b>PDFs and EPUBs</b> (see <a href="https://www.lesbonscomptes.com/recoll/pics/recoll-pdf-snippets.html">screenshot</a>).
</p>
<p>
There is <a href="https://github.com/emacs-helm/helm-recoll">helm-recoll</a> Emacs module, but I found it a bit awkward to use, and Recoll GUI feels significantly superior.
Basically only thing helm-recoll does is presenting you list of filenames that match your query.
It feels that it should be straightforward to modify the module and integrate abstract, snippets and other things you can query Recoll for.
</p>
<p>
Considering I don't need use Recoll it too often, I just gave up on helm-recoll and using GUI.
</p>
<p>
I'm also running a <a href="https://github.com/koniu/recoll-webui">Web UI</a> on my VPS, so I can use it from my phone, or potentially from other computers.
</p>
<p>
Recoll's distinguishing features are proper <a href="https://www.lesbonscomptes.com/recoll/usermanual/webhelp/docs/RCL.SEARCH.LANG.html">search query language</a>
and <a href="https://www.lesbonscomptes.com/recoll/usermanual/webhelp/docs/RCL.INDEXING.MONITOR.html">realtime, inotify based indexing</a>.
I don't have that much data yet to benefit massively from proper search queries, but I can see that it could be potentially useful in future as amount of personal data grows.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000009">
<h2 id="android"><a class="headerlink" href="#android">¶</a><span class="section-number-2">5</span> Searching on Android</h2>
<div class="outline-text-2" id="text-android">
<p>
Most of my notes and knowledge repository are plaintext, so it is easily and continuously shared on my phone via Dropbox/Syncthing.
</p>
<p>
Since using Emacs on Android is hardly a meaningful experience, I'm working around it by using other apps.
</p>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="org0000006"><a class="headerlink" href="#org0000006">¶</a><a href="https://github.com/orgzly/orgzly-android">Orgzly</a></h3>
<div class="outline-text-3" id="text-org0000006">
<p>
I can't recommend it enough, it's got many things done right, very fast and the code is extremely readable and well tested so it's easy to contribute.
</p>
<p>
It has its own small <a href="http://www.orgzly.com/help#search">query language</a> (at the time <a href="https://github.com/alphapapa/org-ql">org-ql</a> didn't exist).
</p>
<p>
You can save <a href="https://lh3.googleusercontent.com/FweBE2T3T3wZwJC64DQgtGj8vv8jKPBGTClnRAApSOHdKq4hiFdpq_JjEBPsMj_nTDA=w2560-h1295">search queries</a>, which ends up being pretty similar to custom Org-mode <b><b>agendas</b></b>.
Searches can be displayed as persistent widgets, e.g. I find convenient to have a phone screen dedicated to 'Buy' search (<code class="inline">t.buy</code> query) or 'Do at work' search (<code class="inline">t.@work</code> query).
</p>
<p>
As I described <a class="link-up" href="#friends_tags">above</a>, I keep few saved search queries for some friends so I can recall what I wanted to discuss with them.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="org0000007"><a class="headerlink" href="#org0000007">¶</a><a href="https://play.google.com/store/apps/details?id=com.docsearch.pro">Docsearch +</a></h3>
<div class="outline-text-3" id="text-org0000007">
<p>
Docsearch is a not very well-known tool (e.g. zero search results on Reddit or Twitter), but I don't know any alternatives for it.
</p>
<p>
It's a fulltext indexing and search app for plaintext files, but apparently it even supports EPUBs and PDFs.
<a href="https://lh3.googleusercontent.com/psPhmFoawEzwZQpwBGgVz42ojnR-uAi70Li4DBc4Z13wLOTannvT2suaxZQA9YX_Bg=w2560-h1295">Here's</a> how matches list looks. Screenshots on Google Play give a pretty good idea what the app does.
</p>
<p>
I find it convenient for quick search over things that are not imported in Orgzly, e.g. <samp class="inline">.txt</samp> chat logs (Telegram, VK) and huge org-mode files
I described <a class="link-up" href="#other">above</a>.
</p>
<p>
It's a bit backwards in terms of UI (even though I like that it's compact and functional), but main downside is it's not opensource.
I'd be extremely happy to replace this with some open source application, so please let me know if you know one!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="recoll_web"><a class="headerlink" href="#recoll_web">¶</a>Recoll Web</h3>
<div class="outline-text-3" id="text-recoll_web">
<p>
On the rare occasions when I need to search in pdfs or books (which I don't sync on my phone) , I just use Recoll <a href="https://github.com/koniu/recoll-webui">Web UI</a> that I'm selfhosting.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="web"><a class="headerlink" href="#web">¶</a><span class="section-number-2">6</span> Web search</h2>
<div class="outline-text-2" id="text-web">
<p>
If you're reading this at all, chances you're quite good at using web search already. <a href="https://www.gwern.net/Search#search">Gwern</a> got a good writeup on the subject.
</p>
<p>
Knowing how to compose a search query is one thing, but navigating to the service, waiting till it loads, moving to searchbox takes precious time. Many people forget about <a href="https://www.howtogeek.com/114176/how-to-easily-create-search-plugins-add-any-search-engine-to-your-browser">custom search engines</a>. Here are ones I'm using:
</p>
<table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups">
<colgroup>
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">g</td>
<td class="org-left">Google</td>
<td class="org-left"><samp class="inline">https://www.google.com/complete/search?client=firefox&amp;q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">d</td>
<td class="org-left">DuckDuckGo</td>
<td class="org-left"><samp class="inline">https://duckduckgo.com/?q={searchTerms}&amp;t=canonical</samp></td>
</tr>
<tr>
<td class="org-left">r</td>
<td class="org-left">Reddit</td>
<td class="org-left"><samp class="inline">https://www.reddit.com/search?q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">gh</td>
<td class="org-left">GitHub</td>
<td class="org-left"><samp class="inline">https://github.com/search?q={searchTerms}&amp;ref=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">pin</td>
<td class="org-left">Pinboard: search all</td>
<td class="org-left"><samp class="inline">https://pinboard.in/search/?query={searchTerms}r&amp;all=Search+All</samp></td>
</tr>
<tr>
<td class="org-left">tw</td>
<td class="org-left">Twitter</td>
<td class="org-left"><samp class="inline">https://twitter.com/search</samp></td>
</tr>
<tr>
<td class="org-left">y</td>
<td class="org-left">YouTube</td>
<td class="org-left"><samp class="inline">https://www.youtube.com/results?search_query={searchTerms}&amp;page={startPage?}&amp;utm_source=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">m</td>
<td class="org-left">Google Maps</td>
<td class="org-left"><samp class="inline">https://www.google.com/maps/search/{searchTerms}?hl=en&amp;source=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">w</td>
<td class="org-left">Wikipedia (en)</td>
<td class="org-left"><samp class="inline">https://en.wikipedia.org/wiki/Special:Search</samp></td>
</tr>
<tr>
<td class="org-left">cpp</td>
<td class="org-left">Cppreference</td>
<td class="org-left"><samp class="inline">https://en.cppreference.com/mwiki/index.php?search={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">js</td>
<td class="org-left">MDN</td>
<td class="org-left"><samp class="inline">https://developer.mozilla.org/en-US/search?q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">eb</td>
<td class="org-left">Ebay</td>
<td class="org-left"><samp class="inline">https://www.ebay.co.uk/sch/i.html?_nkw={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">am</td>
<td class="org-left">Amazon.co.uk</td>
<td class="org-left"><samp class="inline">https://www.amazon.co.uk/exec/obidos/external-search/</samp></td>
</tr>
<tr>
<td class="org-left">tru</td>
<td class="org-left">Translate en-ru</td>
<td class="org-left"><samp class="inline">https://translate.google.com/#view=home&amp;op=translate&amp;sl=en&amp;tl=ru&amp;text={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">tde</td>
<td class="org-left">Translate en-de</td>
<td class="org-left"><samp class="inline">https://translate.google.com/#view=home&amp;op=translate&amp;sl=en&amp;tl=de&amp;text={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">dd</td>
<td class="org-left">DevDocs</td>
<td class="org-left"><samp class="inline">https://devdocs.io/#q={searchTerms}</samp></td>
</tr>
</tbody>
</table>
<p>
Some of these obvious, some deserve separate mention:
</p>
<ul class="org-ul">
<li><p>
reddit contains vast amounts of (somewhat curated) human knowledge
</p>
<p>
Google search often gives dubious and not very meaningful results on certain topics (e.g. product reviews, exercise, dieting).
On reddit, you'd at least find real people sharing their <b>honest and real opinions</b>.
Chances are that if a link is good, you would find it on  on reddit anyway.
</p></li>
<li><p>
twitter is similar: there is certainly more spam there, but sometimes it's interesting to type a link or blog post title in twitter search to see how <b>real people reacted</b>. 
</p>
<p>
That has limited utility, e.g. doesn't work with politicized content, but if the topic of interest is rare, could be very useful.
</p></li>
<li><a href="https://pinboard.in">pinboard</a> is an awesome source of curated content as well</li>
</ul>
<p>
Next, I find it very convenient to have some code documentation available locally.
First, it helps when you're on wonky internet or just offline for whatever reason.
Second, it's feels <b>really fast</b>, even if you're on fiber.
</p>
<p>
Here's what I'm using for that:
</p>
<table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups">
<colgroup>
<col class="org-left" />
<col class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">py</td>
<td class="org-left"><samp class="inline">file:///usr/share/doc/python3/html/search.html?q=%s</samp></td>
</tr>
<tr>
<td class="org-left">rust</td>
<td class="org-left"><samp class="inline">file:///home/karlicos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/std/option/index.html?search=%s</samp></td>
</tr>
</tbody>
</table>
<p>
Sadly, the extension mentioned above doesn't work with <samp class="inline">file://</samp> schema for some reason, so to add it in Firefox,
you can use the method described <a href="https://superuser.com/a/7336/300795">here</a>, it's as easy as adding a bookmark.
</p>
<p>
Recently I ran into <a href="https://devdocs.io/offline">devdocs.io</a>, it's using your browser's <b>offline</b> storage to cache the documentation.
I'm still getting used to it, but it's amazing how faster it is than jumping to documentation online. You can use it with multiple languages, you just type the search engine prefix first, and then language prefix (e.g. <code class="inline">dd cpp emplace_back</code>).
</p>
<p>
Finally, it may be convenient to set up <a href="https://github.com/hrs/engine-mode">engine-mode</a> in Emacs, or <a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bweb-services/search-engine">search-engine layer</a> in Spacemacs. It lets you invoke a browser search directly from Emacs (e.g. <code class="inline">SPC s G</code> to do google search). I find it convenient when I need to search many things in bulk.
</p>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="org000000a"><a class="headerlink" href="#org000000a">¶</a>Firefox enhancements</h3>
<div class="outline-text-3" id="text-org000000a">
<p>
I find it convenient to enable <a href="https://www.ghacks.net/2016/06/11/firefox-page-search-improvements">'highlight all'</a> for search within a page.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="org000000b"><a class="headerlink" href="#org000000b">¶</a>Chrome enhancements</h3>
<div class="outline-text-3" id="text-org000000b">
<p>
When I used Chrome, one thing that annoyed me was that it populates search engines automatically, and <a href="https://support.google.com/chrome/forum/AAAAP1KN0B0DOS1J_u6N8I">there is not way to disable it</a>.
</p>
<p>
There is a nice open source <a href="https://chrome.google.com/webstore/detail/dont-add-custom-search-en/dnodlcololidkjgbpeoleabmkocdhacc">extension</a> that prevents Chrome from doing it.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000011">
<h2 id="code"><a class="headerlink" href="#code">¶</a><span class="section-number-2">7</span> Searching in code</h2>
<div class="outline-text-2" id="text-code">
<p>
TLDR: I tried different existing code search tools, was disappointed and ended up using Emacs + Ripgrep.  
</p>
</div>
<div class="outline-3" id="outline-container-org000000d">
<h3 id="org000000d"><a class="headerlink" href="#org000000d">¶</a>Why?</h3>
<div class="outline-text-3" id="text-org000000d">
<p>
I've got lots of personal projects, experiments, data processing and backup scripts on my computer.
I also tend to create a git repository at a slightest opportunity primarily as a means of code backup/rollback and progress tracking, but often it results in actual projects, so I would need a repository anyway.
Naturally, these repositories end up scattered across the whole filesystem, making it tricky to remember where I've put the code or that it even existed in the first place.
</p>
<p>
It's very convenient to have some sort of code search engine if you're in a similar situation to mine for multiple reasons:
</p>
<ul class="org-ul">
<li><p>
Doing potentially breaking code changes
</p>
<p>
For instance, I want to remove some unused function or refactor something in <a href="https://github.com/karlicoss/my"><code class="inline">my</code></a> package, which is a Python library to access my personal data.
It's used in lots of scripts or dashboards that run in Cron every day.
</p>
<p>
I could just go for it, remove the function and hope nothing fails, but if it does then I'd have to deal with fixing it again.
It's frustrating and I'd rather search for function usages in all of my code and make sure it's actually safe to remove.
</p></li>
<li><p>
Reusing code snippets and tricks
</p>
<p>
When you're getting familiar to some new library or framework, you often end up googling how to solve problems twice.
Sometimes you remember solving the problem you've already had, but don't quite recall where. 
</p>
<p>
For instance for me, such library is <a href="https://docs.sqlalchemy.org/en/13/core">Sqlalchemy</a>.
It's very convenient for handling databases, but I only need it infrequently, so can never remember how to work with it.
Reading documentation all over again is not very helpful because I've got very few usecases and queries that are specific to my purposes.
</p>
<p>
If I can search for <code class="inline">sqlalchemy</code> in my code, it shows every repository where I used it so I can quickly copy bit of code I'm interested at.
</p></li>
<li><p>
Forgotten code
</p>
<p>
It happens that I remember writing code for some purpose, but don't quite recall where I put it.
Even if you keep all your repos in the same location, you might forget how you named it.
</p>
<p>
Full text search, however, allows to find it if you remember some comments or class/function names.
</p></li>
<li><p>
Help and documentation
</p>
<p>
However good is library's documentation, sometimes it just isn't covering your typical needs. If you're a power user, docs are almost never enough and you end up reading the code to bend the library into doing what you want.
</p>
<p>
For me such libraries are <a href="https://code.orgmode.org/bzg/org-mode">Org mode</a> or <a href="https://github.com/jaspervdj/hakyll">Hakyll</a>, so I often had to search in their code on Github.
Searching on Github however is quite awkward. It's slow, it's not incremental and lacks navigation.
</p>
<p>
If I have a local clone of the repository on my disk, I can search over it in an instant (without having it opened in the first place) and use familiar tools (e.g. IDE) for navigation.
</p></li>
</ul>
<p>
At the time, I was just using recursive <code class="inline">grep</code> and then opening some of results in vim to refine.
That's a pretty pathetic workflow. 
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000e">
<h3 id="org000000e"><a class="headerlink" href="#org000000e">¶</a>What do I want</h3>
<div class="outline-text-3" id="text-org000000e">
<p>
My ideal code search tool would:
</p>
<ul class="org-ul">
<li><p>
run against code on my filesystem
</p>
<p>
Just any source files, so it wouldn't have to fetch repositories from Github and keep them somewhere separately.
</p></li>
<li><p>
realtime indexing 
</p>
<p>
Ideally, inotify-based, but any means of refreshing search index without having to commit first would be nice.
</p></li>
<li>semantic search in definitions/variables etc with fallback to simple search if the language isn't supported</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000f">
<h3 id="org000000f"><a class="headerlink" href="#org000000f">¶</a>Existing code search tools</h3>
<div class="outline-text-3" id="text-org000000f">
<p>
So, I wanted some code search and indexing tool that could watch over all the source file on my filesystem and let me search through them.
</p>
<p>
It sounds as a fairly straightforward wish, but to my surprise, none of existing projects I found and tried do the job:
</p>
<ul class="org-ul">
<li><p>
<a href="https://github.com/sourcegraph/sourcegraph">Sourcegraph</a>
</p>
<p>
Lets you index Github/Bitbucket/Gitlab repos etc, but the process for adding local repositories <a href="https://docs.sourcegraph.com/admin/repo/add_from_local_disk">is extremely tedious</a>.
Also apparently, it clones repositories first so it's not exactly realtime indexing.
</p>
<p>
Overall, I feel that it only makes sense for companies that use few monorepos.
</p></li>
<li><a href="https://oracle.github.io/opengrok">OpenGrok</a>: <a href="https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok">setup</a> looks extremely heavy, doesn't support realtime search in arbitrary paths</li>
<li><a href="https://github.com/hound-search/hound">Hound</a>: <a href="https://github.com/hound-search/hound/issues/83">doesn't support</a> recursive repository discovery.</li>
<li><a href="https://github.com/google/zoekt">zoekt</a>: manual is pretty confusing and also looks tailored for huge standalone repos</li>
<li><a href="https://livegrep.com">Livegrep</a>: tailored to huge monorepos (see <a href="https://news.ycombinator.com/item?id=3869880">HN discussion</a>)</li>
</ul>
<p>
As you can see, none of these are convenient for searching in personal code.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000010">
<h3 id="org0000010"><a class="headerlink" href="#org0000010">¶</a>Solution: use Emacs and Ripgrep</h3>
<div class="outline-text-3" id="text-org0000010">
<p>
Disappointed, I figured that least I could do is at somehow improve my workflow with grep.
</p>
<p>
So, what are the problems with using <code class="inline">grep</code>?
</p>
<ul class="org-ul">
<li>running it against all of code results in false positives. <samp class="inline">node_modules</samp>, minified javascript, etc., you name it
<ul class="org-ul">
<li>you probably want to at least ignore anything that's ignored by <code class="inline">.gitignore</code></li>
</ul></li>
<li>getting bunch of output lines in terminal is not interactive
<ul class="org-ul">
<li>you have to repeat the command to refine the results</li>
<li>you can't quickly navigate to the result, check it and go back</li>
</ul></li>
<li>running it recursively against your filesystem root is ridiculously slow, even if you use an SSD
<ul class="org-ul">
<li>you probably want to restrict your search to directories that look like a project (e.g. repositories), and again, exclude files ignored by version control</li>
</ul></li>
</ul>
<p>
<a id="ripgrep"></a>
As it turns out, <code class="inline">ripgrep</code> is the tool!
</p>
<ul class="org-ul">
<li>respects <code class="inline">.gitignore</code> files, so by maintaining <code class="inline">.gitignore</code> properly (e.g. adding <samp class="inline">node_modules/venv</samp> etc) you can make sure you only get <b>meaningful matches</b> when searching for code.</li>
<li>respects <code class="inline">.ignore</code> files. Sometimes code has to be under version control, but you don't want it to show up in search (e.g. could happen if you have vendorized code or minified javascript or static html files).
In that case you can use <code class="inline">.ignore</code> files with the same syntax to exclude certain patterns from ripgrep's reach without messing with <code class="inline">.gitignore</code>.</li>
<li>it's <b>very</b> fast, both by <a href="https://github.com/BurntSushi/ripgrep#quick-examples-comparing-tools">benchmarks</a> and subjective experiments. You can read more comprehensive benchmarks <a href="https://blog.burntsushi.net/ripgrep/#code-search-benchmarks">here</a>.</li>
</ul>
<p>
If you just use ripgrep instead of grep, code search becomes magnitude more pleasant, but it's still not interactive. Long story short, we can use <code class="inline">helm</code> in Emacs to achieve <b>interactivity</b> and incremental search.
</p>
<p>
The only thing that's left is restricting the search to git repositories only.
Ripgrep relies on regexes, so we can't do something like Xpath queries and tell it to only search in directories, that contain <code class="inline">.git</code> directory. I ended up using a two step approach:
</p>
<ul class="org-ul">
<li><p>
first, <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L75-L83"><code class="inline">my/code-targets</code></a> returns all git repositories it can reach from <code class="inline">my/git-repos-search-root</code>.
</p>
<p>
I'm using <a href="https://github.com/sharkdp/fd"><code class="inline">fd</code></a> to go through the disk and collect all candidate git repositories.
</p>
<p>
Even though fd is already ridiculously <a href="https://github.com/sharkdp/fd#benchmark">fast</a>, this step still takes some time, so I'm caching the repositories. Cache is refreshed in the background every five minutes so we don't have to crawl the filesystem every time. That saves me few seconds on every search.
</p></li>
</ul>
<ul class="org-ul">
<li>then, <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L136-L140"><code class="inline">my/search-code</code></a> keybindings invokes <code class="inline">ripgrep</code> against all my directories with code, defined in <code class="inline">my/code-targets</code> function.</li>
</ul>
<p>
So, literally running grep against my code turned out to be a pretty good solution. I've got about 350 repositories and it works in a blink. Note, however, that I'm using SSD.
</p>
<p>
Ripgrep searches in real files on my disk, so any changes are reflected <b>immediately</b>, which removes the need for indexing (apart from performance concerns if you've got too many files to search in).
It would still be nice to avoid unnecessary disk operations, and of course, semantic search would be great, and that is definitely going to require some sort of indexer.
</p>
<p>
I've got a <a class="link-down" href="#snippet_code">global keybinding</a> to invoke Emacs with a prompt to search in code, so I can do in in a blink.
</p>
<p>
Here's a <a href="https://file.globalupload.io/onCac7sh9M.gif">gif (3.5 Mb)</a> showing it <b>in action</b>: say, I am working on testing a browser extension, and need to interact with in via hotkeys. I remember using <code class="inline">pyautogui</code> for automating <a href="https://github.com/karlicoss/grasp">Grasp</a> tests, but I forgot which function I actually need to use. Searching for 'pyautogui' brings me all the repositories where I'm using it and lets me quickly find out the command I need without having to read the documentation all over again.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000012">
<h2 id="appendix_cloudmacs"><a class="headerlink" href="#appendix_cloudmacs">¶</a><span class="section-number-2">8</span> Appendix: searching away from computer</h2>
<div class="outline-text-2" id="text-appendix_cloudmacs">
<p>
I'm running Spacemacs on my VPS, so if I'm not near my computer and <a class="link-up" href="#android">phone search</a> doesn't help for some reason, I can still access and search my data. You can read about it <a href="cloudmacs.html">here</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000014">
<h2 id="appendix_daemon"><a class="headerlink" href="#appendix_daemon">¶</a><span class="section-number-2">9</span> Appendix: Lightning fast Emacs</h2>
<div class="outline-text-2" id="text-appendix_daemon">
<p>
As you might have noticed, I'm relying on Emacs as my primary means of interacting with my information, whether it's capturing, accessing or searching.
That means that I want it as fast as possible, in a matter of milliseconds. Seconds spent waiting to launch discourage break your concentration and workflow.
</p>
<p>
Most of the time I've got Emacs window open on one of my desktops anyway, but sometimes it isn't, or I don't want to pollute the current Emacs instance with my search. So I've got a handy helper <a href="https://github.com/karlicoss/dotfiles-emacs/blob/master/bin/gemacsclient">script</a> to quickly invoke persistent Emacs frame for me:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Wrapper script to invoke interactive emacs commands in a daemon instance.</span>

<span class="org-comment-delimiter"># </span><span class="org-comment">These days many people don't suspect it,</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">but Emacs got server ('emacs' binary) and client ('emacsclient') parts.</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Launching server (i.e. default 'emacs' command) evaluates the config</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">and could potentially take seconds if it's very heavy</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Launching the client however is lightning fast. It's just a matter of creating a window.</span>


<span class="org-variable-name">ARGS</span>=(
 <span class="org-comment-delimiter"># </span><span class="org-comment">This trick gives you best of two worlds: if there is an Emacs daemon running,</span>
 <span class="org-comment-delimiter"># </span><span class="org-comment">it just connects to it. Otherwise, it spawns a daemon first and then connects to it.</span>
 <span class="org-comment-delimiter"># </span><span class="org-comment">Without this setting if you didn't have a daemon running, the command would fail.</span>
 -a <span class="org-string">''</span>

 <span class="org-comment-delimiter"># </span><span class="org-comment">spawn new GUI window, otherwise it tries to launch client in terminal</span>
 --create-frame 
 --frame-parameters=<span class="org-string">"'(fullscreen . maximized)"</span>

 <span class="org-comment-delimiter"># </span><span class="org-comment">process rest of arguments as elisp code</span>
 --eval
  <span class="org-comment-delimiter"># </span><span class="org-comment">bring focus to the window</span>
 <span class="org-string">'(select-frame-set-input-focus (selected-frame))'</span>
)

<span class="org-comment-delimiter"># </span><span class="org-comment">without any extra args it just invokes the daemon instance, otherwise executes the args</span>
<span class="org-keyword">exec</span> emacsclient <span class="org-string">"${ARGS[@]}"</span> <span class="org-sh-escaped-newline">\</span>
                 <span class="org-string">"$@"</span>          <span class="org-comment-delimiter"># </span><span class="org-comment">pass through whatever else you are trying to run</span>
</pre>
</div>
<p>
I've got a global keybinding (<code class="inline">Win+m</code>) that invokes this script. In addition the script accepts a function to call so you can open Emacs with a search prompt, so I have few more handy keybindings:
</p>
<ul class="org-ul">
<li><a id="snippet_other"></a> <code class="inline">Win+F1</code> for searching in my <a class="link-up" href="#other">notes and knowledge repository</a></li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/search)"</span>
</pre>
</div>
<ul class="org-ul">
<li><a id="snippet_code"></a> <code class="inline">Win+F3</code> for searching in my repositories</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/search-code)"</span>
</pre>
</div>
<ul class="org-ul">
<li><code class="inline">Win+a</code> to open my org-mode agenda</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/switch-to-agenda)"</span>
</pre>
</div>
<ul class="org-ul">
<li><code class="inline">Win+c</code> to open org-capture</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'org-capture)"</span>
</pre>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="org0000013"><a class="headerlink" href="#org0000013">¶</a>running daemon on startup</h3>
<div class="outline-text-3" id="text-org0000013">
<p>
It might be convenient to always have the daemon running, for that I'm using a systemd unit in <samp class="inline">~/.config/systemd/user/emacs-daemon.service</samp>.
</p>
<div class="org-src-container">
<pre class="src src-bash">[Unit]
<span class="org-variable-name">Description</span>=Emacs daemon

[Service]
<span class="org-variable-name">Type</span>=forking
<span class="org-comment-delimiter"># </span><span class="org-comment">running via bash -l makes it pick up .profile, which sets up PATH etc</span>
<span class="org-variable-name">ExecStart</span>=/bin/bash -l -c <span class="org-string">'/usr/bin/emacs --daemon'</span>
<span class="org-variable-name">ExecStop</span>=/usr/bin/emacsclient --eval <span class="org-string">"(kill-emacs)"</span>
<span class="org-variable-name">Environment</span>=<span class="org-variable-name">SSH_AUTH_SOCK</span>=%t/keyring/ssh
<span class="org-variable-name">Restart</span>=always

[Install]
<span class="org-variable-name">WantedBy</span>=default.target
</pre>
</div>
<p>
It's nothing unusual perhaps apart from using <code class="inline">bash -l</code> so Emacs picks up your <code class="inline">.profile</code> file. Without it, you almost certainly will encounter issues with missing binaries because they would not be in your <code class="inline">PATH</code>.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000015">
<h2 id="appendix_emacs"><a class="headerlink" href="#appendix_emacs">¶</a><span class="section-number-2">10</span> Appending: general Emacs tips</h2>
<div class="outline-text-2" id="text-appendix_emacs">
<p>
These tips might be pretty obvious, but they belong to this post, so here you go:
</p>
<ul class="org-ul">
<li>if you're on Spacemacs, use <a href="https://github.com/syl20bnr/spacemacs/tree/develop"><code class="inline">develop</code></a> branch. Master is pretty backwards.</li>
<li><p>
search with <code class="inline">ripgrep</code> instead of <code class="inline">grep</code> (not only in Emacs!). It's just <a class="link-up" href="#ripgrep">better</a>.
</p>
<p>
In Spacemacs, set up your <code class="inline">init.el</code>:
</p></li>
</ul>
<div class="org-src-container">
<pre class="src src-elisp">dotspacemacs-search-tools '(<span class="org-string">"rg"</span> <span class="org-string">"ag"</span> <span class="org-string">"pt"</span> <span class="org-string">"ack"</span> <span class="org-string">"grep"</span>)

dotspacemacs-additional-packages '(helm-rg)
</pre>
</div>
<ul class="org-ul">
<li><p>
use <a href="https://github.com/emacsorphanage/helm-swoop"><code class="inline">helm-swoop</code></a> for search within the buffer
</p>
<p>
It's easier to watch a <a href="https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif">demo GIF</a> than to explain.
Swoop opens a Helm window with search result summary and jumps between results in the original buffer as you navigate in helm (<code class="inline">C-j/C-k</code>).
</p>
<p>
I <b><b>highly</b></b> recommend it as a primary way of searching withing a buffer. Bind it it to some convenient combination and get used to it (e.g. mine is <code class="inline">SPC RET</code>).
</p>
<p>
There is also <code class="inline">helm-occur</code>, which has similar functionality, but it seems inferior to swoop.
</p></li>
<li><p>
use <code class="inline">helm-follow-mode</code> (<code class="inline">C-c C-f</code> in Helm buffer) to jump between search results in any Helm search
</p>
<p>
E.g. you can use it with <code class="inline">helm-org-in-buffer-headings</code> as a neat way to navigate within an Org file.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000016">
<h2 id="future"><a class="headerlink" href="#future">¶</a><span class="section-number-2">11</span> Future and my holy grail of search</h2>
<div class="outline-text-2" id="text-future">
<p>
My ultimate goal is to have my 'external' knowledge as highly integrated as possible, as if it was imprinted on my brain neurons. 
</p>
<p>
  Ideally I want to be able to do fulltext realtime search over anything that I ever had in my visual field.
Not even necessarily text, but audio and video as well.
</p>
<p>
That way one wouldn't have to distinguish between different services and mediums of information at all, be it digital or analogue.
</p>
<p>
Technically it's not impossible with the current technology:
</p>
<ul class="org-ul">
<li>I believe that state of OCR is pretty good considering existence of products like google instant translate</li>
<li>speech recognition still sucks in noisy environments, but generally works</li>
<li>object recognition and annotation is still at dawn (I think?), but we'll get there eventually</li>
<li>that would be a lot of data, but potentially lots of it can be filtered out (at least until storage gets really compact and cheap to justify keeping everything)</li>
<li>processing and indexing don't have to be realtime as you can still rely on biological memory and could work overnight on expensive (but not astronomically so?) hardware</li>
<li>plaintext indexes can potentially be stored on your phone and you could have some sort of backend to access visual component</li>
<li>to jump back to the content digital media (like e-books/web pages/information screens) could aid this by supplying QR code or something similar</li>
</ul>
<p>
However each of these is a pretty hard problem and hardly with high demand from people.   
</p>
<p>
Considering Google Glass hasn't made it, the technology is not exactly there, so we have to rely on kludges like the ones I described above.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000017">
<h2 id="org0000017"><a class="headerlink" href="#org0000017">¶</a><span class="section-number-2">12</span> --</h2>
<div class="outline-text-2" id="text-12">
<p>
My closing tips would be:
</p>
<ul class="org-ul">
<li><p>
start simple
</p>
<p>
It's better to have a crappy adhoc script or bash alias that runs <code class="inline">grep</code> over your <samp class="inline">~/notes</samp> directory than no means of searching at all.
</p></li>
<li><p>
keep your things as plaintext as possible
</p>
<p>
This is a somewhat sad advice to give in 2019, but the reality is it's still extremely tedious to work with anything else.
</p></li>
<li><p>
whichever tools you use, make sure they launch in an instant
</p>
<p>
Seconds wasted on waiting break your flow. Better spend time on setting it up once and never think about that later.
</p></li>
<li><p>
give Emacs a try
</p>
<p>
I feel almost sorry advocating Emacs for everything, but despite my disgust at Elisp and frequent frustration, 
it just happens to be superior in terms of bending it to do what you want it to.
</p></li>
</ul>
<p>
As always, I'm open to feedback and would love to hear what is or setup or help you if you're struggling with something!
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#search">#search</a> <a class="post-tag" href="./tags.html#emacs">#emacs</a> <a class="post-tag" href="./tags.html#orgmode">#orgmode</a></div>
        <!-- TODO post-date? -->
        <div class="date">01 November 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/emacs/comments/dq42vk/building_personal_search_engine_using_emacs_and">/r/emacs</a></li>
    
        <li><a href="https://lobste.rs/s/kzpegk/building_personal_search">lobsters</a></li>
    
        <li><a href="https://irreal.org/blog/?p=8422">irreal</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_pkm_search"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Fri, 01 Nov 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/pkm-search.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Python: better typed than you think</title>
    <link>https://beepb00p.xyz/mypy-error-handling.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="mypy python">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Python: better typed than you think | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/mypy-error-handling.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/mypy-error-handling.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Python: better typed than you think | beepb00p" />
        <meta property="og:description" content="mypy assisted error handling, exception mechanisms in other languages, fun with pattern matching and type variance" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Python: better typed than you think</h1>
    <div class="summary">mypy assisted error handling, exception mechanisms in other languages, fun with pattern matching and type variance</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#intro">1. Intro aka computers are hard</a></li>
<li><a href="#problem">2. The problem: parsing Kindle highlights</a></li>
<li><a href="#logging">3. A non-solution #1: logging</a></li>
<li><a href="#error_object">4. A non-solution #2: special error value</a></li>
<li><a href="#container">5. Almost solution #1: Result container</a>
<ul>
<li><a href="#iterator">By the way, what's up with <code class="inline">Iterator</code> everywhere?</a></li>
</ul>
</li>
<li><a href="#combinators">6. Almost solution #2: use error combinators</a></li>
<li><a href="#pair">7. Still-not-quite-a-solution #3: (Value, Error) pairs</a></li>
<li><a href="#kiss">8. Solution: keep it simple</a></li>
<li><a href="#tips_tricks">9. Tips &amp; tricks</a>
<ul>
<li><a href="#api">Custom error type</a></li>
<li><a href="#unwrap">unwrap</a></li>
<li><a href="#global_policy">Global error policy</a></li>
<li><a href="#error_context">Improving error context</a></li>
<li><a href="#warnings">Fine grained defensiveness</a></li>
<li><a href="#dataframe">Error values, revisited</a></li>
<li><a href="#cursed_pattern_matching">Cursed pattern matching mechanism</a></li>
</ul>
</li>
<li><a href="#fin">10. Closing points</a></li>
<li><a href="#links">11. Other links</a></li>
<li><a href="#org000001a">12. --</a></li>
</ul>
</div>
</div>
<p>
TLDR: I overview few error handling techniques (with the emphasis on Python, although I mention few other programming languages), some existing Python libraries and suggesting a 
simple and clean <a href="https://mypy.readthedocs.io/en/latest/introduction.html">mypy</a>-based approach.
</p>
<p>
You might learn few things about error handling in different languages, pattern matching, type variance, mypy's capabilities in general and clues for making your code and interfaces more mypy-friendly (and IDE friendly if you're using LSP/Intellij).
</p>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="intro"><a class="headerlink" href="#intro">¶</a><span class="section-number-2">1</span> Intro aka computers are hard</h2>
<div class="outline-text-2" id="text-intro">
<p>
I am somewhat obsessed with personal data and information, analyzing data for quantified self, lifelogging etc. 
I am trying to integrate all my information sources and make it easy to access and search.
You can see some examples in <a href="https://github.com/karlicoss/my">my</a> package and Orger: <a href="https://beepb00p.xyz/orger.html">part I</a>, <a href="https://beepb00p.xyz/orger-todos.html">part II</a>.
</p>
<p>
To get this data, manipulate with it and interact with, of course, you need to extract it first (e.g. from json/csv), parse it (e.g. from plaintext),
or even worse, reverse engineer it from vendor locked formats (e.g. in my <a href="https://github.com/karlicoss/kobuddy">kobo parsing library</a>).
</p>
<p>
If you ever worked with data and had to parse some semi-structured data (let alone natural language), or scraped web pages, you might start getting flashbacks now.
Undocumented APIs, bad characters, cryptic regexes, corrupt fields, unexpected nulls, logical inconsistencies, all sorts of things.
You will almost never get it right from the first few attempts, and then when it finally does what your want… it breaks after couple of days because of course you missed some edge cases or data provider just gives you utter garbage for no reason. And thing you've spent so much effort on stops working, spams your mailbox and requires attention.
</p>
<p>
Ew. <b>Data is messy</b>. 
</p>
<p>
Most modern programming languages are fairly unforgiving to unexpected, and would crash at the slightest opportunity.
Some languages do have quirks (e.g. 'undefined' in JS), but generally well written software aborts very soon after something unexpected starts happening.
And for good reasons:
</p>
<ul class="org-ul">
<li><p>
if it didn't, your program's state would lose the properties the author intended it to have.
</p>
<p>
Ignoring the errors will almost surely prevent the program from getting to desired result anyway and end up with even more severe, or potentially catastrophic inconsistencies. How about formatting your disk if you're <i>really</i> unlucky?
</p></li>
<li>another good reason to fail fast is that it makes the programmer more likely to notice and then fix the bug</li>
</ul>
<p>
So in most cases, as long as you can get away with it, it's <b>good to throw exception or abort</b> the program immediately in some way.
You might not be able to do that if you're literally doing rocket science or <a href="https://isocpp.org/wiki/faq/exceptions#why-exceptions">flight control software</a>, but most of us aren't.
For typical software engineering problems, some errors are less crucial and more manageable than other errors. So we try to be pragmatic when we program, evaluate failure risks and use try/catch mechanisms where appropriate.
</p>
<p>
Now, I'm sure we as an engineers we could handwave about about that stuff forever, so let me be more specific straightaway
and introduce a motivating <b>real life problem</b> that I actually had to solve.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="problem"><a class="headerlink" href="#problem">¶</a><span class="section-number-2">2</span> The problem: parsing Kindle highlights</h2>
<div class="outline-text-2" id="text-problem">
<p>
Say, you own a Kindle book. Electronic books are great. Yeah okay they don't smell like the real thing, but the possibility of highlighting bits of text and typing your comment without distracting on external means of annotation is incredibly helpful.
However, then when you want to go through your highlights after reading to refresh your memory or perhaps to share with a friend,
you find out it's <a href="annotating.html#kindle">not so convenient</a> to actually quickly access them.
</p>
<p>
So you decide to write a script that would process the highlights, perhaps group them by book, displays timestamps and render a nice HTML page
so you could easily open it from phone and recall latest books you read to discuss with friends.
</p>
<p>
On device, Kindle keeps bookmarks and highlights are stored … in <samp class="inline">My Clippings.txt</samp> file. 
</p>
<details><summary>Click to view 'clippings.txt' </summary>
<pre class="example">
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 2 | Added on Sunday, July 21, 2013 10:06:53 AM

Roger Penrose likes to talk about making direct contact with Platonic reality, but it's a bit embarrassing when you think you've made such contact and it turns out the next morning that you were wrong!
==========
[Tong][2013] Dynamics and Relativity  
- Your Highlight on Page 120 | Added on Sunday, August 4, 2013 6:17:21 PM

It is worth mentioning that although the two people disagree on whether the light hits the walls at the same time, this does not mean that they can't be friends.
==========
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 14 | Added on Sunday, August 4, 2013 8:41:53 PM

No hidden-variable theory can be local (I think some guy named Bell proved that).
</pre>
</details>
<p>
Yes, it's a messy format and not very machine friendly. But oh well it's a file, you're a programmer. You know the drill.
</p>
<p>
<a id="def_parse_entry"></a>
<a id="code_initial"></a>
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr"> 1: </span><span class="org-keyword">from</span> datetime <span class="org-keyword">import</span> datetime
<span class="linenr"> 2: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Sequence
<span class="linenr"> 3: </span><span class="org-keyword">import</span> re
<span class="linenr"> 4: </span><span class="org-keyword">from</span> pathlib <span class="org-keyword">import</span> Path
<span class="linenr"> 5: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> groupby
<span class="linenr"> 6: </span><span class="org-keyword">from</span> textwrap <span class="org-keyword">import</span> wrap
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span class="org-keyword">class</span> <span class="org-type">Highlight</span>(NamedTuple):
<span class="linenr"> 9: </span>    dt: datetime <span class="org-comment-delimiter"># </span><span class="org-comment">date when highlight was made</span>
<span class="linenr">10: </span>    title: <span class="org-builtin">str</span>   <span class="org-comment-delimiter"># </span><span class="org-comment">book title</span>
<span class="linenr">11: </span>    page: <span class="org-builtin">str</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">highlight location</span>
<span class="linenr">12: </span>    text: <span class="org-builtin">str</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">highlighted text</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span class="org-keyword">class</span> <span class="org-type">Book</span>(NamedTuple):
<span class="linenr">15: </span>    <span class="org-doc">"Represents book along with its highlights"</span>
<span class="linenr">16: </span>    title: <span class="org-builtin">str</span>
<span class="linenr">17: </span>    highlights: Sequence[Highlight]
<span class="linenr">18: </span>
<span class="linenr">19: </span><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Highlight:
<span class="linenr">20: </span>    <span class="org-variable-name">groups</span> = re.search(
<span class="linenr">21: </span>        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
<span class="linenr">22: </span>        entry, 
<span class="linenr">23: </span>        re.MULTILINE,
<span class="linenr">24: </span>    )
<span class="linenr">25: </span>    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
<span class="linenr">26: </span>    <span class="org-variable-name">dt</span> = datetime.strptime(groups[<span class="org-string">'dts'</span>], <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
<span class="linenr">27: </span>    <span class="org-keyword">return</span> Highlight(
<span class="linenr">28: </span>        dt=dt,
<span class="linenr">29: </span>        title=groups[<span class="org-string">'title'</span>],
<span class="linenr">30: </span>        page=groups[<span class="org-string">'page'</span>],
<span class="linenr">31: </span>        text=groups[<span class="org-string">'text'</span>],
<span class="linenr">32: </span>    )
<span class="linenr">33: </span>
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">38: </span>
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>():
<span class="linenr">40: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">41: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(iter_highlights(), key=key), key=key):
<span class="linenr">42: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">43: </span>        <span class="org-keyword">yield</span> Book(title=book, highlights=highlights)
<span class="linenr">44: </span>
<span class="linenr">45: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
<span class="linenr">46: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">47: </span>        <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">48: </span>        <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">49: </span>            <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">50: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">51: </span>        <span class="org-keyword">print</span>()
<span class="linenr">52: </span>print_books()
</pre>
</div>
<pre class="example">
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

</pre>
<div><span class="before-aside">
For the purposes of this post, to keep the example output clean, I am just using plain text.
Even though it's not quite HTML with CSS, it still looks kinda nice, doesn't it?

</span><aside class="sidenote">if you're wondering why <code class="inline">yield</code> I'll explain it <a class="link-down" href="#iterator">further down</a></aside></div>
<p>
Now:
</p>
<ul class="org-ul">
<li><p>
imagine you've set this script to run in cron, and it's been fine for a while. You left for a three week holiday to finally get some rest from programming; started reading this new book about quant finance (yeah, you've always had interesting ways of getting a rest from computer) and… your script stopped working.
</p>
<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 55, in &lt;module&gt;
  File "&lt;stdin&gt;", line 49, in print_books
  File "&lt;stdin&gt;", line 44, in iter_books
  File "&lt;stdin&gt;", line 34, in iter_highlights
  File "&lt;stdin&gt;", line 21, in parse_entry
AssertionError: Couldn't match regex!
</pre>
<p>
You swear out loud, reach for the laptop you promised to distance yourself from and turns our your parser chokes over <samp class="inline">page</samp> instead of <samp class="inline">Page</samp> in one of new entries. (and yes, this was actually the case in my Kindle export)
</p>
<details><summary>Click to view updated 'clippings.txt' </summary>
<pre class="example">
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 2 | Added on Sunday, July 21, 2013 10:06:53 AM

Roger Penrose likes to talk about making direct contact with Platonic reality, but it's a bit embarrassing when you think you've made such contact and it turns out the next morning that you were wrong!
==========
[Tong][2013] Dynamics and Relativity  
- Your Highlight on Page 120 | Added on Sunday, August 4, 2013 6:17:21 PM

It is worth mentioning that although the two people disagree on whether the light hits the walls at the same time, this does not mean that they can't be friends.
==========
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 14 | Added on Sunday, August 4, 2013 8:41:53 PM

No hidden-variable theory can be local (I think some guy named Bell proved that).
==========
My Life as a Quant: Reflections on Physics and Finance (Emanuel Derman)
- Your Highlight on page 54 | Added on Tuesday, October 4, 2013 12:11:16 PM

The Black-Scholes model allows us to determine the fair value of a stock option.
</pre>
</details>
<p>
You could argue that you should have made the regex in <code class="inline">parse_entry</code> case independent in the first place, but it's not something you would normally expect. 
Kindle specifically got all sorts of nasty things: roman numerals for page numbers, locale dependent dates, inconsistent separators, and so on.
</p>
<p>
Perhaps you even fix this particular problem, but it's a <b>matter of short time till next parsing issue</b>. It's quite sad if you have to constantly tend for things that are meant to simplify and enhance your life.
</p></li>
</ul>
<p>
Or,
</p>
<ul class="org-ul">
<li><p>
you wrote this parser and decided that it could be useful for other people.
</p>
<p>
So for a small fee, you are providing a service that fetches highlights from their Kindles, displays on 
profile pages and lets their friends comment. 
</p>
<p>
Imagine user's highlights result in the same error described above. It would be pretty sad if parsing a single entry
took down the whole user's page or prevented updates. No matter how fast you'd be willing to fix these things, <b>users would leave discouraged</b>.
</p></li>
</ul>
<p>
With the way code is written at the moment, any exception would take the whole program down.
So, we need some way of getting around these errors and carrying on.
</p>
<p>
What do we do? 
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="logging"><a class="headerlink" href="#logging">¶</a><span class="section-number-2">3</span> A non-solution #1: logging</h2>
<div class="outline-text-2" id="text-logging">
<p>
One simple strategy would be to make parsing fully defensive, wrap the whole <code class="inline">parse_entry</code> call in <code class="inline">try/except</code> and log:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">import</span> logging
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">try</span>:
<span class="linenr">38: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">39: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">40: </span>            logging.exception(e)
</pre>
</div>
<p>
Logging typically works well for minor things not worthy a proper error (i.e. warnings) and as a means of retrospective error analysis and debugging. 
In our case logging wouldn't do the job:
</p>
<ul class="org-ul">
<li>you're not aware that error is happening at all. If it's your personal tool, chances are you don't have time to go through all the logs and inspect them regularly.</li>
<li>user expects to see their data, but can't find it. It's pretty frustrating.</li>
</ul>
<p>
What do we want?
</p>
<ul class="org-ul">
<li>keep track of errors, render as much as we can, but terminate with non-zero exit code</li>
<li>potentially present errors in the interface so you or your users wouldn't worry about lost data</li>
</ul>
<p>
So we need some way of propagating the errors up the call hierarchy instead of throwing immediately or suppressing.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="error_object"><a class="headerlink" href="#error_object">¶</a><span class="section-number-2">4</span> A non-solution #2: special error value</h2>
<div class="outline-text-2" id="text-error_object">
<p>
Often it's tempting to fallback to some sort of special 'default' or 'error' value. I bet you've seen this before: <code class="inline">0</code> or <code class="inline">INT_MAX</code> meaning error for integer type, or <code class="inline">""</code> for string types. We could try something similar and squeeze exception into the <code class="inline">Highlight</code> object itself. 
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">34: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">35: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">36: </span>        <span class="org-keyword">try</span>:
<span class="linenr">37: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">38: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">39: </span>            <span class="org-keyword">yield</span> Highlight(dt=datetime.now(), page=<span class="org-string">''</span>, book=<span class="org-string">"ERROR"</span>, text=<span class="org-builtin">str</span>(e))
</pre>
</div>
<p>
One obvious problem is that it's very nontransparent and <b>relies on implicit convention</b>: there is no way of telling that this function might return some special <code class="inline">Highlight</code> which should be treated as error. That not only complicates code, but might also introduce logical inconsistencies.
</p>
<p>
E.g. if your <code class="inline">Highlight</code> object also returned book's ISBN and you filled it with some arbitrary text, it would almost surely not be a valid ISBN, that might cause failures down the pipeline.
</p>
<p>
Sometimes it's inevitable though, e.g. I'm giving an example <a class="link-down" href="#dataframe">later</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000006">
<h2 id="container"><a class="headerlink" href="#container">¶</a><span class="section-number-2">5</span> Almost solution #1: Result container</h2>
<div class="outline-text-2" id="text-container">
<p>
An abstraction that stood the test of time well is a container that holds a <b>result</b> representing one of two:
</p>
<ul class="org-ul">
<li><b>success value</b>, representing the <b>desired outcome</b> of type <code class="inline">T</code></li>
<li>or <b>'error value'</b>, holding <b>error description</b> of type <code class="inline">E</code>.</li>
</ul>
<p>
I will try to stick to the same semantics further down, 'result' typically meaning that it could be either desired value or error.
</p>
<p>
You can vaguely think of it as an interface <code class="inline">Result</code>, and two implementations: <code class="inline">Ok</code> and <code class="inline">Error</code>.
In runtime, you can ask the instance behind <code class="inline">Result</code>, which of these alternative it holds and act accordingly.
</p>
<p>
It has manifested as:
</p>
<ul class="org-ul">
<li><p>
in Rust: <a href="https://doc.rust-lang.org/std/result/enum.Result.html">std::result::Result</a>. Example borrowed from <a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch09-02-recoverable-errors-with-result.html">here</a>:
</p>
<div class="org-src-container">
<pre class="src src-rust">let f: Result&lt;File, io::Error&gt; = File::open("hello.txt");
let f = match f {
    Ok(file) =&gt; file,
    Err(error) =&gt; {
	panic!("There was a problem opening the file: {:?}", error)
    },
};
</pre>
</div></li>
<li><p>
in Haskell: <a href="https://wiki.haskell.org/Handling_errors_in_Haskell#Error_using_the_Either_type"><code class="inline">Either E T</code></a>
</p>
<div class="org-src-container">
<pre class="src src-haskell">main = do
  line &lt;- getLine
  case runParser emailParser line of
    Right (user, domain) -&gt; print ("The email is OK.", user, domain)
    Left  (pos, err)     -&gt; putStrLn ("Parse error on " &lt;&gt; pos &lt;&gt; ": " &lt;&gt; err)
</pre>
</div>
<p>
Yes, <code class="inline">Left</code> meaning error and <code class="inline">Right</code> meaning success are not necessarily obvious. It's kinda a pun: "right" also means "correct".
Also notice that error is not just a string, but also contains the position where parsing failed.
</p></li>
<li>in C++: there is a proposal for <a href="https://issues.isocpp.org/show_bug.cgi?id=29"><code class="inline">std::expected&lt;E, T&gt;</code></a></li>
</ul>
<p>
So, Rust and Haskell programmers seem to be quite happy with it? <b>Why can't we have same in Python?</b>
Well, some people tried! So I'll review a python library that does that: <a href="https://github.com/dbrgn/result#result">result.Result</a>
</p>
<p>
Let's try it on our program and see how it works.
To make it easier to compare to <a class="link-up" href="#code_initial">the original code</a> I suggest duplicating the tab in a separate window and tiling them side by side.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">from</span> result <span class="org-keyword">import</span> Ok, Err
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">try</span>:
<span class="linenr">38: </span>            <span class="org-keyword">yield</span> Ok(parse_entry(entry.strip()))
<span class="linenr">39: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">40: </span>            <span class="org-keyword">yield</span> Err(<span class="org-builtin">str</span>(e))
</pre>
</div>
<p>
We've had to wrap success and error values in <code class="inline">Ok</code> and <code class="inline">Err</code>, but so far it's not too bad.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">41: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">42: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>():
<span class="linenr">43: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">44: </span>    <span class="org-variable-name">values</span> = (r.value <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">45: </span>    <span class="org-variable-name">errors</span> = (r.err() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">46: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">47: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">48: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">49: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">50: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> <span class="org-builtin">map</span>(Err, errors)
</pre>
</div>
<p>
We use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee"><code class="inline">itertools.tee</code></a> here so we don't have to pollute our code with temporary lists.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">51: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
<span class="linenr">52: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">53: </span>        <span class="org-keyword">if</span> r.is_ok():
<span class="linenr">54: </span>            <span class="org-variable-name">v</span> = r.value
<span class="linenr">55: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {v.title}'</span>)
<span class="linenr">56: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> v.highlights:
<span class="linenr">57: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">58: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">59: </span>            <span class="org-keyword">print</span>()
<span class="linenr">60: </span>        <span class="org-keyword">else</span>:
<span class="linenr">61: </span>            <span class="org-variable-name">e</span> = r.err()
<span class="linenr">62: </span>            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
<span class="linenr">63: </span>print_books()
</pre>
</div>
<pre class="example">
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

* ERROR: Couldn't match regex!
</pre>
<p>
<a id="kindle_output"></a>
</p>
<p>
Cool, we rendered as much as we can, and we get the error displayed as well, so nothing crashes and the users are not as unhappy.
The error looks a bit out of nowhere, but at least it's there. We will address how we can improve it <a class="link-down" href="#error_context">later</a>.
</p>
<p>
Sadly, for someone else who looks at <code class="inline">iter_highlights</code> or <code class="inline">iter_books</code> signatures, it's not obvious that it yields <code class="inline">Result</code> objects, not <code class="inline">Book/Highlight</code> objects without reading the code.
It's a thankless job for a human to keep track of, and <a href="https://mypy.readthedocs.io/en/latest/introduction.html"><b>mypy</b></a> is a perfect fit for this task.
Gladly, <code class="inline">result</code> library already <a href="https://github.com/dbrgn/result/blob/master/result/result.py">comes with type annotations</a>.
</p>
<p>
So, let's try to use mypy to aid us at writing correct code.
</p>
<p>
Let's focus just on <code class="inline">iter_highlights</code> and <code class="inline">iter_books</code> and use the <code class="inline">Result</code> type.
</p>
<div class="org-src-container">
<pre class="src src-python" id="org0000004"><span class="linenr">34: </span><span class="org-keyword">from</span> result <span class="org-keyword">import</span> Ok, Err, Result
<span class="linenr">35: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">36: </span><span class="org-variable-name">Error</span> = <span class="org-builtin">str</span>
<span class="linenr">37: </span>
<span class="linenr">38: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Result[Error, Highlight]]:
<span class="linenr">39: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">40: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">41: </span>        <span class="org-keyword">try</span>:
<span class="linenr">42: </span>            <span class="org-keyword">yield</span> Ok(parse_entry(entry.strip()))
<span class="linenr">43: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">44: </span>            <span class="org-keyword">yield</span> Err(<span class="org-builtin">str</span>(e))
</pre>
</div>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">45: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">46: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Error, Book]]:
<span class="linenr">47: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">48: </span>    <span class="org-variable-name">values</span> = (r.ok() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">49: </span>    <span class="org-variable-name">errors</span> = (r      <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">50: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">51: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">52: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">53: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">54: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> errors
</pre>
</div>
<pre class="example">
Mypy output [exit code 1]:
input.py: note: In function "iter_books":
input.py:52: error: Item "None" of "Optional[Highlight]" has no
attribute "dt"  [union-attr]
	    highlights = list(sorted(hls, key=lambda hl: hl.dt))
							 ^
input.py:53: error: Argument "highlights" to "Book" has incompatible
type "List[Optional[Highlight]]"; expected "Sequence[Highlight]"  [arg-type]
	    yield Ok(Book(title=book, highlights=highlights))
						 ^
input.py:54: error: Incompatible types in "yield from" (actual type
"Result[str, Highlight]", expected type "Result[str, Book]")  [misc]
	yield from errors
	^
Found 3 errors in 1 file (checked 1 source file)
</pre>
<p>
Umm. Let's go through the errors:   
</p>
<ul class="org-ul">
<li>errors 1 and 2 are due to <code class="inline">ok()</code> method being too defensive and <a href="https://github.com/dbrgn/result/blob/0778597ddb737754780b3aca956ad944282ee870/result/result.py#L75-L81">returning <code class="inline">None</code></a> if <code class="inline">is_ok</code> is <code class="inline">False</code>. Ideally, you'd throw exception here, because such a situation is a <b>programming bug</b>. We can just enforce non-optional type here via <code class="inline">unopt</code> helper.</li>
<li>error 3 happens because even though we filtered error values, mypy has no idea about that, so it still assumes that <code class="inline">errors</code> might hold <code class="inline">Highlight</code> objects. You could blame mypy of not being smart enough, but it would be a very <b>hard if not impossible analysis</b> in general case. We can get around this by unpacking error and wrapping back in <code class="inline">Err</code>.</li>
</ul>
<p>
Let's apply these insights and try again:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">45: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Optional, TypeVar
<span class="linenr">46: </span><span class="org-variable-name">X</span> = TypeVar(<span class="org-string">'X'</span>)
<span class="linenr">47: </span><span class="org-keyword">def</span> <span class="org-function-name">unopt</span>(x: Optional[X]) -&gt; X:
<span class="linenr">48: </span>    <span class="org-comment-delimiter"># </span><span class="org-comment">similar to https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap</span>
<span class="linenr">49: </span>    <span class="org-keyword">assert</span> x <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>
<span class="linenr">50: </span>    <span class="org-keyword">return</span> x
<span class="linenr">51: </span>
<span class="linenr">52: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">53: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Error, Book]]:
<span class="linenr">54: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">55: </span>    <span class="org-variable-name">values</span> = (unopt(r.ok())  <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">56: </span>    <span class="org-variable-name">errors</span> = (unopt(r.err()) <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">57: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">58: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">59: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">60: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">61: </span>    <span class="org-keyword">for</span> err <span class="org-keyword">in</span> errors:
<span class="linenr">62: </span>        <span class="org-keyword">yield</span> Err(err)
</pre>
</div>
<pre class="example">
Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Phew! With some minor changes and restructuring we've convinced mypy.
</p>
<p>
<a id="container_downsides"></a>
It does come with some downsides:
</p>
<ul class="org-ul">
<li><b>readability</b>: there is a bit of visual noise since you need to add <code class="inline">Ok/Err</code> wrappers and access the success value via <code class="inline">.value</code> property</li>
<li><p>
<b>safety</b>: you could forget to call <code class="inline">is_ok/is_err</code> before calling <code class="inline">ok/err</code>, and mypy won't even blink.
</p>
<p>
<a id="contract_too_complicated"></a>
The contract <samp class="inline">if .is_ok() is True, then it's safe to call .ok()</samp> is too complicated to be encoded as a type that mypy can handle. You'll get <code class="inline">None</code> or exception thrown in runtime. The author of the library admits it by the way, so it's not a criticism, just highlighting limitations of mypy here!
</p></li>
</ul>
<p>
Ok, we've learned something, let's try again. 
</p>
</div>
<div class="outline-3" id="outline-container-org0000005">
<h3 id="iterator"><a class="headerlink" href="#iterator">¶</a>By the way, what's up with <a href="https://docs.python.org/3/library/typing.html#typing.Iterator"><code class="inline">Iterator</code></a> everywhere?</h3>
<div class="outline-text-3" id="text-iterator">
<p>
Glad you asked! Several reasons I'm using generators here:
</p>
<ul class="org-ul">
<li>it makes code cleaner because there is <b>no need for temporary lists</b>, calling <code class="inline">.append</code> and then returning them in the end.</li>
<li>it makes code faster (again, no temporary lists), and also it <b>feels faster</b> because you print items as soon as you process</li>
<li><code class="inline">Iterator</code> type is <b>covariant</b>, whereas <code class="inline">List</code> is not. I'm elaborating on it <a class="link-down" href="#covariance">later</a>. I'm also using <a href="https://docs.python.org/3/library/typing.html#typing.Sequence"><code class="inline">Sequence</code></a> for the same reason.</li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000a">
<h2 id="combinators"><a class="headerlink" href="#combinators">¶</a><span class="section-number-2">6</span> Almost solution #2: use error combinators</h2>
<div class="outline-text-2" id="text-combinators">
<p>
Now, let's try out <a href="https://github.com/dry-python/returns#result-container">returns.result</a> library, clearly inspired by Haskell's <code class="inline">Either</code> monad and <code class="inline">do</code> notation.
I'm quite glad someone already implemented it and I didn't have to reinvent the wheel here.
</p>
<p>
So, let's try and rewrite the code using <code class="inline">returns.result.Result</code>:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000007"><span class="linenr">19: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> safe
<span class="linenr">20: </span>
<span class="linenr">21: </span><span class="org-type">@safe</span>
<span class="linenr">22: </span><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Highlight:
<span class="linenr">23: </span>    <span class="org-variable-name">groups</span> = re.search(
<span class="linenr">24: </span>        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
<span class="linenr">25: </span>        entry, 
<span class="linenr">26: </span>        re.MULTILINE,
<span class="linenr">27: </span>    )
<span class="linenr">28: </span>    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
<span class="linenr">29: </span>    <span class="org-variable-name">dt</span> = datetime.strptime(groups[<span class="org-string">'dts'</span>], <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
<span class="linenr">30: </span>    <span class="org-keyword">return</span> Highlight(
<span class="linenr">31: </span>        dt=dt,
<span class="linenr">32: </span>        title=groups[<span class="org-string">'title'</span>],
<span class="linenr">33: </span>        page=groups[<span class="org-string">'page'</span>],
<span class="linenr">34: </span>        text=groups[<span class="org-string">'text'</span>],
<span class="linenr">35: </span>    )
<span class="linenr">36: </span>
<span class="linenr">37: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> Result
<span class="linenr">38: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Result[Highlight, <span class="org-type">Exception</span>]]:
<span class="linenr">40: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">41: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">42: </span>        <span class="org-keyword">yield</span> parse_entry(entry.strip())
</pre>
</div>
<p>
So far the only difference from <a class="link-up" href="#code_initial">the original code</a> is <a href="https://returns.readthedocs.io/en/latest/pages/result.html#safe"><code class="inline">@safe</code></a> decorator on <code class="inline">parse_entry</code>, which basically deals with catching all exceptions and wrapping into <code class="inline">Result</code>.
</p>
<p>
As a consequence, <code class="inline">iter_highlights</code> required no changes in its body. (which may not be a desirable thing as we'll see <a class="link-down" href="#error_context">later</a>)
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000008"><span class="linenr">43: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> cast
<span class="linenr">44: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> Success, Failure
<span class="linenr">45: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">46: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Book, <span class="org-type">Exception</span>]]:
<span class="linenr">47: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">48: </span>    <span class="org-variable-name">sentinel</span> = cast(Highlight, <span class="org-builtin">object</span>())
<span class="linenr">49: </span>    <span class="org-variable-name">values</span> = (r.unwrap()  <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.value_or(sentinel) <span class="org-keyword">is</span> <span class="org-keyword">not</span> sentinel)
<span class="linenr">50: </span>    <span class="org-variable-name">errors</span> = (r.failure() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.value_or(sentinel) <span class="org-keyword">is</span>     sentinel)
<span class="linenr">51: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">52: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">53: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">54: </span>        <span class="org-keyword">yield</span> Success(Book(title=book, highlights=highlights))
<span class="linenr">55: </span>    <span class="org-keyword">for</span> e <span class="org-keyword">in</span> errors:
<span class="linenr">56: </span>        <span class="org-keyword">yield</span> Failure(e)
</pre>
</div>
<p>
Ok, that definitely requires some explanation…
</p>
<p>
<code class="inline">returns</code> library public API doesn't provide any way to tell between success and failure (<a href="https://returns.readthedocs.io/en/latest/pages/result.html#what-is-the-difference-between-success-and-success">kind of deliberately</a>). The types <code class="inline">_Success</code> and <code class="inline">_Failure</code> are private, and the only method that we can use seems to be <a href="https://returns.readthedocs.io/en/latest/pages/result.html#returns.result.Result.value_or"><code class="inline">result.value_or(default)</code></a>. This method returns the success value if <code class="inline">result</code> is <code class="inline">Success</code> and falls back to <code class="inline">default</code> if <code class="inline">result</code> is a <code class="inline">Failure</code>. So we use a <b>sentinel object to distinguish</b> between actual success values and <code class="inline">default</code> ones, and also have to trick mypy with a <code class="inline">cast</code>.
</p>
<p>
Apart from this obscurity, the function suffers from exactly the same issues as the <code class="inline">iter_books</code> implementation from <a class="link-up" href="#container_downsides">the previous section</a>, and for the same reason: contract is too complicated to be expressed in mypy.
</p>
<p>
One could argue that this function is going to look awkward anyway since we need to separate list of results into successes and errors. Let's see the function that should be more straightforward:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000009"><span class="linenr">57: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Callable
<span class="linenr">58: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">59: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">60: </span>        <span class="org-keyword">def</span> <span class="org-function-name">print_ok</span>(r: Book) -&gt; <span class="org-constant">None</span>:
<span class="linenr">61: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">62: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">63: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">64: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">65: </span>        <span class="org-variable-name">print_error</span> = <span class="org-keyword">lambda</span> e: <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
<span class="linenr">66: </span>        r.<span class="org-builtin">map</span>(print_ok).fix(print_error)
</pre>
</div>
<p>
The idea here is that we can use <code class="inline">map</code> method (that works like <code class="inline">fmap</code> in Haskell) and use it to print successful results,
and chain it with <code class="inline">fix</code> that works like like <code class="inline">fmap</code>, but for errors. In a sense, these methods encapsulate pattern matching 
(which Python lacks syntactically) so as long the implementor did the dirty business of correctly doing it dynamically, you're safe.
However I feel that this particular library overdid this encapsulation a bit, hence very hacky implementation of <code class="inline">iter_books</code>.
</p>
<p>
Lambdas <a href="https://stackoverflow.com/a/1233520/706389"><b>can't be multiline</b></a>, so we have to define a local function for <code class="inline">print_ok</code>.
</p>
<p>
There is a <a href="https://github.com/python/mypy/issues/4226">bug in mypy</a> that sometimes prevents you from inlining the lambda and struggles with type inference. Here I'm hitting this bug with <code class="inline">print_error</code>, that's why it's not <code class="inline">.fix(lambda e: print(f"* ERROR: {e}"))</code>.
</p>
<p>
Another potential problem is one could forget to implement one of <code class="inline">map/fix</code> clauses, since <b>nothing enforces calling them</b>. Even if you're detecting unused variables, missing <code class="inline">.fix</code> clause could stay unnoticed forever. It's very similar to forgetting <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code class="inline">catch</code></a> when using Javascript Promises.
</p>
<p>
It might be possible to enforce with some static analysis though, e.g. via mypy plugin by flagging dangling/temporary <code class="inline">Result</code> values (e.g. similarly to <a href="https://doc.rust-lang.org/std/result/#results-must-be-used"><code class="inline">must_use</code></a> attribute in Rust), but it's a project on its own.
</p>
<p>
Well at the very least it works and type checks!
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">67: </span>print_books()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]
* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]
* ERROR: Couldn't match regex!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Overall I'm not sold, Python simply <b>lacks syntax</b> that lets you unpack and compose <code class="inline">Result</code> objects in a clean way and you end up with boilerplate.
<a href="https://returns.readthedocs.io/en/latest/pages/io.html#returns.io.IO.lift"><code class="inline">lifts</code></a> are not very readable in Haskell, let alone in Python.
</p>
<p>
I think authors did a great experiment though, the more people have fun with types, the more good abstractions we'll find. 
</p>
<p>
I don't want to discourage people from using their library, so if it's your personal project and it makes your code more manageable or it just feels fun then by all means go for it!
</p>
<p>
But as much as I like ideas from functional programming, I'm almost certain that it's gonna look confusing to an average Python programmer,
 and won't be welcome warmly in your team.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000b">
<h2 id="pair"><a class="headerlink" href="#pair">¶</a><span class="section-number-2">7</span> Still-not-quite-a-solution #3: (Value, Error) pairs</h2>
<div class="outline-text-2" id="text-pair">
<p>
Before we go on to the solution I propose let me mention another notable pattern of error handling.
</p>
<p>
It's commonly used in <a href="https://blog.golang.org/error-handling-and-go">Go</a>.
</p>
<div class="org-src-container">
<pre class="src src-go">f, err := os.Open("filename.ext")
if err != nil {
    log.Fatal(err)
}
// do something with the open *File f
</pre>
</div>
<p>
However, it's not limited only by Go, e.g. you'd often encounter it implicitly in C (which had no exceptions) or C++ code.
For instance, <a href="https://en.cppreference.com/w/cpp/filesystem/is_symlink"><code class="inline">std::filesystem::is_symlink</code></a> comes in two flavours:
</p>
<ul class="org-ul">
<li><code class="inline">bool is_symlink( const std::filesystem::path&amp; p )</code>, which throws exceptions on errors.</li>
<li><p>
<code class="inline">bool is_symlink( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept</code>, which sets <code class="inline">ec</code> on errors. 
</p>
<p>
You can think of it as if it returned <code class="inline">std::tuple&lt;bool, std::error_code&gt;</code>. I assume it's not that way because the compiler wouldn't be able to distinguish between signatures.
</p></li>
</ul>
<p>
Personally I as well as many other people find it pretty ugly. No judgment here though as I have no idea behind the design requirements and rationale for such a model in Go.
Pretty sure one can get used to it after a while and that there are some static flow analyzers that help to ensure correct error handling.
</p>
<p>
Main issue with this approach regarding Python is that it's not mypy friendly as return type of <code class="inline">Open</code> would have to be <code class="inline">Tuple[Optional[Success], Optional[Error]]</code>.
In the type theory language, it is a <a href="https://en.wikipedia.org/wiki/Product_type">product type</a>, so in addition to all members of <code class="inline">Success</code> type and all members of <code class="inline">Error</code> type, it also got inhabitants that <b>don't make sense for our program</b>, such as <code class="inline">(None, None)</code> and also all of <code class="inline">Tuple[Success, Error]</code>. 
</p>
<p>
In other words, nothing on type level prevents the callee (<code class="inline">os.Open</code>) from returning something like <code class="inline">(file_descriptor, "whoops")</code>, which has ambiguous meaning.
If we use it we would have to pay with sacrificing type safety or <b>extra code on caller site</b> to eliminate these impossible program states:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-variable-name">f</span>, <span class="org-variable-name">err</span> = <span class="org-builtin">open</span>(<span class="org-string">'filename.ext'</span>)
<span class="org-keyword">if</span> err <span class="org-keyword">is</span> <span class="org-constant">None</span>:
    <span class="org-keyword">assert</span> f <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>
    <span class="org-comment-delimiter"># </span><span class="org-comment">ok, now we have both mypy and runtime safety: open returned error</span>
<span class="org-keyword">elif</span>:
    <span class="org-keyword">assert</span> f <span class="org-keyword">is</span> <span class="org-constant">None</span>
    <span class="org-comment-delimiter"># </span><span class="org-comment">ok, now we have both mypy and runtime safety: open returned value</span>
</pre>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="kiss"><a class="headerlink" href="#kiss">¶</a><span class="section-number-2">8</span> Solution: keep it simple</h2>
<div class="outline-text-2" id="text-kiss">
<p>
It seems that we were on the right track with the <a class="link-up" href="#container">container type</a> and <a class="link-up" href="#combinators">combinators</a>, but never completely satisfied.
Let's recall the problems we had again:
</p>
<ul class="org-ul">
<li><p>
<b>readability</b>: extra wrappers and accessor methods like <code class="inline">Ok/Success/Error/.is_ok()/.unwrap()</code>.
</p>
<p>
It's <b>visual noise</b> and also they creep throughout the code, so if you decide you won't need them later,
you might have to refactor a lot of code.
</p></li>
</ul>
<ul class="org-ul">
<li><b>safety</b>: it's still possible to write logically inconsistent code like <code class="inline">if res.is_error(): return res.value * 10</code>.</li>
<li><b>composability</b>: <code class="inline">fmap</code>-style combinators are not really going to look good because Python lacks multiline lambdas.</li>
<li><b>performance and memory use</b>: not going to make claims here as I haven't benchmarked, but there is a potential for overhead caused by extra wrapper objects.</li>
</ul>
<p>
First, we'll attack readability and safety. Yes, at the same time!  
</p>
<p>
In part it's solved with syntactic sugar in other languages like <code class="inline">do</code> syntax in <code class="inline">Haskell</code>, or <code class="inline">try!</code> macro and <code class="inline">?</code> operator in <a href="https://doc.rust-lang.org/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html">Rust</a>. Sometimes it's inevitable and you have to inject values into rust's <code class="inline">Result</code> explicitly via <code class="inline">Ok/Err</code> constructors. However checking for  <code class="inline">.is_ok()</code> or <code class="inline">isRight</code> is really not that common in idiomatic Rust and Haskell. Reason is <b>pattern matching</b>! E.g. if we had pattern matching in Python we could write something like:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
        match r:
            Book b:
                <span class="org-keyword">print</span>(f<span class="org-string">'* {b.title}'</span>)
                <span class="org-keyword">for</span> h <span class="org-keyword">in</span> b.highlights:
                    <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
                    <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
                <span class="org-keyword">print</span>()
            Error e:
                <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
</pre>
</div>
<p>
That's cleaner than checking for <code class="inline">is_ok/is_err</code> and unpacking; and also makes it type safe because <code class="inline">b</code> and <code class="inline">e</code> already have the appropriate types. In our imaginary world where python had this syntax, surely mypy would have supported it too, right?
</p>
<p>
Oh wait. It kind of <a href="https://mypy.readthedocs.io/en/latest/kinds_of_types.html#union-types">supports it already</a>!
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Union

<span class="org-keyword">def</span> <span class="org-function-name">f</span>(x: Union[<span class="org-builtin">int</span>, <span class="org-builtin">str</span>]) -&gt; <span class="org-constant">None</span>:
    x + 1     <span class="org-comment-delimiter"># </span><span class="org-comment">Error: str + int is not valid</span>
    <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(x, <span class="org-builtin">int</span>):
        <span class="org-comment-delimiter"># </span><span class="org-comment">Here type of x is int.</span>
        x + 1      <span class="org-comment-delimiter"># </span><span class="org-comment">OK</span>
    <span class="org-keyword">else</span>:
        <span class="org-comment-delimiter"># </span><span class="org-comment">Here type of x is str.</span>
        x + <span class="org-string">'a'</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">OK</span>
</pre>
</div>
<p>
So, mypy keeps track of the <a href="https://en.wikipedia.org/wiki/Typing_environment">typing context</a> and <b>narrows it down</b> after certain operations, in particular, <code class="inline">isinstance</code> checks and <a href="https://mypy.readthedocs.io/en/latest/kinds_of_types.html#optional-types-and-the-none-type"><code class="inline">is None/is not None</code> checks</a>.
</p>
<p>
That looks <b>very similar to pattern matching</b> both in terms of syntax and typing rules.
</p>
<p>
So, it seems that <code class="inline">Union</code> would represent our result type. Do we still need to come up with some special wrapper for errors?
Not really, Python already has a fairly convenient candidate for it: <code class="inline">Exception</code>! Most often you have it anyway in <code class="inline">except</code> clause, if it's not enough, you can inherit it, add extra fields and treat as any other type.
</p>
<p>
On the other hand, Exceptions almost never end up as function return values (and when they do, it's normally some fairly unambiguous code dealing specifically with error handling). Hmm, how convenient 🤔.
</p>
<p>
So even though we don't have explicit tagged unions in Python, if we agree that error values are represented as Exceptions, then we do get a disjoint type (i.e. <code class="inline">Ok</code> and <code class="inline">Error</code> are mutually exclusive) at runtime.
</p>
<p>
So, rules of thumb: 
</p>
<ul class="org-ul">
<li>use <code class="inline">Union[T, Exception]</code> to represent type for results that hold <code class="inline">T</code> but can also end up with an error</li>
<li><code class="inline">return</code> or <code class="inline">yield</code> exceptions and success values without using any extra wrappers</li>
<li>'pattern match' through <code class="inline">isinstance</code></li>
</ul>
<p>
Let's see how we can rewrite our program by employing these principles:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="coderef-off" id="coderef-simple_error_api"><span class="linenr">33: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar, Union</span>
<span class="linenr">34: </span><span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>)
<span class="linenr">35: </span><span class="org-variable-name">Res</span> = Union[T, <span class="org-type">Exception</span>]
<span class="linenr">36: </span>
<span class="linenr">37: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">38: </span>
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Res[Highlight]]:
<span class="linenr">40: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">41: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">42: </span>        <span class="org-keyword">try</span>:
<span class="linenr">43: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">44: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="coderef-off" id="coderef-throw_exc"><span class="linenr">45: </span>            <span class="org-keyword">yield</span> e</span>
<span class="linenr">46: </span>
<span class="linenr">47: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">48: </span>
<span class="linenr">49: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Res[Book]]:
<span class="linenr">50: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">51: </span>    <span class="org-variable-name">values</span> = (r <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>))
<span class="linenr">52: </span>    <span class="org-variable-name">errors</span> = (r <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span>     <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>))
<span class="linenr">53: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">54: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">55: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">56: </span>        <span class="org-keyword">yield</span> Book(title=book, highlights=highlights)
<span class="linenr">57: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> errors
<span class="linenr">58: </span>
<span class="linenr">59: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">60: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">61: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>):
<span class="linenr">62: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">63: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">64: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">65: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">66: </span>            <span class="org-keyword">print</span>()
<span class="linenr">67: </span>        <span class="org-keyword">else</span>:
<span class="linenr">68: </span>            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {r}"</span>)
<span class="linenr">69: </span>print_books()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

* ERROR: Couldn't match regex!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Yay, it works and typechecks. Now you can decide for yourself how clean it is by comparing it side by side with <a class="link-up" href="#code_initial">the original code</a> without error handling. You'd see that the only differences (apart from indentation) is code for error handling.
</p>
<p>
<a name="upsides"></a>
Here's what I like about this approach: 
</p>
<ul class="org-ul">
<li><p>
no extra wrapper classes, code is <b>clean and readable</b>
</p>
<p>
Also note that surprisingly, Python's dynamic nature actually helps here. E.g. if you rewrote <code class="inline">iter_books</code> in Rust, you'd have to use <code class="inline">Ok</code> and <code class="inline">Err</code> to wrap the return values into <code class="inline">Res</code> object. I can imagine you might be able get away with explicit wrapping if you use language with conversions like <code class="inline">Scala</code> or <code class="inline">C++</code>.
</p></li>
<li><p>
because of no runtime wrappers, <b>on the 'successful' code path, the callee doesn't need extra code</b> to wrap/unwrap anything.
</p>
<p>
You can prototype and mess with your program in the interpreter without having to think about errors.
If you do get an error, it would just most likely crash the whole program with <code class="inline">AttributeError</code>, which is essentially the desired non-defensive
behaviour during prototyping.
</p>
<p>
You can completely ignore mypy and error handling, until you're happy, then you harden your program by making sure it complies to mypy.
</p></li>
<li><p>
<b>no memory overhead</b> caused by constant wrapping and unwrapping. 
</p>
<p>
I don't really want to make claims about CPU here. I tried isolated micro benchmarking; using <code class="inline">isinstance(r, Exception)</code> runs in 50ns,
using <code class="inline">is_err()</code> call and then unpacking <code class="inline">err()</code> runs is 60ns.
But these numbers might not make sense under a realistic data flow.
</p></li>
<li><p>
<b>easy to operate and transform</b> values, you just write regular Python code without extra lambdas or kludgy local functions.
</p>
<p>
If you don't need to handle the error, you can just yield it up the call stack as we do in <code class="inline">iter_books</code>.
</p></li>
<li><b>doesn't require modifying existing types</b>, and introducing invalid states that signal errors (mentioned <a class="link-up" href="#error_object">here</a>)</li>
<li><p>
<a id="covariance"></a> <b>correct variance</b> for free
</p>
<p>
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">Variance</a> reflects how compound types (e.g. containers/functions) behave with respect to inheritance of their arguments and return types. You might have also heard of this as Liskov substitution principle.
I wouldn't try to explain it here, as it's a topic that deserves a whole post and something you need to experiment with and get comfortable. You can also find some explanations and examples <a href="https://mypy.readthedocs.io/en/latest/generics.html#variance-of-generic-types">here</a>.
</p>
<p>
It short, we can let <code class="inline">Res[T]</code> to be covariant with respect to <code class="inline">T</code>, because it's a simple immutable wrapper around <code class="inline">T</code>.
</p>
<p>
If you were defining your own generic class, you'd have to declare <code class="inline">T = TypeVar('T', covariant=True)</code>.
It's somewhat misleading, because <b>variance is a property of a generic container</b>, however for some historic reasons in mypy, you specify variance in the definition of type variable.
However, because <code class="inline">Res</code> is merely an alias to <code class="inline">Union</code>, you <a href="https://mypy.readthedocs.io/en/latest/generics.html#generic-type-aliases">don't have to remember to do it</a>, because <code class="inline">Union</code> is already defined as covariant in both its type arguments.
</p></li>
</ul>
<p>
Downsides:
</p>
<ul class="org-ul">
<li><p>
<code class="inline">isinstance</code> looks a bit verbose and might be frowned upon as it's <b>often considered as code smell</b>
</p>
<p>
We can't get around this and hide in a helper function for the same reason mentioned <a class="link-up" href="#contract_too_complicated">above</a>, 
but it might be solved in mypy in <a href="https://github.com/python/mypy/issues/5206">some near future</a>, though.
</p></li>
</ul>
<p>
That's basically what I wanted to show! I've been using this pattern for a while now and I think it could work well.
Remember about typing contexts and how <code class="inline">isinstance</code> / <code class="inline">is None</code> checks impact it, and you can keep your code clean and safe.
</p>
<p>
Not suggesting you to go and rewrite all your code from using <code class="inline">try/catch</code> now though. Every error handling style has its place, and 
hopefully you'll figure out parts of your projects where it's applicable.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000017">
<h2 id="tips_tricks"><a class="headerlink" href="#tips_tricks">¶</a><span class="section-number-2">9</span> Tips &amp; tricks</h2>
<div class="outline-text-2" id="text-tips_tricks">
</div>
<div class="outline-3" id="outline-container-org000000e">
<h3 id="api"><a class="headerlink" href="#api">¶</a>Custom error type</h3>
<div class="outline-text-3" id="text-api">
<p>
While <a class="coderef link-up" href="#coderef-simple_error_api" onmouseout="CodeHighlightOff(this, 'coderef-simple_error_api');" onmouseover="CodeHighlightOn(this, 'coderef-simple_error_api');">the three line API</a> is enough in most cases, you might want something more fancy.
</p>
<p>
One improvement is allowing <b>arbitrary error type</b>.
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org000000d"><span class="linenr">1: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar, Union
<span class="linenr">2: </span><span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>)
<span class="linenr">3: </span><span class="org-variable-name">E</span> = TypeVar(<span class="org-string">'E'</span>)
<span class="linenr">4: </span><span class="org-variable-name">ResT</span> = Union[T, E]
</pre>
</div>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr"> 5: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Iterator
<span class="linenr"> 6: </span><span class="org-keyword">class</span> <span class="org-type">Error</span>(NamedTuple):
<span class="linenr"> 7: </span>    text: <span class="org-builtin">str</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span class="org-variable-name">Res</span> = ResT[T, Error]
<span class="linenr">10: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_numbers</span>() -&gt; Iterator[Res[<span class="org-builtin">int</span>]]:
<span class="linenr">11: </span>    <span class="org-keyword">for</span> s <span class="org-keyword">in</span> [<span class="org-string">'1'</span>, <span class="org-string">'two'</span>, <span class="org-string">'3'</span>, <span class="org-string">'4'</span>]:
<span class="linenr">12: </span>        <span class="org-keyword">try</span>:
<span class="linenr">13: </span>            <span class="org-keyword">yield</span> <span class="org-builtin">int</span>(s)
<span class="linenr">14: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">15: </span>            <span class="org-keyword">yield</span> Error(<span class="org-builtin">str</span>(e))
<span class="linenr">16: </span>
<span class="linenr">17: </span><span class="org-keyword">def</span> <span class="org-function-name">print_negated</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">18: </span>    <span class="org-keyword">for</span> n <span class="org-keyword">in</span> iter_numbers():
<span class="linenr">19: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(n, Error):
<span class="linenr">20: </span>            <span class="org-keyword">print</span>(-n)
<span class="linenr">21: </span>        <span class="org-keyword">else</span>:
<span class="linenr">22: </span>            <span class="org-keyword">print</span>(<span class="org-string">'ERROR! '</span> + n.text)
<span class="linenr">23: </span>
<span class="linenr">24: </span>print_negated()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
-1
ERROR! invalid literal for int() with base 10: 'two'
-3
-4

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
The downside now is that you do need to wrap your exception (i.e. presumably you still want to keep the message and stacktrace) in <code class="inline">Error</code> container.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000f">
<h3 id="unwrap"><a class="headerlink" href="#unwrap">¶</a>unwrap</h3>
<div class="outline-text-3" id="text-unwrap">
<p>
Sometimes it's desirable to quickly switch result back to non-defensive version. You can do it by using a simple helper function <code class="inline">unwrap</code> (naming inspired by <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap">rust</a>):
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Union, TypeVar
<span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>, covariant=<span class="org-constant">True</span>)
<span class="org-variable-name">Res</span> = Union[T, <span class="org-type">Exception</span>]
<span class="org-keyword">def</span> <span class="org-function-name">unwrap</span>(res: Res[T]) -&gt; T:
    <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(res, <span class="org-type">Exception</span>):
        <span class="org-keyword">raise</span> res
    <span class="org-keyword">else</span>:
        <span class="org-keyword">return</span> res

good: <span class="org-variable-name">Res</span>[<span class="org-builtin">int</span>] = 123
bad: <span class="org-variable-name">Res</span>[<span class="org-builtin">int</span>] = <span class="org-type">RuntimeError</span>(<span class="org-string">'bad'</span>)
<span class="org-keyword">print</span>(unwrap(good))
<span class="org-keyword">print</span>(unwrap(bad))
</pre>
</div>
<pre class="example">
Python output [exit code 1]:
123
Traceback (most recent call last):
  File "input.py", line 13, in &lt;module&gt;
    print(unwrap(bad))
  File "input.py", line 6, in unwrap
    raise res
RuntimeError: bad

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
</div>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="global_policy"><a class="headerlink" href="#global_policy">¶</a>Global error policy</h3>
<div class="outline-text-3" id="text-global_policy">
<p>
When you're actively working on your code and running tests, you want to make sure that there are no errors and be as non-defensive as possible.
However, in the field, you want to keep the code more defensive. To switch behaviours quickly, you can use the following trick:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000010"><span class="linenr"> 5: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Generic
<span class="linenr"> 6: </span><span class="org-variable-name">X</span> = TypeVar(<span class="org-string">'X'</span>, bound=<span class="org-type">Exception</span>, covariant=<span class="org-constant">True</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span class="org-keyword">class</span> <span class="org-type">Error</span>(Generic[X]):
<span class="linenr"> 9: </span>    <span class="org-variable-name">defensive_policy</span> = <span class="org-constant">True</span>
<span class="linenr">10: </span>
<span class="linenr">11: </span>    <span class="org-keyword">def</span> <span class="org-function-name">__init__</span>(<span class="org-keyword">self</span>, exc: X) -&gt; <span class="org-constant">None</span>:
<span class="linenr">12: </span>        <span class="org-keyword">self</span>.exc = exc
<span class="linenr">13: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> Error.defensive_policy:
<span class="linenr">14: </span>            <span class="org-keyword">raise</span> exc
<span class="linenr">15: </span>
<span class="linenr">16: </span><span class="org-variable-name">Res</span> = ResT[T, Error[<span class="org-type">Exception</span>]]
</pre>
</div>
<p>
The idea here is <code class="inline">Error.defensive_policy</code> determines if exception will be handled defensively or thrown straightaway. <b>This is enforced on type level</b>, because in order to get <code class="inline">Error</code> you need to call its constructor at some point.
</p>
<p>
Also note the use of <code class="inline">bound=Exception</code> on the type variable, this is because we can only <code class="inline">raise</code> something that inherits <code class="inline">Exception</code>.
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000011"><span class="linenr">17: </span>
<span class="linenr">18: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">19: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_numbers</span>() -&gt; Iterator[Res[<span class="org-builtin">int</span>]]:
<span class="linenr">20: </span>    <span class="org-keyword">for</span> s <span class="org-keyword">in</span> [<span class="org-string">'1'</span>, <span class="org-string">'two'</span>, <span class="org-string">'3'</span>, <span class="org-string">'4'</span>]:
<span class="linenr">21: </span>        <span class="org-keyword">try</span>:
<span class="linenr">22: </span>            <span class="org-keyword">yield</span> <span class="org-builtin">int</span>(s)
<span class="linenr">23: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">24: </span>            <span class="org-keyword">yield</span> Error(e)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span class="org-keyword">def</span> <span class="org-function-name">print_negated</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">27: </span>    <span class="org-keyword">for</span> n <span class="org-keyword">in</span> iter_numbers():
<span class="linenr">28: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(n, Error):
<span class="linenr">29: </span>            <span class="org-keyword">print</span>(-n)
<span class="linenr">30: </span>        <span class="org-keyword">else</span>:
<span class="linenr">31: </span>            <span class="org-keyword">print</span>(<span class="org-string">'ERROR! '</span> + <span class="org-builtin">str</span>(n.exc))
</pre>
</div>
<p>
Now, the default behavior is defensive:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">32: </span>print_negated() 
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
-1
ERROR! invalid literal for int() with base 10: 'two'
-3
-4

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
And if we set the error policy to non-defensive, we get exception as soon as we get parsing error:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">33: </span><span class="org-variable-name">Error.defensive_policy</span> = <span class="org-constant">False</span>
<span class="linenr">34: </span>print_negated()
</pre>
</div>
<pre class="example">
Python output [exit code 1]:
-1
Traceback (most recent call last):
  File "input.py", line 33, in &lt;module&gt;
    print_negated()
  File "input.py", line 27, in print_negated
    for n in iter_numbers():
  File "input.py", line 24, in iter_numbers
    yield Error(e)
  File "input.py", line 14, in __init__
    raise exc
  File "input.py", line 22, in iter_numbers
    yield int(s)
ValueError: invalid literal for int() with base 10: 'two'

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Even though you never actually return <code class="inline">Error</code> under the non-defensive policy, you <b>don't have to change any of the type signatures</b>: <code class="inline">Iterator[int]</code> is still a perfectly good <code class="inline">Iterator[Res[int]]</code>. Thanks, <a class="link-up" href="#covariance">covariance</a>!
</p>
<p>
I'm using this technique in my <a href="https://github.com/karlicoss/kobuddy#as-a-standalone-app">Kobo parser</a> and control it via <samp class="inline">--errors</samp> argument.
On CI, it runs in non-defensive mode of course. However when other people use the library for the first time they, something is likely to fail. It deals with decoding binary blobs in unspecified format after all! So one can run it in defensive mode, get most of their data and just ignore (hopefully few) errors till they are fixed.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="error_context"><a class="headerlink" href="#error_context">¶</a>Improving error context</h3>
<div class="outline-text-3" id="text-error_context">
<p>
If you remember <a class="link-up" href="#kindle_output">the output</a>, we got a rather cryptic <samp class="inline">ERROR: Couldn't match regex!</samp>.
That's of course not desirable because you can't easily tell what exactly is causing the error.
</p>
<p>
Normally, you'd use  <a href="https://www.python.org/dev/peps/pep-3134/#explicit-exception-chaining">exception chaining</a>, i.e. <code class="inline">raise EXCEPTION from CAUSE</code> syntax <a class="coderef link-up" href="#coderef-throw_exc" onmouseout="CodeHighlightOff(this, 'coderef-throw_exc');" onmouseover="CodeHighlightOn(this, 'coderef-throw_exc');">here</a>.
</p>
<div><span class="before-aside">
However the problem is that <code class="inline">raise ... from ...</code> is a compound statement, so you can't write <code class="inline">yield RuntimeError(entry) from e</code>.

</span><aside class="sidenote">see my investigation attempt <a href="https://stackoverflow.com/questions/58355639/why-raise-exception-from-cause-not-raise-exception-from-cause">here</a></aside></div>
<p>
I find it handy to have a helper function here: 
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar
<span class="org-variable-name">E</span> = TypeVar(<span class="org-string">'E'</span>, bound=<span class="org-type">Exception</span>)
<span class="org-keyword">def</span> <span class="org-function-name">echain</span>(e: E, from_: <span class="org-type">Exception</span>) -&gt; E:
    <span class="org-variable-name">e.__cause__</span> = from_
    <span class="org-keyword">return</span> e
</pre>
</div>
<p>
, then you can write  <code class="inline">yield echain(RuntimeError(entry), from_=e)</code>, and use <code class="inline">traceback.format_exception</code> to unroll it and get the stacktrace.
The result looks like this:
</p>
<pre class="example">
* ERROR: Traceback (most recent call last):
        File "/tmp/tmp.afhyiITIK2", line 45, in iter_highlights
          yield parse_entry(entry.strip())
        File "/tmp/tmp.afhyiITIK2", line 26, in parse_entry
          assert groups is not None, "Couldn't match regex!"
      AssertionError: Couldn't match regex!
      
      The above exception was the direct cause of the following exception:
      
      RuntimeError: 
      My Life as a Quant: Reflections on Physics and Finance (Emanuel Derman)
      - Your Highlight on page 54 | Added on Tuesday, October 4, 2013 12:11:16 PM
      
      The Black-Scholes model allows us to determine the fair value of a stock option.
</pre>
<p>
Now that's better!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="warnings"><a class="headerlink" href="#warnings">¶</a>Fine grained defensiveness</h3>
<div class="outline-text-3" id="text-warnings">
<p>
Remember <a class="link-up" href="#def_parse_entry"><code class="inline">parse_entry</code></a>? Its return type is <code class="inline">Highlight</code>, so it can return a single highlight or throw a single error,
that will be handled by <code class="inline">iter_highlights</code>. 
</p>
<p>
If we change return type to <code class="inline">Iterator[Res[Highlight]]</code>, we can be more defensive and do some <b>neat fallbacks</b>:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Iterator[Res[Highlight]]:
    <span class="org-variable-name">groups</span> = re.search(
        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
        entry, 
        re.MULTILINE,
    )
    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
    <span class="org-variable-name">dts</span>   = groups[<span class="org-string">'dts'</span>]
    <span class="org-variable-name">title</span> = groups[<span class="org-string">'title'</span>]
    <span class="org-variable-name">page</span>  = groups[<span class="org-string">'page'</span>]
    <span class="org-variable-name">text</span>  = groups[<span class="org-string">'text'</span>]
    <span class="org-keyword">if</span> <span class="org-builtin">len</span>(dts) == 0:
        <span class="org-keyword">yield</span> <span class="org-type">Exception</span>(<span class="org-string">"Bad timestamp!"</span>)
        <span class="org-variable-name">dt</span> = datetime.now() <span class="org-comment-delimiter"># </span><span class="org-comment">might be better than no highlight at all</span>
    <span class="org-keyword">else</span>:
        <span class="org-variable-name">dt</span> = datetime.strptime(dts, <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
    <span class="org-keyword">if</span> <span class="org-builtin">len</span>(text) == 0:
        <span class="org-keyword">yield</span> <span class="org-type">Exception</span>(<span class="org-string">"Empty highlight, something might be wrong"</span>)
    <span class="org-keyword">yield</span> Highlight(
        dt=dt,
        title=title,
        page=page,
        text=text,
    )
</pre>
</div>
<p>
You can think of <code class="inline">Exceptions</code> coming from <code class="inline">parse_entry</code> as sort of warnings and you can handle them accordingly in <code class="inline">iter_highlights</code>, e.g. attach extra context.
</p>
<p>
Of course, this complicates code, and you can't predict all possible errors anyway, so there is always some balance of how defensive you can be.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000015">
<h3 id="dataframe"><a class="headerlink" href="#dataframe">¶</a>Error values, revisited</h3>
<div class="outline-text-3" id="text-dataframe">
<p>
One case where I find <a class="link-up" href="#error_object">'special error value'</a> more or less appropriate is when your function returns a pandas <code class="inline">DataFrame</code>.
</p>
<p>
When manipulating dataframes, you typically don't iterate explicitly, but apply more idiomatic (and often efficient!) combinators like <code class="inline">merge</code>, <code class="inline">join</code>, <code class="inline">concat</code> etc,
 so it makes sense to try and keep errors inside the dataframe. For me, it looks somewhat like this:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">iter_workout_data</span>() -&gt; Iterable[ResT[Exercise, ParsingException]]:
    ...

<span class="org-keyword">def</span> <span class="org-function-name">rows</span>() -&gt; Iterable[Dict]:
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_workout_data():
        <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(r, ParsingException):
            <span class="org-keyword">yield</span> {
                <span class="org-string">'timestamp'</span>: r.timestamp,
                <span class="org-string">'error'</span>    : <span class="org-string">'parsing failed'</span>,
            }
        <span class="org-keyword">else</span>: <span class="org-comment-delimiter"># </span><span class="org-comment">otherwise it's an instance of Exercise</span>
            <span class="org-keyword">yield</span> {
                <span class="org-string">'timestamp'</span>: r.timestamp,
                <span class="org-string">'exercise'</span> : r.exercise_name,
                <span class="org-string">'volume'</span>   : r.exercise_volume,
            }

<span class="org-keyword">def</span> <span class="org-function-name">make_dataframe</span>() -&gt; pandas.DataFrame:
    <span class="org-keyword">return</span> pandas.DataFrame(rows())
</pre>
</div>
<p>
It looks pretty clean since <code class="inline">DataFrame</code> constructor automatically creates the necessary columns and fills missing values with <code class="inline">None</code>.
(you can see some frame examples <a href="./heartbeats_vs_kcals.html">here</a>).
</p>
<p>
Then in the dataframe processing code I would typically check for presence of non-nil value in 'error' column and act accordingly. 
E.g. <a href="https://gateway.serph.network/ipfs/Qmc5hBuomCLzb25kg14dAesAcnRSJZHPvFSUifZUJexKRx">here</a> I'm using the timestamp attached to the parsing errors to plot them neatly close to the rest of data. 
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000016">
<h3 id="cursed_pattern_matching"><a class="headerlink" href="#cursed_pattern_matching">¶</a>Cursed pattern matching mechanism</h3>
<div class="outline-text-3" id="text-cursed_pattern_matching">
<p>
This is forbidden knowledge liberated during the latest Area 51 raid. Tsss… don't tell the government.
</p>
<p>
Have to admit, this is a pretty weird idea that I haven't got practical use for, but still.   
</p>
<p>
What's a construction in Python language that's dispatching objects according to their type? <code class="inline">try/catch</code>!
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">class</span> <span class="org-type">A</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>
<span class="org-keyword">class</span> <span class="org-type">B</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>
<span class="org-keyword">class</span> <span class="org-type">C</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>

<span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Any
<span class="org-keyword">def</span> <span class="org-function-name">dispatch</span>(x: Any) -&gt; <span class="org-constant">None</span>:
    <span class="org-keyword">try</span>:
        <span class="org-keyword">raise</span> x
    <span class="org-keyword">except</span> A <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(<span class="org-string">"Matched A!"</span>)
    <span class="org-keyword">except</span> B <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(<span class="org-string">"Matched B!"</span>)
    <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(f<span class="org-string">"Unhandled object: {type(e)} {e}"</span>)

dispatch(B())
dispatch(C())
dispatch(A())
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
Matched B!
Unhandled object: &lt;class '__main__.C'&gt; 
Matched A!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
It certainly looks unconventional, and you can only use that as long as your object inherits from <code class="inline">Exception</code>.
</p>
<p>
We can exploit this for our specific case on <code class="inline">Union[T, Exception]</code> by using <a class="link-up" href="#unwrap"><code class="inline">unwrap</code></a>:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
        <span class="org-keyword">try</span>:
            <span class="org-variable-name">b</span> = unwrap(r)
        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
            <span class="org-comment-delimiter"># </span><span class="org-comment">e has type Exception (duh!)</span>
            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
        <span class="org-keyword">else</span>:
            <span class="org-comment-delimiter"># </span><span class="org-comment">b has type Highlight!</span>
            <span class="org-keyword">print</span>(f<span class="org-string">'* {b.title}'</span>)
            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> b.highlights:
                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
            <span class="org-keyword">print</span>()
</pre>
</div>
<p>
This looks a bit odd. We still have to type <code class="inline">Exception</code>, you can't just write <code class="inline">except e</code>, which hardly makes it different from <code class="inline">isinstance</code>. 
Note that we have to use <code class="inline">else</code> block: if you put code in it under <code class="inline">try</code>, you'll start catching exceptions coming from the printing code, which is unintended.
</p>
<p>
And the obvious downside is that there is a potential to forget to handle exception signaled by <code class="inline">unwrap</code> and mypy can't help you here.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000018">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">10</span> Closing points</h2>
<div class="outline-text-2" id="text-fin">
<ul class="org-ul">
<li>mypy is your best friend</li>
<li><p>
sometimes existing and simple things work better and cleaner
</p>
<p>
Not trying to advocate avoiding syntactic sugar, decorators and libraries at any cost, however you might experience friction
while trying to introduce them in more conservative teams.  
</p></li>
<li><p>
it's kind of ironic that you can't achieve similar level of safety and cleanliness in many statically typed programming languages
</p>
<p>
Python is often hated by static typing advocates (I suppose as any other dynamically typed language).
Have to admit, I was one of these haters few years ago. But in this case Python nails it.
</p></li>
<li><p>
writing is damn hard
</p>
<p>
Literate programming is even harder, however I'm glad I've started doing this in Emacs and Org mode.
That saved me from otherwise massive amounts of code duplication and reference rot.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000019">
<h2 id="links"><a class="headerlink" href="#links">¶</a><span class="section-number-2">11</span> Other links</h2>
<div class="outline-text-2" id="text-links">
<ul class="org-ul">
<li>A good overview of different approaches to error handling: <a href="http://joeduffyblog.com/2016/02/07/the-error-model">Joe Duffy - The Error Model</a></li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0709r4.pdf">Zero-overhead deterministic exceptions: Throwing values</a> by Herb Sutter</li>
<li><a href="https://barahilia.github.io/blog/computers/2017/01/04/to-yield-or-not-to-yield.html">To yield or not to yield</a>: good summary of Python's generator's strengths</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org000001a">
<h2 id="org000001a"><a class="headerlink" href="#org000001a">¶</a><span class="section-number-2">12</span> --</h2>
<div class="outline-text-2" id="text-12">
<p>
Let me know what you think! I'm open to all feedback.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#mypy">#mypy</a> <a class="post-tag" href="./tags.html#python">#python</a></div>
        <!-- TODO post-date? -->
        <div class="date">26 October 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://news.ycombinator.com/item?id=21736620"><b>hackernews</b></a></li>
    
        <li><a href="https://lobste.rs/s/xxzwij/python_is_better_typed_than_you_think">lobste.rs</a></li>
    
        <li><a href="https://www.reddit.com/r/Python/comments/dplkz6/python_safer_typed_than_you_think">reddit</a></li>
    
        <li><a href="https://news.ycombinator.com/item?id=21397150">hackernews</a></li>
    
        <li><a href="https://news.ycombinator.com/item?id=21456706">hackernews</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_mypy_error_handling"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sat, 26 Oct 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/mypy-error-handling.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Using Orger to populate your tasks list</title>
    <link>https://beepb00p.xyz/orger-todos.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="orgmode productivity orger">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Using Orger to populate your tasks list | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/orger-todos.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/orger-todos.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Using Orger to populate your tasks list | beepb00p" />
        <meta property="og:description" content="Reading Reddit, building spaced repetition queue and quick todos from Telegram messages" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Using Orger to populate your tasks list</h1>
    <div class="summary">Reading Reddit, building spaced repetition queue and quick todos from Telegram messages</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#reddit">1. reddit: better processing of saved Reddit items</a></li>
<li><a href="#telegram2org">2. telegram2org: one tap to create tasks from Telegram messages</a></li>
<li><a href="#hyp2org">3. hyp2org: create tasks from Hypothesis highlights</a></li>
<li><a href="#krill">4. krill: learn new words from your Kobo books</a></li>
<li><a href="#org0000004">5. ---</a></li>
</ul>
</div>
</div>
<p>
In <a href="orger.html">the first part</a> about Orger I wrote how I'm using it (in particular, the <code class="inline">orger.StaticView</code> component) to render my personal data as org-mode files
for easy, instant access and search.
</p>
<p>
Another generic application of Orger, is populating Org-mode files with outlines. 
In particular that means tasks for your agenda/spaced repetition routine or whatever else you could imagine it to be useful for.
</p>
<p>
Main goal was to minimize the overhead and distractions caused by creating todos by normal means (opening an app, copying some text, etc.).
Basically I want it to be completely seamless, almost without thinking at all.
</p>
<p>
You can use the target files as any of your normal org-mode files: modify contents, delete or reschedule tasks, etc.
When Orger detects new items they would be carefully and atomically appended to the end of file.
It keeps track of already processed items in a separate JSON file. All this nasty business is dealt with in <code class="inline">orger.InteractiveView</code> component.
</p>
<p>
You can find all of interactive Orger modules I'm using <a href="https://github.com/karlicoss/orger/search?q=InteractiveView">on Github</a>. 
</p>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="reddit"><a class="headerlink" href="#reddit">¶</a><span class="section-number-2">1</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/reddit.py">reddit</a>: better processing of saved Reddit items</h2>
<div class="outline-text-2" id="text-reddit">
<p>
This one I have been sustainably using for almost a year now, so I believe it could be useful to many people.
</p>
<p>
I tend to be curious about lots of different topics so I'm subscribed to over 100 subreddits.
</p>
<p>
For the most part I'm reading Reddit passively and I can't afford spending much time on Reddit every day, so my system for years has been: reading updates for the past week on Sundays.
</p>
<p>
For few select subreddits that most interest me (e.g. <a href="https://www.reddit.com/r/QuantifiedSelf/">quantifiedself</a> or <a href="https://www.reddit.com/r/orgmode">orgmode</a>)
I read all updates, for the rest I just read weekly top.
</p>
<p>
I tend to do it from my phone on the go/in transport or while I'm waiting somewhere, so the concentration is not exactly perfect and many things are too awkward to read or browse on phone anyway.
</p>
<p>
So I tend to favorite interesting submissions (judging by the title) without reading them instead, and later once in a while when I'm at my desktop I have a deeper look at whatever I favorited.
</p>
<p>
This however gets a little clumsy. 
</p>
<ul class="org-ul">
<li><p>
saved <b>items can't be rearranged</b> in the Reddit interface and the only sort available is by 'saving time'
</p>
<p>
This would be ok if every time you processed your saved items you cleared all of them, but that's just not very realistic.
</p>
<p>
Some things take higher priority; some things just give you few thoughts now and you wanna action on it later.
So every time you process saved submissions, you end up going through same things all over again, and you have to remember where you stopped last time. 
That's quite distracting!
</p></li>
<li><p>
you <b>can't add private comments</b> to saved items
</p>
<p>
Using some annotation engine like <a href="https://hypothes.is">Hypothesis</a> on 'Saved' page would be too flaky if Reddit changes design.
You could annotate saved items directly, but then you won't have an overview on 'Saved' page.
</p></li>
<li><p>
sometimes posts/comments get deleted so if you look at saved item months later, you'd not know what have you saved anymore
</p>
<p>
While there are ways to read removed reddit comments, it's a bit distracting to do too and with orger you'd always have an original version of the item.
</p></li>
</ul>
<p>
How Orger solves that for me? Here's my typical workflow with <samp class="inline">reddit.org</samp> file:
</p>
<ul class="org-ul">
<li>I'm running <a href="https://github.com/karlicoss/rexport">reddit data exporter</a> and <samp class="inline">reddit.py</samp> every night automatically (via cron).</li>
<li>when I feel like reading some Reddit, I open <samp class="inline">reddit.org</samp> and jump to new items at the end of file (I can quickly tell them from old ones since they don't have a priority), and go through them</li>
<li>some things just get refiled immediately. E.g. if it's a recipe it would go to <samp class="inline">food.org</samp>, if it's something C++ related, it would go to <samp class="inline">cpp.org</samp>, etc.</li>
<li>what isn't refiled, I mark with a priority</li>
<li>when everything is prioritized, I select the whole file, call <code class="inline">org-sort-entries</code> and sort by priorities.</li>
<li><p>
now that everything looks a bit more manageable, I can action on the highest priority items (<code class="inline">#A</code> and <code class="inline">#B</code>) properly.
</p>
<p>
Some I just read and archive.
</p>
<p>
Some give me thoughts or ideas which I can add under the corresponding org-mode heading.
</p>
<p>
Some things just require actually acting on them (e.g. new library release), so I can mark it as TODO and schedule so it shows up in my agenda.
</p></li>
<li>also, once in a while I'll look through items with lower (<code class="inline">#C</code> / <code class="inline">#D</code>) priorities and bump them or archive if they become irrelevant.</li>
</ul>
<p>
Needless to say when I'm searching through all of my Org-mode files, items saved on Reddit pop up as well.
</p>
<p>
The only downside of my particular implementation is that items are not unmarked as 'Saved' on Reddit.
One could probably implement this with API call on archiving/marking item as done or something, I just didn't find it too big of a deal for me.
</p>
<p>
Here's how it looks for me (with content collapsed):
</p>
<div class="org-src-container">
<pre class="src src-org">
<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> </span><span class="org-org-priority">[#B]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-05-18 Sat 19:00]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/spacemacs/comments/bnlgkv/refactoring_in_spacemacs_using_iedit_and_helmedit/">Refactoring in Spacemacs using iedit and helm-edit</a></span><span class="org-org-level-1"> /r/spacemacs</span>
...
<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> </span><span class="org-org-priority">[#B]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-09-02 Mon 12:41]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/scifi/comments/cvy78o/searching_stories_with_super_intelligence_in/eyldzyb/">Searching stories with super intelligence in humans theme</a></span><span class="org-org-level-1"> /r/scifi </span><span class="org-org-level-1"><span class="org-org-tag">:read:</span></span>
...
<span class="org-org-level-1">* </span><span class="org-org-priority">[#C]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-06-21 Fri 06:50]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/AskMen/comments/c2vw9p/how_do_relationship_fights_affect_men/ermvj9a/">How do relationship fights affect men?</a></span><span class="org-org-level-1"> /r/AskMen </span>
...
<span class="org-org-level-1">* </span><span class="org-org-priority">[#D]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-01-15 Tue 08:30]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/bodyweightfitness/comments/afutqw/mindmuscle_connection_whats_the_evidence/">Mind-Muscle Connection: What's the evidence?</a></span><span class="org-org-level-1"> /r/bodyweightfitness </span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-14 Sat 09:00]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/biology/comments/d1u5je/kinesin_a_motor_protein_walks_different_proteins/">Kinesin, a motor protein, "walks" different proteins from one place to another</a></span><span class="org-org-level-1"> /r/biology</span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-24 Tue 19:10]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/Biohackers/comments/d8ky2y/why_you_should_not_blindly_trust_nutrition/">Why you should not blindly trust nutrition experts but instead self experiment.</a></span><span class="org-org-level-1"> /r/Biohackers</span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-10-03 Thu 21:51]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/decentralization/comments/dcxtzm/is_there_an_opensource_decentralized_search_engine/">Is there an opensource decentralized search engine?</a></span><span class="org-org-level-1"> /r/decentralization</span>


</pre>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="telegram2org"><a class="headerlink" href="#telegram2org">¶</a><span class="section-number-2">2</span> <a href="https://github.com/karlicoss/telegram2org">telegram2org</a>: one tap to create tasks from Telegram messages</h2>
<div class="outline-text-2" id="text-telegram2org">
<p>
</p>
<p>
Imagine a friend asked you for something, or sent you a link or a video, but you don't have time to process that right at the moment.
</p>
<p>
Normally I'd share their message to my TODO list app so I can process it later.
However, official Android app for Telegram doesn't have sharing capabilities.
</p>
<p>
This is a tool that allows you to overcome this restriction by forwarding messages you want to
remember about to a special private channel. Then it grabs the messages from this private channel and creates TODO items from it!
</p>
<p>
That way you keep your focus while not being mean ignoring your friends' messages.
</p>
<p>
I keep tags for the people I communicate most with (creepy I know :P ), so it also maps select people's names to tags,
so I can quickly have an overview of things to discuss or reply to.
</p>
<p>
It would be fairly straightforward to modify the code for other instant messengers, although there are some potential issues.
For instance, Whatsapp  doesn't have an API. You can potentially web scrape it or reverse engineer the database on your phone to get messages,
but I'm personally not motivated enough since I'm not using them much. Unless many people lack this, so let me know!
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="hyp2org"><a class="headerlink" href="#hyp2org">¶</a><span class="section-number-2">3</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/hyp2org.py">hyp2org</a>: create tasks from Hypothesis highlights</h2>
<div class="outline-text-2" id="text-hyp2org">
<p>
</p>
<p>
Sometimes when I'm annotating using <a href="https://hypothes.is">Hypothesis</a>, I want to think more
about specific highlights, google more about them later or generally act on them somehow.
</p>
<p>
Normally you'd have to copy the URL, highlighted text and create a task from it.
</p>
<p>
This script does that automatically, only thing that you have to do is to mark it with a tag or type 'todo'
in the annotation text.
</p>
<p>
Items get scheduled and appear on my org-mode agenda,
so I can un/reschedule them if they don't require immediate attention.
</p>
<p>
Modules for <a href="https://github.com/karlicoss/orger/blob/master/modules/kobo2org.py">Kobo</a>
and <a href="https://github.com/karlicoss/orger/blob/master/modules/ip2org.py">Instapaper</a>
work in the pretty much same way.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="krill"><a class="headerlink" href="#krill">¶</a><span class="section-number-2">4</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/krill.py">krill</a>: learn new words from your Kobo books</h2>
<div class="outline-text-2" id="text-krill">
<p>
</p>
<p>
Automatically import stuff from my Kobo backups into org-mode for further spaced repetition (via org-drill in my case).
Mainly learning vocabulary with it.
</p>
<p>
It uses <a href="https://github.com/karlicoss/kobuddy">kobuddy</a> to extract data from Kobo exports.
</p>
<p>
The name stands for K[oboD]rill.
</p>
<p>
I'm using <a href="https://orgmode.org/worg/org-contrib/org-drill.html">org-drill</a> for Spaced repetition, but you could potentially use same principle to 
import cards in Anki or any other spaced repetition engine you like.
</p>
<p>
Here's how it looks for me:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> yesterday [ Gestern ]                                          </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-10-17 Thu&gt;</span>
<span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span>  <span class="org-org-date">[2018-11-16 Fri 20:30]</span>
<span class="org-org-special-keyword">:ID:</span>       <span class="org-org-property-value">986e4686-75ec-40a9-9827-f9458bcb2811</span>
<span class="org-org-special-keyword">:DRILL_LAST_INTERVAL:</span> <span class="org-org-property-value">200.7488</span>
<span class="org-org-special-keyword">:DRILL_REPEATS_SINCE_FAIL:</span> <span class="org-org-property-value">6</span>
<span class="org-org-special-keyword">:DRILL_TOTAL_REPEATS:</span> <span class="org-org-property-value">5</span>
<span class="org-org-special-keyword">:DRILL_FAILURE_COUNT:</span> <span class="org-org-property-value">0</span>
<span class="org-org-special-keyword">:DRILL_AVERAGE_QUALITY:</span> <span class="org-org-property-value">4.6</span>
<span class="org-org-special-keyword">:DRILL_EASE:</span> <span class="org-org-property-value">2.8</span>
<span class="org-org-special-keyword">:DRILL_LAST_QUALITY:</span> <span class="org-org-property-value">4</span>
<span class="org-org-special-keyword">:DRILL_LAST_REVIEWED:</span> <span class="org-org-date">[2019-03-30 Sat 21:27]</span>
<span class="org-org-drawer">:END:</span>
from Learn German with Stories: Café in Berlin - 10 short stories for beginners

<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> disquieting                                                    </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-09-29 Sun&gt;</span>
<span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span> <span class="org-org-date">[2019-08-27 Tue 20:12]</span>
<span class="org-org-special-keyword">:ID:</span>       <span class="org-org-property-value">28652353-c905-46b1-b4a5-bc2daf71125d</span>
<span class="org-org-special-keyword">:DRILL_LAST_INTERVAL:</span> <span class="org-org-property-value">9.2418</span>
<span class="org-org-special-keyword">:DRILL_REPEATS_SINCE_FAIL:</span> <span class="org-org-property-value">3</span>
<span class="org-org-special-keyword">:DRILL_TOTAL_REPEATS:</span> <span class="org-org-property-value">2</span>
<span class="org-org-special-keyword">:DRILL_FAILURE_COUNT:</span> <span class="org-org-property-value">0</span>
<span class="org-org-special-keyword">:DRILL_AVERAGE_QUALITY:</span> <span class="org-org-property-value">3.5</span>
<span class="org-org-special-keyword">:DRILL_EASE:</span> <span class="org-org-property-value">2.36</span>
<span class="org-org-special-keyword">:DRILL_LAST_QUALITY:</span> <span class="org-org-property-value">4</span>
<span class="org-org-special-keyword">:DRILL_LAST_REVIEWED:</span> <span class="org-org-date">[2019-09-20 Fri 00:17]</span>
<span class="org-org-drawer">:END:</span>
 from Worm

<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> Plötzlich                                                      </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-10-05 Sat&gt;</span>
<span class="org-org-drawer">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span> <span class="org-org-date">[2019-10-04 Fri 14:19]</span>
<span class="org-org-drawer">:END:</span>
 from Learn German with Stories: Café in Berlin - 10 short stories for beginners
</pre>
</div>
<p>
Last item was just appended after I connected my reader to computer, whereas two other have been there for a while.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><span class="section-number-2">5</span> ---</h2>
<div class="outline-text-2" id="text-5">
<p>
Let me know what you think! I'm open to all feedback.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#orgmode">#orgmode</a> <a class="post-tag" href="./tags.html#productivity">#productivity</a> <a class="post-tag" href="./tags.html#orger">#orger</a></div>
        <!-- TODO post-date? -->
        <div class="date">05 October 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/dgdej4/orger_part_ii_reading_reddit_via_orgmode_quick">/r/orgmode</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_orger_todos"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Sat, 05 Oct 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/orger-todos.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Orger: plaintext reflection of your digital self</title>
    <link>https://beepb00p.xyz/orger.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm orgmode orger">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Orger: plaintext reflection of your digital self | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/orger.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/orger.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Orger: plaintext reflection of your digital self | beepb00p" />
        <meta property="og:description" content="Mirror your personal data as org-mode for instant access and search" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Orger: plaintext reflection of your digital self</h1>
    <div class="summary">Mirror your personal data as org-mode for instant access and search</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#intro">1. Intro</a></li>
<li><a href="#what">2. What Orger does</a></li>
<li><a href="#demo">3. Demo: displaying Pocket data via Orger</a></li>
<li><a href="#examples">4. More examples</a>
<ul>
<li><a href="#org0000003">instapaper</a></li>
<li><a href="#org0000004">hypothesis</a></li>
<li><a href="#org0000005">kobo</a></li>
<li><a href="#org0000006">pinboard</a></li>
<li><a href="#org0000007">pdfs</a></li>
<li><a href="#org0000008">twitter</a></li>
<li><a href="#org0000009">rtm2org</a></li>
<li><a href="#org000000a">telegram2org</a></li>
<li><a href="#org000000b">reddit</a></li>
</ul>
</li>
<li><a href="#why_hard">5. It does sound very simple. Does that really deserve a post?</a></li>
<li><a href="#org000000e">6. What makes Orger good?</a></li>
<li><a href="#using">7. Using Orger views</a>
<ul>
<li><a href="#usecases">Typical use patterns</a></li>
</ul>
</li>
<li><a href="#improvements">8. Potential improvements</a>
<ul>
<li><a href="#org0000011"><span class="todo TODO">TODO</span> more frequent, ideally realtime updates to views</a></li>
<li><a href="#org0000012"><span class="todo TODO">TODO</span> alternative export formats</a></li>
<li><a href="#org0000013"><span class="todo TODO">TODO</span> two-way data flow</a></li>
<li><a href="#org0000014"><span class="todo TODO">TODO</span> potential for race condition</a></li>
</ul>
</li>
<li><a href="#similar">9. Similar projects</a></li>
<li><a href="#org0000017">10. ----</a></li>
</ul>
</div>
</div>
<p>
TLDR: I'll write about <a href="https://github.com/karlicoss/orger">orger</a>, a tool I'm using to convert my personal data into easily readable and searchable org-mode views.
I'll present some examples and use cases, that will hopefully be helpful to you as well even if you are not sold by using my tool.
</p>
<p>
There is also <a href="orger-todos.html">second part</a> where I'm explaining how it can be used to process Reddit, create quick tasks from Telegram messages and help with spaced repetition.
If you're impatient, you can jump straight to a <a class="link-down" href="#demo">demo</a>.
</p>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="intro"><a class="headerlink" href="#intro">¶</a><span class="section-number-2">1</span> Intro</h2>
<div class="outline-text-2" id="text-intro">
<div class="noop" id="for_exports_post">
<p>
</p>
<p>
I consume lots of digital content (books, articles, Reddit, Youtube, Twitter, etc.) and most of it I find somewhat useful and insightful.
I want to use that knowledge later, act and build on it. But there's an obstacle: the human brain.
</p>
<p>
It would be cool to be capable of always remembering and instantly recalling information you've interacted with, metadata and your thoughts on it.
Until we get augmented though, there are two options: the first is just to suck it up and live with it. You might have guessed this is not an option I'm comfortable with.
</p>
<div><span class="before-aside">
The second option is compensating for your sloppy meaty memory and having information you've read at hand and a quick way of searching over it. 

</span><aside class="sidenote">see <a class="post-tag" href="./tags.html#extendedmind">#extendedmind</a></aside></div>
<p>
<a id="motivation"></a>
That sounds simple enough but as with many simple things, in practice you run into obstacles. 
I'll give some I've personally been overcoming as examples:
</p>
<ul class="org-ul">
<li>convenience of access, e.g.:
<ul class="org-ul">
<li>to access highlights and notes on my Kobo ebook I need to actually <b>reach my reader and tap through e-ink</b> touch screen. Not much fun!</li>
<li><div><span class="before-aside">if you want to search over annotations in your PDF collections… well good luck, I'm just not aware of such a tool. It's actually way worse: many PDF viewers <b>wouldn't even let you search in highlights</b> within the file you're currently viewing. </span><aside class="sidenote">see PDF readers <a href="./annotating.html#pdfs">overview</a></aside></div></li>
<li>there is no easy way to quickly access all of your twitter favorites, people suggest using hacks like <a href="https://webapps.stackexchange.com/a/131374/68104">autoscroll extension</a>.</li>
</ul></li>
<li>searching data, e.g.:
<ul class="org-ul">
<li>search function often just isn't available at all, e.g. on Instapaper, you can't restrict search to highlights. If it is available, it's <b>almost never incremental</b>.</li>
<li>builtin browser search (<code class="inline">Ctrl-F</code>) sucks for the most part: it's not very easy to navigate as you don't get previews and you have to look through every match</li>
<li>sometimes you vaguely recall reading about something or seeing a link, but <b>don't remember where exactly</b>. Was it on stackoverflow? Or in some github issue? Or in a conversation with friend?</li>
</ul></li>
<li>data ownership and liberation, e.g.
<ul class="org-ul">
<li><p>
what happens if data disappears or service is down (temporary/permanently) or banned by your government?
</p>
<p>
You may think you live in a civilized country and that would never affect you. Well, <a href="https://www.theverge.com/2018/5/23/17387146/instapaper-gdpr-europe-access-shut-down-privacy-changes">in 2018</a>, Instapaper was unavailable in Europe for several months (!) due to missing the GDPR deadline.
</p></li>
<li><div><span class="before-aside">99% of services <b>don't have support for offline mode</b>. This may be just a small inconvenience if you're on a train or something, but there is more to it.
What if some sort of apocalypse happens and you lose all access to data? 
That depends on your paranoia level of course, and apocalypse is bad enough as it is, but my take on it is that at least I'd have my data :) </span><aside class="sidenote">see <a class="post-tag" href="./tags.html#offline">#offline</a></aside></div></li>
<li>if you delete a book on Kobo, not only you can't access its annotations anymore, but they seem to get <b>wiped</b> from the database.</li>
</ul></li>
</ul>
</div>
<p>
Thinking about that and tinkering helped me understand what I want: some sort of <b><b>search engine</b></b>, over my <b><b>personal data</b></b>, with <b><b>uniform</b></b> and <b><b>always available</b></b> way of accessing it.
</p>
<p>
So, I present you a system that I've developed and that solves all my problems™: <a href="https://github.com/karlicoss/orger">orger</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="what"><a class="headerlink" href="#what">¶</a><span class="section-number-2">2</span> What Orger does</h2>
<div class="outline-text-2" id="text-what">
<p>
It's really so quite trivial that it's almost stupid. Orger provides a simple python API to render any data as an Org-mode file. It's easier to give an example:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">from</span> orger <span class="org-keyword">import</span> StaticView
<span class="org-keyword">from</span> orger.inorganic <span class="org-keyword">import</span> node, link
<span class="org-keyword">from</span> orger.common <span class="org-keyword">import</span> dt_heading

<span class="org-keyword">import</span> my.github_data

<span class="org-keyword">class</span> <span class="org-type">Github</span>(StaticView):
  <span class="org-keyword">def</span> <span class="org-function-name">get_items</span>(<span class="org-keyword">self</span>):
    <span class="org-keyword">for</span> event <span class="org-keyword">in</span> my.github_data.get_events():
      <span class="org-keyword">yield</span> node(dt_heading(event.dt, event.summary))

Github.main()
</pre>
</div>
<p>
That ten line program results in a file <samp class="inline">Github.org</samp>:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-comment"># AUTOGENERATED BY /code/orger/github.py</span>

<span class="org-org-level-1">* </span><span class="org-org-date">[2016-10-30 Sun 10:29]</span><span class="org-org-level-1"> opened PR Add </span><span class="org-org-level-1"><span class="org-underline">__enter__</span></span><span class="org-org-level-1"> and </span><span class="org-org-level-1"><span class="org-underline">__exit__</span></span><span class="org-org-level-1"> to Pool stub</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-11-10 Thu 09:29]</span><span class="org-org-level-1"> opened PR Update gradle to 2.14.1 and gradle plugin to 2.1.1</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-11-16 Wed 20:20]</span><span class="org-org-level-1"> commented on issue Linker error makes it impossible to use a stack-provided ghc</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-12-30 Fri 11:57]</span><span class="org-org-level-1"> commented on issue Fix performance in the rare case of hashCode evaluating to zero </span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-21 Sat 16:51]</span><span class="org-org-level-1"> commented on issue Tags containing letters outside of a-zA-Z</span>
....
</pre>
</div>
<p>
Even with event summaries only it can already be very useful to search over. What you can potentially do really depends on your imagination and needs! You can also add:
</p>
<ul class="org-ul">
<li>links</li>
<li>tags</li>
<li>timestamps</li>
<li>properties</li>
<li>child nodes</li>
</ul>
<p>
See <a class="link-down" href="#examples">'Examples'</a> section for more.
</p>
<p>
So as you can see orger itself is a really not sophisticated tool, at least until you spend time trying to reimplement the same.
As always the devil is in the details (look at that cheeky <code class="inline">my.github_data</code> import), which I'll explain <a class="link-down" href="#data_sources">further</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="demo"><a class="headerlink" href="#demo">¶</a><span class="section-number-2">3</span> Demo: displaying Pocket data via Orger</h2>
<div class="outline-text-2" id="text-demo">
<p>
I've documented one of modules, <a href="https://github.com/karlicoss/orger/blob/master/modules/pocket_demo.py"><samp class="inline">pocket_demo</samp></a> so you could get the sense of using Orger.
</p>
<details><summary>Click to view the code</summary>
<div class="org-src-container">
<pre class="src src-python"><span class="org-comment-delimiter">#</span><span class="org-comment">!/usr/bin/env python3</span>
<span class="org-doc">"""</span>
<span class="org-doc">Demo Orger adapter for Pocket data. For documentation purposes, so please modify pocket.py if you want to contribute.</span>
<span class="org-doc">"""</span>

<span class="org-doc">"""</span>
<span class="org-doc">First we define some abstractions for Pocket entities (articles and highlights).</span>

<span class="org-doc">While it's not that necessary and for one script you can get away with using json directly,</span>
<span class="org-doc"> it does help to separate parsing and rendering, allows you to reuse parsing for other projects</span>
<span class="org-doc"> and generally makes everything clean.</span>

<span class="org-doc">Also see https://github.com/karlicoss/my package for some inspiration.</span>
<span class="org-doc">"""</span>


<span class="org-keyword">from</span> datetime <span class="org-keyword">import</span> datetime
<span class="org-keyword">from</span> pathlib <span class="org-keyword">import</span> Path
<span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Sequence, Any

<span class="org-keyword">class</span> <span class="org-type">Highlight</span>(NamedTuple):
    <span class="org-doc">"""</span>
<span class="org-doc">    Abstract representation of Pocket highlight</span>
<span class="org-doc">    """</span>
    json: Any

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">text</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'quote'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">created</span>(<span class="org-keyword">self</span>) -&gt; datetime:
        <span class="org-keyword">return</span> datetime.strptime(<span class="org-keyword">self</span>.json[<span class="org-string">'created_at'</span>], <span class="org-string">'%Y-%m-%d %H:%M:%S'</span>)


<span class="org-keyword">class</span> <span class="org-type">Article</span>(NamedTuple):
    <span class="org-doc">"""</span>
<span class="org-doc">    Abstract representation of Pocket saved page</span>
<span class="org-doc">    """</span>
    json: Any

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">url</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'given_url'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">title</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'given_title'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">pocket_link</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-string">'https://app.getpocket.com/read/'</span> + <span class="org-keyword">self</span>.json[<span class="org-string">'item_id'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">added</span>(<span class="org-keyword">self</span>) -&gt; datetime:
        <span class="org-keyword">return</span> datetime.fromtimestamp(<span class="org-builtin">int</span>(<span class="org-keyword">self</span>.json[<span class="org-string">'time_added'</span>]))

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">highlights</span>(<span class="org-keyword">self</span>) -&gt; Sequence[Highlight]:
        <span class="org-variable-name">raw</span> = <span class="org-keyword">self</span>.json.get(<span class="org-string">'annotations'</span>, [])
        <span class="org-keyword">return</span> <span class="org-builtin">list</span>(<span class="org-builtin">map</span>(Highlight, raw))

    <span class="org-comment-delimiter"># </span><span class="org-comment">TODO add tags?</span>


<span class="org-keyword">def</span> <span class="org-function-name">get_articles</span>(json_path: Path) -&gt; Sequence[Article]:
    <span class="org-doc">"""</span>
<span class="org-doc">    Parses Pocket export produced by https://github.com/karlicoss/pockexport</span>
<span class="org-doc">    """</span>
    <span class="org-keyword">import</span> json
    <span class="org-variable-name">raw</span> = json.loads(json_path.read_text())[<span class="org-string">'list'</span>]
    <span class="org-keyword">return</span> <span class="org-builtin">list</span>(<span class="org-builtin">map</span>(Article, raw.values()))

<span class="org-string">"""</span>
<span class="org-string">Ok, now we can get to implementing the adapter.</span>
<span class="org-string">"""</span>
<span class="org-keyword">from</span> orger <span class="org-keyword">import</span> StaticView
<span class="org-string">"""</span>
<span class="org-string">StaticView means it's meant to be read-only view onto data (as opposed to InteractiveView).</span>
<span class="org-string">"""</span>
<span class="org-keyword">from</span> orger.inorganic <span class="org-keyword">import</span> node, link
<span class="org-keyword">from</span> orger.common <span class="org-keyword">import</span> dt_heading


<span class="org-keyword">class</span> <span class="org-type">PocketView</span>(StaticView):
    <span class="org-keyword">def</span> <span class="org-function-name">get_items</span>(<span class="org-keyword">self</span>):
        <span class="org-doc">"""</span>
<span class="org-doc">        get_items returns a sequence/iterator of nodes</span>
<span class="org-doc">        see orger.inorganic.OrgNode to find out about attributes you can use</span>
<span class="org-doc">        """</span>
        <span class="org-variable-name">export_file</span> = <span class="org-keyword">self</span>.cmdline_args.<span class="org-builtin">file</span> <span class="org-comment-delimiter"># </span><span class="org-comment">see setup_parser</span>
        <span class="org-keyword">for</span> a <span class="org-keyword">in</span> get_articles(export_file):
            <span class="org-keyword">yield</span> node(
                heading=dt_heading(
                    a.added,
                    link(title=a.title, url=a.url)
                ),
                body=link(title=<span class="org-string">'Pocket link'</span>, url=a.pocket_link), <span class="org-comment-delimiter"># </span><span class="org-comment">permalink is pretty convenient to jump straight into Pocket app</span>
                children=[node( <span class="org-comment-delimiter"># </span><span class="org-comment">comments are displayed as org-mode child entries</span>
                    heading=dt_heading(hl.created, hl.text)
                ) <span class="org-keyword">for</span> hl <span class="org-keyword">in</span> a.highlights]
            )


<span class="org-keyword">def</span> <span class="org-function-name">setup_parser</span>(p):
    <span class="org-doc">"""</span>
<span class="org-doc">    Optional hooks for extra arguments if you need them in your adapter</span>
<span class="org-doc">    """</span>
    p.add_argument(<span class="org-string">'--file'</span>, <span class="org-builtin">type</span>=Path, <span class="org-builtin">help</span>=<span class="org-string">'JSON file from API export'</span>, required=<span class="org-constant">True</span>)


<span class="org-keyword">if</span> <span class="org-builtin">__name__</span> == <span class="org-string">'__main__'</span>:
    <span class="org-string">"""</span>
<span class="org-string">    Usage example: ./pocket.py --file /backups/pocket/last-backup.json --to /data/orger/pocket.org</span>
<span class="org-string">    """</span>
    PocketView.main(setup_parser=setup_parser)

<span class="org-string">"""</span>
<span class="org-string">Example pocket.org output:</span>

<span class="org-string"># AUTOGENERATED BY /L/zzz_syncthing/coding/orger/pocket.py</span>

<span class="org-string">* [2018-07-09 Mon 10:56] [[https://www.gwern.net/Complexity-vs-AI][Complexity no Bar to AI - Gwern.net]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1949330650][Pocket link]]</span>
<span class="org-string">* [2016-10-21 Fri 14:42] [[https://johncarlosbaez.wordpress.com/2016/09/09/struggles-with-the-continuum-part-2/][Struggles with the Continuum (Part 2) | Azimuth]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1407671000][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:25] [[http://www.scottaaronson.com/blog/?p=2464][Bell inequality violation finally done right]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1042711293][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:24] [[https://packetzoom.com/blog/how-to-test-your-app-in-different-network-conditions.html][How to test your app in different network conditions -]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1188624587][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:24] [[http://www.schibsted.pl/2016/02/hood-okhttps-cache/][What's under the hood of the OkHttp's cache?]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1191143185][Pocket link]]</span>
<span class="org-string">* [2016-03-15 Tue 17:27] [[http://joeduffyblog.com/2016/02/07/the-error-model/][Joe Duffy - The Error Model]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1187239791][Pocket link]]</span>
<span class="org-string">** [2019-09-25 Wed 18:20] A bug is a kind of error the programmer didn’t expect. Inputs weren’t validated correctly, logic was written wrong, or any host of problems have arisen.</span>
<span class="org-string">** [2019-09-25 Wed 18:19] First, throwing an exception is usually ridiculously expensive. This is almost always due to the gathering of a stack trace.</span>
<span class="org-string">** [2019-09-25 Wed 18:20] In other words, an exception, as with error codes, is just a different kind of return value!</span>
<span class="org-string">"""</span>
</pre>
</div>
</details>
<details><summary>Click to view the output</summary>
<div id="content">
<div class="outline-2" id="outline-container-org6385060">
<h2 id="org6385060"><a class="headerlink" href="#org6385060">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2018-07-09 Mon 10:56] </span></span> <a href="https://www.gwern.net/Complexity-vs-AI">Complexity no Bar to AI - Gwern.net</a></h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://app.getpocket.com/read/1949330650">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgf66ad5f">
<h2 id="orgf66ad5f"><a class="headerlink" href="#orgf66ad5f">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-10-21 Fri 14:42] </span></span> <a href="https://johncarlosbaez.wordpress.com/2016/09/09/struggles-with-the-continuum-part-2/">Struggles with the Continuum (Part 2) | Azimuth</a></h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://app.getpocket.com/read/1407671000">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orga907d2c">
<h2 id="orga907d2c"><a class="headerlink" href="#orga907d2c">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:25] </span></span> <a href="http://www.scottaaronson.com/blog/?p=2464">Bell inequality violation finally done right</a></h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://app.getpocket.com/read/1042711293">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgaa7b53a">
<h2 id="orgaa7b53a"><a class="headerlink" href="#orgaa7b53a">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:24] </span></span> <a href="https://packetzoom.com/blog/how-to-test-your-app-in-different-network-conditions.html">How to test your app in different network conditions -</a></h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="https://app.getpocket.com/read/1188624587">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org01f1d77">
<h2 id="org01f1d77"><a class="headerlink" href="#org01f1d77">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:24] </span></span> <a href="http://www.schibsted.pl/2016/02/hood-okhttps-cache/">What's under the hood of the OkHttp's cache?</a></h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="https://app.getpocket.com/read/1191143185">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgdd27fdd">
<h2 id="orgdd27fdd"><a class="headerlink" href="#orgdd27fdd">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-03-15 Tue 17:27] </span></span> <a href="http://joeduffyblog.com/2016/02/07/the-error-model/">Joe Duffy - The Error Model</a></h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://app.getpocket.com/read/1187239791">Pocket link</a>
</p>
</div>
<div class="outline-3" id="outline-container-org92bca32">
<h3 id="org92bca32"><a class="headerlink" href="#org92bca32">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:20] </span></span> A bug is a kind of error the programmer didn’t expect. Inputs weren’t validated correctly, logic was written wrong, or any host of problems have arisen.</h3>
</div>
<div class="outline-3" id="outline-container-org41ce646">
<h3 id="org41ce646"><a class="headerlink" href="#org41ce646">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:19] </span></span> First, throwing an exception is usually ridiculously expensive. This is almost always due to the gathering of a stack trace.</h3>
</div>
<div class="outline-3" id="outline-container-orge27b04d">
<h3 id="orge27b04d"><a class="headerlink" href="#orge27b04d">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:20] </span></span> In other words, an exception, as with error codes, is just a different kind of return value!</h3>
</div>
</div>
</div>
</details>
<p>
As you can see it's quite easy to search in your highlights and jump straight in the pocket app to the article you were reading.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="examples"><a class="headerlink" href="#examples">¶</a><span class="section-number-2">4</span> More examples</h2>
<div class="outline-text-2" id="text-examples">
<p>
I'm using more than ten different Orger modules, most of which I've moved into the <a href="https://github.com/karlicoss/orger/tree/master/modules">repository</a>. Here I'll describe some featured views I'm generating.
</p>
<p>
To give you a heads up, if you read the code, you'll see bunch of imports like <code class="inline">from my.hypothesis import ...</code>. 
I find it easier to move all data parsing in a separate <a href="https://github.com/karlicoss/my"><samp class="inline">my</samp></a> package, that deals with parsing and converting input data (typically, some JSON). 
That makes everything less messy, separates data and rendering and lets me reuse abstract models in other tools. 
Also that lets me access my data from any python code, which makes it way easier to use and interact with data.
</p>
<p>
Some of these are still private so if you're interested in something not present in the github repo, please don't be shy and open an issue, so I can prioritize.
</p>
<p>
Hopefully the code is readable enough and will give you some inspiration. 
If you find something confusing or you write your own module and want to contribute, please feel free to open issue/PR!
</p>
</div>
<div class="outline-3" id="outline-container-org0000003">
<h3 id="org0000003"><a class="headerlink" href="#org0000003">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/instapaper.py">instapaper</a></h3>
<div class="outline-text-3" id="text-org0000003">
<p>
Instapaper <a href="annotating.html#instapaper">doesn't have search</a> over annotations, so I implemented my own!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000004">
<h3 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/hypothesis.py">hypothesis</a></h3>
<div class="outline-text-3" id="text-org0000004">
<p>
<a href="https://hypothes.is">Hypothesis</a> does have search, but it's still way quicker for me to invoke search in Emacs (takes literally less than a second) than do that in web browser.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000005">
<h3 id="org0000005"><a class="headerlink" href="#org0000005">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/kobo.py">kobo</a></h3>
<div class="outline-text-3" id="text-org0000005">
<p>
Generates views for all highlights and comments along with book titles from my Kobo database export.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="org0000006"><a class="headerlink" href="#org0000006">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/pinboard.py">pinboard</a></h3>
<div class="outline-text-3" id="text-org0000006">
<p>
Searches over my Pinboard bookmarks.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="org0000007"><a class="headerlink" href="#org0000007">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/pdfs.py">pdfs</a></h3>
<div class="outline-text-3" id="text-org0000007">
<p>
Crawls my filesystem for PDF files and collects all highlights and comments in a single view.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="org0000008"><a class="headerlink" href="#org0000008">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/twitter.py">twitter</a></h3>
<div class="outline-text-3" id="text-org0000008">
<p>
It's got two modes
</p>
<ul class="org-ul">
<li>First mode generates a view of everything I've ever tweeted, so I can search over it.</li>
<li>Second mode generates a view of all older tweets from the previous years posted on the same day. I find it quite fascinating to read through it and observe how I've been changing over years.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="org0000009"><a class="headerlink" href="#org0000009">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/rtm2org.py">rtm2org</a></h3>
<div class="outline-text-3" id="text-org0000009">
<p>
I stopped using Remember The Milk a while ago, but there are still some tasks and notes I've left behind, which I'm slowly moving to org-mode or canceling over time.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="org000000a"><a class="headerlink" href="#org000000a">¶</a><a href="https://github.com/karlicoss/telegram2org">telegram2org</a></h3>
<div class="outline-text-3" id="text-org000000a">
<p>
Lets me create todo tasks from Telegram messages in couple of taps (you can't use share function on them in Android).
</p>
<p>
I write about it <a href="orger-todos.html#telegram2org">in the second part</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="org000000b"><a class="headerlink" href="#org000000b">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/reddit.py">reddit</a></h3>
<div class="outline-text-3" id="text-org000000b">
<p>
Displays and lets me search my Reddit saved posts/comments.
</p>
<p>
I write about it <a href="orger-todos.html#reddit">in the second part</a>.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000d">
<h2 id="why_hard"><a class="headerlink" href="#why_hard">¶</a><span class="section-number-2">5</span> It does sound very simple. Does that really deserve a post?</h2>
<div class="outline-text-2" id="text-why_hard">
<p>
Well yeah it really does seem simple… until you try to do it.
</p>
<ul class="org-ul">
<li><p>
emitting Org-mode
</p>
<p>
While it's plaintext, and generating simple outlines is trivial, with more sophisticated inputs, there is some nasty business of escaping and sanitizing that has to be dealt with.
I didn't manage to find any Python libraries capable of emitting Org-mode. Only project I knew of was <a href="https://github.com/bjonnh/PyOrgMode">PyOrgMode</a> but the author abandoned it.
</p>
<p>
When it comes to generating 10+ views from different data sources, you <b>really</b> want to make sure it's as little effort and minimal boilerplate as it can possibly be.
</p>
<p>
That's how <a href="https://github.com/karlicoss/inorganic">inorganic</a> library was born.
</p></li>
<li><p>
<a id="data_sources"></a>accessing data sources and exposing it through Python interfaces
</p>
<p>
This is probably where most of effort was spent. All sorts of stupid APIs, tedious parsing, you can imagine.
</p>
<p>
I'll write separately about it sometime, for now you can see some code I prettified and shared in my github <a href="https://github.com/search?q=topic%3Aexport+user%3Akarlicoss&amp;type=Repositories">'export'</a> and <a href="https://github.com/karlicoss/my">my</a> packages.
I tried to make sure they are easy to use for other people and not specific to my use cases.
</p></li>
<li><p>
keeping track of already processed items for <samp class="inline">Interactive</samp> views
</p>
<p>
Because there is no feedback from org-mode files back to data sources, you want to keep track of items already added in the file, otherwise you're gonna have duplicates.
</p>
<p>
It's not rocket science of course, but it is quite tedious. There is some additional logic that checks for lock files, makes sure writes are atomic, etc. You really don't want to implement it more than once.
I figured it was worth extracting this 'pattern' in a separate <a href="https://github.com/karlicoss/orger/blob/master/src/orger/state.py">python module</a>.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org000000e">
<h2 id="org000000e"><a class="headerlink" href="#org000000e">¶</a><span class="section-number-2">6</span> What makes Orger good?</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
it solves <a class="link-up" href="#motivation">my problems</a>! 
</p>
<p>
I won't go long into Org-mode propaganda, there are people that do it better than me out there, but for me it's good because it's a decent balance between ease of use and ease of augmenting.
</p>
<ul class="org-ul">
<li>it's easy to do unstructured (i.e. grep) or structured (i.e. tag search in emacs) search on any of your devices be it desktop or phone</li>
<li>you can open it anywhere you can open a text file</li>
<li>tasks as easy to create as any other Org outline so it can integrate with your todo list and agenda (see more in <a href="orger-todos.html">the second part</a>).</li>
</ul></li>
<li><p>
it doesn't require Emacs
</p>
<p>
If you're not willing to go full on Emacs, you can still benefit from this setup by using plaintext viewer and search tool of your choice.
</p></li>
<li><p>
written in Python. I don't claim at all that Python is the best programming language, but that's the one I'm most productive on as well as many other people.
</p>
<p>
Also the fact that it's a real programming language rather than some YAML config makes sure you can do anything and not restricted by stupid DSL.
</p></li>
<li>it's extremely easy to add new views — a matter of 10-20 lines of code.</li>
<li>agnostic to what you feed in it – it could be offline data from your regular backups, or it could be fresh API data. Again, it's a real programming language, you can do literally anything.</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000010">
<h2 id="using"><a class="headerlink" href="#using">¶</a><span class="section-number-2">7</span> Using Orger views</h2>
<div class="outline-text-2" id="text-using">
<p>
Apart from, obviously, opening org mode file in your favorite text editor, one major strength of this system is being able to effortlessly search over them. 
</p>
<p>
I'm writing extensively about my information search setup <a href="pkm-search.html#personal_information">here</a>. In summary:
</p>
<ul class="org-ul">
<li>on my desktop I'm just using spacemacs or <a href="https://github.com/karlicoss/cloudmacs">cloudmacs</a> from web browser</li>
<li>in Emacs, I'm usually just using <a href="https://github.com/syohex/emacs-helm-ag">helm-ag</a> with <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a></li>
<li>sometimes <a href="https://github.com/emacsorphanage/helm-swoop">helm-swoop</a> is very convenient</li>
<li><a href="https://orgmode.org/manual/Matching-tags-and-properties.html"><samp class="inline">org-tags-view</samp></a> or <a href="https://github.com/alphapapa/org-ql#helm-org-ql"><samp class="inline">helm-org-ql</samp></a> for structured Org-mode search</li>
<li>I've got hotkeys set up that invoke Emacs window with search prompt in a blink</li>
</ul>
<p>
On my phone I'm using:
</p>
<ul class="org-ul">
<li><a href="https://github.com/orgzly/orgzly-android">orglzy</a> for structured search/viewing Org-mode files</li>
<li><a href="https://play.google.com/store/apps/details?id=com.docsearch.pro">Docsearch +</a> for</li>
</ul>
<p>
You can also set up some proper indexing daemon like <a href="https://www.lesbonscomptes.com/recoll">recoll</a>.
</p>
</div>
<div class="outline-3" id="outline-container-org000000f">
<h3 id="usecases"><a class="headerlink" href="#usecases">¶</a>Typical use patterns</h3>
<div class="outline-text-3" id="text-usecases">
<p>
I'll just give some of my use cases:
</p>
<ul class="org-ul">
<li><p>
While running tests for <a href="https://github.com/karlicoss/orgparse">orgparse</a> I started randomly getting  <samp class="inline">AssertionError: Cannot find component 'A@3' for 'orgparse.A@3</samp>. 
</p>
<p>
I recall that I had same issue few month ago but don't quite remember what was the fix. 
I press <samp class="inline">F1</samp> which invokes <code class="inline">helm-ag</code> for me and type 'cannot find component'.
I instantly find a github <a href="https://github.com/python/mypy/issues/7281">issue</a> I opened in <samp class="inline">github.org</samp> and figure out what I need to do to work around the problem.
</p></li>
<li><p>
While discussing special relativity with a friend, I recall watching some intuitive rationale for Maxwell's equations, but don't quite recall what was the video.
</p>
<p>
I press <samp class="inline">F1</samp>, type 'Special relativity' and instantly get few results, in particular <a href="https://www.youtube.com/watch?v=1TKSfAkWWN0">this</a> awesome Veritasium video in <samp class="inline">youtube.org</samp>, which I was looking for.
</p></li>
<li><p>
Recommending books
</p>
<p>
I often struggle to recall the details why I liked a particular book, especially fiction.
Having all annotations in my <samp class="inline">kobo.org</samp> file lets me quickly look up and skim through highlighted bits, so I can freshen up my memory.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000015">
<h2 id="improvements"><a class="headerlink" href="#improvements">¶</a><span class="section-number-2">8</span> Potential improvements</h2>
<div class="outline-text-2" id="text-improvements">
</div>
<div class="outline-3" id="outline-container-org0000011">
<h3 id="org0000011"><a class="headerlink" href="#org0000011">¶</a><span class="todo TODO">TODO</span> more frequent, ideally realtime updates to views</h3>
<div class="outline-text-3" id="text-org0000011">
<p>
If the API doesn't provide push-based interface (as most of them), ultimately it's a question of polling them carefully to avoid rate limiting penalties.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="org0000012"><a class="headerlink" href="#org0000012">¶</a><span class="todo TODO">TODO</span> alternative export formats</h3>
<div class="outline-text-3" id="text-org0000012">
<p>
There is nothing really about Org-mode that's specific to this system. For instance, there are markdown-based organizers out there and people could benefit from using Orger for them.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="org0000013"><a class="headerlink" href="#org0000013">¶</a><span class="todo TODO">TODO</span> two-way data flow</h3>
<div class="outline-text-3" id="text-org0000013">
<p>
It would be cool to implement feedback from emacs, e.g. editing Github comment when you edit the corresponding Orger item. But it requires considerably more effort and would only work within emacs.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="org0000014"><a class="headerlink" href="#org0000014">¶</a><span class="todo TODO">TODO</span> potential for race condition</h3>
<div class="outline-text-3" id="text-org0000014">
<p>
Unfortunately there is a little space for race condition if Orger appends something while you're editing file. 
Orger tries to detect emacs and vim swap/lock files, but it's if you're very unlucky or using different setup it's still possible.
Hopefully your text editor warns you when the file had been overwritten while you were editing it (e.g. as emacs does).
</p>
<p>
Also, I run Orger jobs at night (via cron) so it's quite unlikely to overlap with editing anything.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000016">
<h2 id="similar"><a class="headerlink" href="#similar">¶</a><span class="section-number-2">9</span> Similar projects</h2>
<div class="outline-text-2" id="text-similar">
<ul class="org-ul">
<li><p>
<a href="https://github.com/novoid/Memacs">Memacs</a> by Karl Voit.
</p>
<p>
I only discovered it after I released Orger, so frankly haven't got to try it yet! It looks very similar in terms of goals and seems we can cooperate on rendering parts at least. 
</p>
<p>
One (as I see it) big advantage of my setup is that data providers are abstracted away in <code class="inline">my.</code> package, which makes everything more modular and resilient. However Memacs seems to be flexible as well, so it can be used with e.g. <code class="inline">my.</code> package as well.
</p>
<p>
If someone compares Memacs and Orger please let me know, I'd be happy to link it! It would also be more objective than comparison by myself!
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000017">
<h2 id="org0000017"><a class="headerlink" href="#org0000017">¶</a><span class="section-number-2">10</span> ----</h2>
<div class="outline-text-2" id="text-10">
<p>
I'd be interested in hearing your thoughts or feature requests.
</p>
<p>
This post ended up longer that I expected so in the next part I will tell about more use cases, in particular how I'm using Orger to process Reddit.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#orgmode">#orgmode</a> <a class="post-tag" href="./tags.html#orger">#orger</a></div>
        <!-- TODO post-date? -->
        <div class="date">26 September 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/da1sf0/orger_plaintext_reflection_of_your_digital_self">/r/orgmode</a></li>
    
        <li><a href="https://lobste.rs/s/rr9pxd/orger_plaintext_reflection_your_digital">lobste.rs</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_orger"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Thu, 26 Sep 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/orger.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>
<item>
    <title>Cloudmacs: Emacs in your web browser</title>
    <link>https://beepb00p.xyz/cloudmacs.html</link>
    <description><![CDATA[<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="emacs pkm selfhosted">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Cloudmacs: Emacs in your web browser | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <!-- TODO make conditional?? -->
        <link rel="stylesheet" href="./css/posts-list.css" /> 
        <link rel="stylesheet" href="./css/links.css?v=4" />

        

        <link rel="canonical" href="https://beepb00p.xyz/cloudmacs.html" />

        <!-- can test it with https://telegram.me/webpagebot -->
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://beepb00p.xyz/cloudmacs.html" /> <!-- TODO base? -->
        <meta property="og:title" content="Cloudmacs: Emacs in your web browser | beepb00p" />
        <meta property="og:description" content="How I really wanted Spacemacs everywhere and my wish came true thanks to Docker" />
        <!-- ugh. why is image necessary??? -->
        <meta property="og:image" content="notset" />

    </head>
    <body>
        <!-- TODO make semantic -->
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Cloudmacs: Emacs in your web browser</h1>
    <div class="summary">How I really wanted Spacemacs everywhere and my wish came true thanks to Docker</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
TLDR: I'm running my spacemacs as a web service on my VPS, <a href="https://github.com/karlicoss/cloudmacs">check it out too</a>.
</p>
<img src="https://user-images.githubusercontent.com/291333/64866462-26e25c80-d644-11e9-9ad5-ad9d9808b0cb.png" width="auto" />
<p>
Since I've became hooked on emacs, I've been looking for ways to have same experience in my browser.
Sometimes you have to use non-personal computers where it's not possible/undesirable to install desktop Emacs and Dropbox/Syncthing to access your personal data. 
So I've been looking for some cloud solution since I've got a VPS.
</p>
<p>
The closest tool to what I wanted was <a href="https://github.com/mickael-kerjean/filestash">Filestash</a>: it supports vim/emacs bindings and some <a href="https://www.filestash.app/2018/05/31/release-note-v0.1">org-mode goodies</a>.
However, it wasn't anywhere as convenient as  Emacs.
I'm also moving from Dropbox to Syncthing, so was planning to abandon Filestash anyway as it doesn't allow local files, only ftp or git.
(<b>UPD</b>: <a href="./cloudmacs.html#isso-36">author</a> mentions some planned support for Syncthing)
</p>
<p>
Dropbox is not capable of previewing arbitrary text files let alone edit; and even if it could you obviously wouldn't get anything close to your usual emacs workflow.
</p>
<p>
And you could imagine that while Emacs/Vim style editing is fairly application <a href="https://github.com/brookhong/Surfingkeys#vim-editor-and-emacs-editor">agnostic</a>, it's a thankless job to rewrite/port all the amazing emacs packages and features I'm used to like neotree, helm, refile, swoop, agenda, projectile, org-drill etc.
</p>
<p>
So I figured the only thing that would keep me happy is to run emacs itself over the web! Thankfully, due to its TUI interface that works surprisingly well.
</p>
<p>
It works <b><b>really</b></b> well with spacemacs/evil style <code class="inline">SPC</code> and comma bindings because they for the most part don't overlap with OS/browser hotkeys.
</p>
<p>
Also it's the first time I properly used Docker apart from running other people's containers so here are few non-obvious things I learnt which you might find useful:
</p>
<ul class="org-ul">
<li><a href="https://docs.docker.com/develop/develop-images/multistage-build">Multistage build</a> is a painless way to extend someone else's containers or combine several containers in one</li>
<li><a href="https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg">build time variables</a> is a nice way to make your container more amendable, e.g. you can avoid hardcoding versions if you use it</li>
<li><p>
Perhaps the trickiest one: docker reuses the host kernel and as a consequence same user IDs, so if you built your container as root (which is normally the case if you pull from Docker Hub), your container will write back to mounted volumes as root too!
</p>
<p>
To get around that there is a somewhat hacky <a href="https://github.com/karlicoss/cloudmacs/blob/master/asEnvUser">asEnvUser</a> script and custom <a href="https://github.com/karlicoss/cloudmacs/blob/master/compose">docker-compose wrapper</a> that take care of preserving user ID. 
</p></li>
</ul>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#emacs">#emacs</a> <a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#selfhosted">#selfhosted</a></div>
        <!-- TODO post-date? -->
        <div class="date">12 September 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://news.ycombinator.com/item?id=21633149"><b>hackernews</b></a></li>
    
        <li><a href="https://www.reddit.com/r/emacs/comments/e1o6dz/cloudmacs_emacs_in_your_web_browser">/r/emacs</a></li>
    
        <li><a href="https://www.reddit.com/r/selfhosted/comments/d38utu/cloudmacs_make_your_lovely_emacs_setup_accessible">/r/selfhosted</a></li>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/d3pm06/cloudmacs_work_with_your_orgmode_files_and_agenda">/r/orgmode</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_cloudmacs"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        

        <!-- TODO make semantic -->
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>

            <a href="http://creativecommons.org/licenses/by/4.0">CC BY 4.0</a>
            
            
        </footer>
    </body>
</html>
]]></description>
    <pubDate>Thu, 12 Sep 2019 00:00:00 UT</pubDate>
    <guid>https://beepb00p.xyz/cloudmacs.html</guid>
    <dc:creator>karlicoss</dc:creator>
</item>

    </channel>
</rss>
