<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Mildly entertaining</title>
    <link href="https://beepb00p.xyz/atom.xml" rel="self" />
    <link href="https://beepb00p.xyz" />
    <id>https://beepb00p.xyz/atom.xml</id>
    <author>
        <name>karlicoss</name>
        <email>karlicoss@gmail.com</email>
    </author>
    <updated>2019-11-01T00:00:00Z</updated>
    <entry>
    <title>Building personal search infrastructure for your knowledge and code</title>
    <link href="https://beepb00p.xyz/pkm-search.html" />
    <id>https://beepb00p.xyz/pkm-search.html</id>
    <published>2019-11-01T00:00:00Z</published>
    <updated>2019-11-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm search emacs orgmode">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Building personal search infrastructure for your knowledge and code | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Building personal search infrastructure for your knowledge and code</h1>
    <div class="summary">Overview of search tools for your computer and phone, demo of using Emacs and Ripgrep as desktop search engine</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#why">1. Why search?</a></li>
<li><a href="#what">2. What do I search?</a></li>
<li><a href="#personal_information">3. Searching in personal information</a>
<ul>
<li><a href="#org_mode">Org mode notes</a></li>
<li><a href="#other">Other plaintext, chats and social media</a></li>
</ul>
</li>
<li><a href="#recoll">4. Recoll</a></li>
<li><a href="#android">5. Searching on Android</a>
<ul>
<li><a href="#org0000009">Orgzly</a></li>
<li><a href="#org000000a">Docsearch +</a></li>
<li><a href="#recoll_web">Recoll Web</a></li>
</ul>
</li>
<li><a href="#web">6. Web search</a>
<ul>
<li><a href="#org000000d">Firefox enhancements</a></li>
<li><a href="#org000000e">Chrome enhancements</a></li>
</ul>
</li>
<li><a href="#code">7. Searching in code</a>
<ul>
<li><a href="#org0000010">Why?</a></li>
<li><a href="#org0000011">What do I want</a></li>
<li><a href="#org0000012">Existing code search tools</a></li>
<li><a href="#org0000014">Solution: use Emacs and Ripgrep</a></li>
</ul>
</li>
<li><a href="#appendix_cloudmacs">8. Appendix: searching away from computer</a></li>
<li><a href="#appendix_daemon">9. Appendix: Lightning fast Emacs</a>
<ul>
<li><a href="#org0000017">running daemon on startup</a></li>
</ul>
</li>
<li><a href="#appendix_emacs">10. Appending: general Emacs tips</a></li>
<li><a href="#future">11. Future and my holy grail of search</a></li>
<li><a href="#org000001b">12. --</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="why"><a class="headerlink" href="#why">¶</a><span class="section-number-2">1</span> Why search?</h2>
<div class="outline-text-2" id="text-why">
<div><span class="before-aside">
Having information in the digital form, collecting and writing notes is incredibly valuable.
Our brains are good at associations, pattern matching and creative thinking, not storing arrays of structured data, and external memory is one of the main thinking hacks computers aid us with. 
</span><aside>see <a class="post-tag" href="./tags.html#extendedmind">#extendedmind</a></aside></div>
<p>
However this information is not so useful if you can't access and search it quickly.
Instant search changes the way you think. Ever got sense of flow while working through some problem, and trying different things from Stackoverflow or documentation?
</p>
<p>
These days, if you have decent connection, you are seconds away from finding almost any public knowledge in the internet.
However, there is another aspect of information: personal and specific to <i>your</i> needs, work and hobbies.
It's <i>your</i> todo list, <i>your</i> private notes, books <i>you</i> are reading. Of course, it's not that well integrated with the outside world, hence the tooling and experience of interacting with it is very different.
</p>
<p>
Some examples:
</p>
<ul class="org-ul">
<li><div><span class="before-aside">
To find something from <i>my</i> Messenger history with a friend, I need to be online, open Facebook, navigate to search and use the interface Facebook's employees thought convenient (spoiler: it sucks) 
</span><aside><a class="post-tag" href="./tags.html#offline">#offline</a></aside></div>
<p>
It's <i>my</i> information, something that came out from my brain. Why can't I have it available anywhere, anytime, presented the way I prefer?
</p></li>
<li><p>
To find something in <i>my</i> Kobo ebook, I need to reach my device physically and type the query using the virtual keyboard (yep, e-ink lag!). Not a very pleasant experience.
</p>
<p>
It's something <i>I</i> own and have read. Why does it have to be so hard?
</p></li>
</ul>
<p>
Such things are pretty frustrating to me, so I've been working on making them easier. Search has to be <a href="https://en.wikipedia.org/wiki/Incremental_search">incremental</a>, fast and as convenient to use as possible.
I'll be sharing some of workflows, tricks and thoughts in this post.
</p>
<p>
The post is geared towards using Emacs and Org-mode, but hopefully you'll find some useful tricks for your current tools and workflow even if you don't.
There is (almost) nothing inherently special about Emacs, I'm sure you can achieve similar workflows in other modern text editors given they are flexible enough.
</p>
<p>
Note: throughout the post I will link to my <a href="https://github.com/karlicoss/dotfiles-emacs">emacs config</a> snippets. 
To prevent code references from staling, I use permalinks, but check master branch as well in case of patches or more comments in code.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="what"><a class="headerlink" href="#what">¶</a><span class="section-number-2">2</span> What do I search?</h2>
<div class="outline-text-2" id="text-what">
<p>
I'll write about searching in
</p>
<ul class="org-ul">
<li>my personal notes, tasks and knowledge repository (this blog included)</li>
<li>all digital trace I'm leaving (tweets, internet comments, annotations)</li>
<li>chat logs with people</li>
<li>books and papers I'm reading</li>
<li>code that I'm working on</li>
<li>information on the Internet (duh!)</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000007">
<h2 id="personal_information"><a class="headerlink" href="#personal_information">¶</a><span class="section-number-2">3</span> Searching in personal information</h2>
<div class="outline-text-2" id="text-personal_information">
<p>
By personal information I refer to things like todo list, personal wiki or whatever you use to store information relevant to your life.
</p>
</div>
<div class="outline-3" id="outline-container-org0000003">
<h3 id="org_mode"><a class="headerlink" href="#org_mode">¶</a>Org mode notes</h3>
<div class="outline-text-3" id="text-org_mode">
<p>
For the most part, I keep things in Org mode, and I use Emacs to work with it. Apart from regular means of plaintext search (I'll write about it <a href="#other">later</a>), for me it's important to search over tags:
</p>
<ul class="org-ul">
<li><a href="https://orgmode.org/manual/Matching-tags-and-properties.html"><code class="inline">org-tags-view</code></a> is available by default and an easy way to run simple tag searches</li>
<li><p>
<a href="https://github.com/alphapapa/org-ql#screenshots">org-ql</a>
</p>
<p>
It's a relatively new package, with new query syntax as the main feature, which is much easier to use and remember than builtin Org query syntax: <a href="https://github.com/alphapapa/org-ql#comparison-with-org-agenda-searches">comparison</a>.
</p>
<p>
I mainly use these commands:
</p>
<ul class="org-ul">
<li><a href="https://github.com/alphapapa/org-ql#helm-org-ql"><code class="inline">helm-org-ql</code></a> for <b>incremental</b> search in the current buffer</li>
<li><a href="https://github.com/alphapapa/org-ql#org-ql-search"><code class="inline">org-ql-search</code></a> <b>interactively</b> prompts you for the search target, sort and grouping</li>
</ul></li>
</ul>
<p>
Another notable mention is <a href="https://github.com/alphapapa/org-rifle#screenshots">org-rifle</a>, which is an entry based search, presenting headings along with the matched content in Helm buffer.
However as the author <a href="https://github.com/alphapapa/org-rifle/issues/42#issuecomment-544114082">mentioned</a> it might be obsoleted by org-ql soon. 
</p>
<p>
Here are some typical workflows with my org-mode:
</p>
<ul class="org-ul">
<li><p>
<a id="org0000002"></a> tags for friends
</p>
<p>
I see an interesting article or think of something which would be good to share with a friend, but at the moment it's not quite a good time to send it.  I can just capture it and attach a tag (e.g. <samp class="inline">ann</samp> or <samp class="inline">jeremy</samp>). That way next time we chat I can just look up things under their tag and send them.
</p>
<p>
It works the other way around as well: imagine they sent me a link or asked me to do something, but I can't do it immediately. I have a special script that converts chat messages into todo items and automatically attaches the corresponding tag. I write more about it <a href="./orger-todos.html#telegram2org">here</a>.
</p></li>
<li><p>
assembling blog posts
</p>
<p>
Unfortunately, I can't just sit and write comprehensible texts without preparation.
Typically I have thoughts on the topic now and then, which I just note down and mark with the tag.
When I feel it's time to prepare the post, I can just search by the tag (e.g. <code class="inline">tags:search</code> for this post), and refile the items into the file with the post draft.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="other"><a class="headerlink" href="#other">¶</a>Other plaintext, chats and social media</h3>
<div class="outline-text-3" id="text-other">
<p>
As I mentioned, I find having to switch to the browser, wait till the website loads and cope with crappy search implementations very distracting and frustrating.
</p>
<p>
What is more, often you don't even remember whether exactly you were discussing something: on Telegram or Facebook or Reddit? So having a single point of entry to your information and unified search over all of your stuff is extremely helpful.
</p>
<p>
For instant messaging, I'm using plaintext mirrors, so chat history is always available in plaintext on my computers:
</p>
<ul class="org-ul">
<li><a href="https://github.com/karlicoss/telegram-backup-to-txt">Telegram messages</a>
Didn't bother with org-mode because files would be too huge and there isn't much structure anyway.</li>
<li><a href="https://github.com/Totktonada/vk_messages_backup">Vkontakte messages</a>
Sadly export tool stopped working because of API restrictions, but I'm not using VK much anymore either. At least I got historic messages.</li>
</ul>
<p>
Most services where I can comment, write or leave annotation, I'm mirroring as org-mode.
I write about it in detail here: <a href="./orger.html">part I</a>, <a href="./orger-todos.html">part II</a>.
</p>
<p>
That gives me source data for a search engine over anything I've ever:
</p>
<ul class="org-ul">
<li>tweeted</li>
<li>bookmarked on Pinboard</li>
<li>highlighted in Instapaper or Kobo</li>
<li>saved or upvoted on Reddit</li>
<li>etc., etc.</li>
</ul>
<p>
All these files are either non-Org or somewhat heavy for structured Org-mode search. In addition, I have many old files from my pre-orgmode era when I was using Gitit or Zim.
</p>
<p>
To search over them, I'm using Emacs and Ripgrep (you can read why <a href="#org0000004">later</a>):
</p>
<p>
<a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L130-L134"><code class="inline">my/search</code></a>
runs ripgrep against <code class="inline">my/search-targets</code> variable contains paths to notes, chat logs, Orger outputs etc.
</p>
<p>
The interesting bit about <code class="inline">my/search</code> is <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L87-L127"><code class="inline">--my/one-off-helm-follow-mode</code></a> call. It's a somewhat horrible hack that  automatically enables helm-follow mode so you don't have to press <code class="inline">C-c C-f</code> every time you invoke helm.
</p>
<p>
Finally, to make sure I can invoke search in an instance, I'm using a <a href="#org0000005">global keybinding</a>.
</p>
<p>
Here's a <b>demo</b> <a href="https://file.globalupload.io/wu7HYYyJaY.gif">gif (5Mb)</a> of using this to search 'greg egan' in my knowledge repository.
You can see that as a result, I'm getting my Kobo highlights (<samp class="inline">kobo.org</samp>), my reading list (<samp class="inline">read.org</samp>) and even some video (<samp class="inline">youtube.org</samp>)!
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000008">
<h2 id="recoll"><a class="headerlink" href="#recoll">¶</a><span class="section-number-2">4</span> Recoll</h2>
<div class="outline-text-2" id="text-recoll">
<p>
Recoll is an indexer that runs as daemon (or a regular cron job) and a full text search tool.
</p>
<p>
It supports many <a href="https://www.lesbonscomptes.com/recoll/features.html">formats and other features</a>, so I suggest checking them out for yourself.
</p>
<p>
Even though I index all my documents, I find it quicker to run grep I described above to search in plaintext. 
So for me, Recoll is mostly for searching and quickly jumping to results in <b>PDFs and EPUBs</b> (see <a href="https://www.lesbonscomptes.com/recoll/pics/recoll-pdf-snippets.html">screenshot</a>).
</p>
<p>
There is <a href="https://github.com/emacs-helm/helm-recoll">helm-recoll</a> Emacs module, but I found it a bit awkward to use, and Recoll GUI feels significantly superior.
Basically only thing helm-recoll does is presenting you list of filenames that match your query.
It feels that it should be straightforward to modify the module and integrate abstract, snippets and other things you can query Recoll for.
</p>
<p>
Considering I don't need use Recoll it too often, I just gave up on helm-recoll and using GUI.
</p>
<p>
I'm also running a <a href="https://github.com/koniu/recoll-webui">Web UI</a> on my VPS, so I can use it from my phone, or potentially from other computers.
</p>
<p>
Recoll's distinguishing features are proper <a href="https://www.lesbonscomptes.com/recoll/usermanual/webhelp/docs/RCL.SEARCH.LANG.html">search query language</a>
and <a href="https://www.lesbonscomptes.com/recoll/usermanual/webhelp/docs/RCL.INDEXING.MONITOR.html">realtime, inotify based indexing</a>.
I don't have that much data yet to benefit massively from proper search queries, but I can see that it could be potentially useful in future as amount of personal data grows.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="android"><a class="headerlink" href="#android">¶</a><span class="section-number-2">5</span> Searching on Android</h2>
<div class="outline-text-2" id="text-android">
<p>
Most of my notes and knowledge repository are plaintext, so it is easily and continuously shared on my phone via Dropbox/Syncthing.
</p>
<p>
Since using Emacs on Android is hardly a meaningful experience, I'm working around it by using other apps.
</p>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="org0000009"><a class="headerlink" href="#org0000009">¶</a><a href="https://github.com/orgzly/orgzly-android">Orgzly</a></h3>
<div class="outline-text-3" id="text-org0000009">
<p>
I can't recommend it enough, it's got many things done right, very fast and the code is extremely readable and well tested so it's easy to contribute.
</p>
<p>
It has its own small <a href="http://www.orgzly.com/help#search">query language</a> (at the time <a href="https://github.com/alphapapa/org-ql">org-ql</a> didn't exist).
</p>
<p>
You can save <a href="https://lh3.googleusercontent.com/FweBE2T3T3wZwJC64DQgtGj8vv8jKPBGTClnRAApSOHdKq4hiFdpq_JjEBPsMj_nTDA=w2560-h1295">search queries</a>, which ends up being pretty similar to custom Org-mode <b><b>agendas</b></b>.
Searches can be displayed as persistent widgets, e.g. I find convenient to have a phone screen dedicated to 'Buy' search (<code class="inline">t.buy</code> query) or 'Do at work' search (<code class="inline">t.@work</code> query).
</p>
<p>
As I described <a href="#org0000002">above</a>, I keep few saved search queries for some friends so I can recall what I wanted to discuss with them.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="org000000a"><a class="headerlink" href="#org000000a">¶</a><a href="https://play.google.com/store/apps/details?id=com.docsearch.pro">Docsearch +</a></h3>
<div class="outline-text-3" id="text-org000000a">
<p>
Docsearch is a not very well-known (e.g. zero search results on Reddit or Twitter), but I don't know any alternatives for it.
</p>
<p>
It's a fulltext indexing and search app for plaintext files, but apparently it even supports EPUBs and PDFs.
<a href="https://lh3.googleusercontent.com/psPhmFoawEzwZQpwBGgVz42ojnR-uAi70Li4DBc4Z13wLOTannvT2suaxZQA9YX_Bg=w2560-h1295">Here's</a> how matches list looks. Screenshots on Google Play give a pretty good idea what the app does.
</p>
<p>
I find it convenient for quick search over things that are not imported in Orgzly, e.g. <samp class="inline">.txt</samp> chat logs (Telegram, VK) and huge org-mode files
I described <a href="#other">above</a>.
</p>
<p>
It's a bit backwards in terms of UI (even though I like that it's compact and functional), but main downside is it's not opensource.
I'd be extremely happy to replace this with some open source application, so please let me know if you know one!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="recoll_web"><a class="headerlink" href="#recoll_web">¶</a>Recoll Web</h3>
<div class="outline-text-3" id="text-recoll_web">
<p>
On the rare occasions when I need to search in pdfs or books (which I don't sync on my phone) , I just use Recoll <a href="https://github.com/koniu/recoll-webui">Web UI</a> that I'm selfhosting.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000f">
<h2 id="web"><a class="headerlink" href="#web">¶</a><span class="section-number-2">6</span> Web search</h2>
<div class="outline-text-2" id="text-web">
<p>
If you're reading this at all, chances you're quite good at using web search already. <a href="https://www.gwern.net/Search#search">Gwern</a> got a good writeup on the subject.
</p>
<p>
Knowing how to compose a search query is one thing, but navigating to the service, waiting till it loads, moving to searchbox takes precious time. Many people forget about <a href="https://www.howtogeek.com/114176/how-to-easily-create-search-plugins-add-any-search-engine-to-your-browser">custom search engines</a>. Here are ones I'm using:
</p>
<table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups">
<colgroup>
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">g</td>
<td class="org-left">Google</td>
<td class="org-left"><samp class="inline">https://www.google.com/complete/search?client=firefox&amp;q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">d</td>
<td class="org-left">DuckDuckGo</td>
<td class="org-left"><samp class="inline">https://duckduckgo.com/?q={searchTerms}&amp;t=canonical</samp></td>
</tr>
<tr>
<td class="org-left">r</td>
<td class="org-left">Reddit</td>
<td class="org-left"><samp class="inline">https://www.reddit.com/search?q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">gh</td>
<td class="org-left">GitHub</td>
<td class="org-left"><samp class="inline">https://github.com/search?q={searchTerms}&amp;ref=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">pin</td>
<td class="org-left">Pinboard: search all</td>
<td class="org-left"><samp class="inline">https://pinboard.in/search/?query={searchTerms}r&amp;all=Search+All</samp></td>
</tr>
<tr>
<td class="org-left">tw</td>
<td class="org-left">Twitter</td>
<td class="org-left"><samp class="inline">https://twitter.com/search</samp></td>
</tr>
<tr>
<td class="org-left">y</td>
<td class="org-left">YouTube</td>
<td class="org-left"><samp class="inline">https://www.youtube.com/results?search_query={searchTerms}&amp;page={startPage?}&amp;utm_source=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">m</td>
<td class="org-left">Google Maps</td>
<td class="org-left"><samp class="inline">https://www.google.com/maps/search/{searchTerms}?hl=en&amp;source=opensearch</samp></td>
</tr>
<tr>
<td class="org-left">w</td>
<td class="org-left">Wikipedia (en)</td>
<td class="org-left"><samp class="inline">https://en.wikipedia.org/wiki/Special:Search</samp></td>
</tr>
<tr>
<td class="org-left">cpp</td>
<td class="org-left">Cppreference</td>
<td class="org-left"><samp class="inline">https://en.cppreference.com/mwiki/index.php?search={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">js</td>
<td class="org-left">MDN</td>
<td class="org-left"><samp class="inline">https://developer.mozilla.org/en-US/search?q={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">eb</td>
<td class="org-left">Ebay</td>
<td class="org-left"><samp class="inline">https://www.ebay.co.uk/sch/i.html?_nkw={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">am</td>
<td class="org-left">Amazon.co.uk</td>
<td class="org-left"><samp class="inline">https://www.amazon.co.uk/exec/obidos/external-search/</samp></td>
</tr>
<tr>
<td class="org-left">tru</td>
<td class="org-left">Translate en-ru</td>
<td class="org-left"><samp class="inline">https://translate.google.com/#view=home&amp;op=translate&amp;sl=en&amp;tl=ru&amp;text={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">tde</td>
<td class="org-left">Translate en-de</td>
<td class="org-left"><samp class="inline">https://translate.google.com/#view=home&amp;op=translate&amp;sl=en&amp;tl=de&amp;text={searchTerms}</samp></td>
</tr>
<tr>
<td class="org-left">dd</td>
<td class="org-left">DevDocs</td>
<td class="org-left"><samp class="inline">https://devdocs.io/#q={searchTerms}</samp></td>
</tr>
</tbody>
</table>
<p>
Some of these obvious, some deserve separate mention:
</p>
<ul class="org-ul">
<li><p>
reddit contains vast amounts of (somewhat curated) human knowledge
</p>
<p>
Google search often gives dubious and not very meaningful results on certain topics (e.g. product reviews, exercise, dieting).
On reddit, you'd at least find real people sharing their <b>honest and real opinions</b>.
Chances are that if a link is good, you would find it on  on reddit anyway.
</p></li>
<li><p>
twitter is similar: there is certainly more spam there, but sometimes it's interesting to type a link or blog post title in twitter search to see how <b>real people reacted</b>. 
</p>
<p>
That has limited utility, e.g. doesn't work with politicized content, but if the topic of interest is rare, could be very useful.
</p></li>
<li><a href="https://pinboard.in">pinboard</a> is an awesome source of curated content as well</li>
</ul>
<p>
Next, I find it very convenient to have some code documentation available locally.
First, it helps when you're on wonky internet or just offline for whatever reason.
Second, it's feels <b>really fast</b>, even if you're on fiber.
</p>
<p>
Here's what I'm using for that:
</p>
<table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups">
<colgroup>
<col class="org-left" />
<col class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">py</td>
<td class="org-left"><samp class="inline">file:///usr/share/doc/python3/html/search.html?q=%s</samp></td>
</tr>
<tr>
<td class="org-left">rust</td>
<td class="org-left"><samp class="inline">file:///home/karlicos/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/share/doc/rust/html/std/option/index.html?search=%s</samp></td>
</tr>
</tbody>
</table>
<p>
Sadly, the extension mentioned above doesn't work with <samp class="inline">file://</samp> schema for some reason, so to add it in Firefox,
you can use the method described <a href="https://superuser.com/a/7336/300795">here</a>, it's as easy as adding a bookmark.
</p>
<p>
Recently I ran into <a href="https://devdocs.io/offline">devdocs.io</a>, it's using your browser's <b>offline</b> storage to cache the documentation.
I'm still getting used to it, but it's amazing how faster it is than jumping to documentation online. You can use it with multiple languages, you just type the search engine prefix first, and then language prefix (e.g. <code class="inline">dd cpp emplace_back</code>).
</p>
<p>
Finally, it may be convenient to set up <a href="https://github.com/hrs/engine-mode">engine-mode</a> in Emacs, or <a href="https://github.com/syl20bnr/spacemacs/tree/master/layers/+web-services/search-engine">search-engine layer</a> in Spacemacs. It lets you invoke a browser search directly from Emacs (e.g. <code class="inline">SPC s G</code> to do google search). I find it convenient when I need to search many things in bulk.
</p>
</div>
<div class="outline-3" id="outline-container-org000000d">
<h3 id="org000000d"><a class="headerlink" href="#org000000d">¶</a>Firefox enhancements</h3>
<div class="outline-text-3" id="text-org000000d">
<p>
I find it convenient to enable <a href="https://www.ghacks.net/2016/06/11/firefox-page-search-improvements">'highlight all'</a> for search within a page.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000e">
<h3 id="org000000e"><a class="headerlink" href="#org000000e">¶</a>Chrome enhancements</h3>
<div class="outline-text-3" id="text-org000000e">
<p>
When I used Chrome, one thing that annoyed me was that it populates search engines automatically, and <a href="https://support.google.com/chrome/forum/AAAAP1KN0B0DOS1J_u6N8I">there is not way to disable it</a>.
</p>
<p>
There is a nice open source <a href="https://chrome.google.com/webstore/detail/dont-add-custom-search-en/dnodlcololidkjgbpeoleabmkocdhacc">extension</a> that prevents Chrome from doing it.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000015">
<h2 id="code"><a class="headerlink" href="#code">¶</a><span class="section-number-2">7</span> Searching in code</h2>
<div class="outline-text-2" id="text-code">
<p>
TLDR: I tried different existing code search tools, was disappointed and ended up using Emacs + Ripgrep.  
</p>
</div>
<div class="outline-3" id="outline-container-org0000010">
<h3 id="org0000010"><a class="headerlink" href="#org0000010">¶</a>Why?</h3>
<div class="outline-text-3" id="text-org0000010">
<p>
I've got lots of personal projects, experiments, data processing and backup scripts on my computer.
I also tend to create a git repository at a slightest opportunity primarily as a means of code backup/rollback and progress tracking, but often it results in actual projects, so I would need a repository anyway.
Naturally, these repositories end up scattered across the whole filesystem, making it tricky to remember where I've put the code or that it even existed in the first place.
</p>
<p>
It's very convenient to have some sort of code search engine if you're in a similar situation to mine for multiple reasons:
</p>
<ul class="org-ul">
<li><p>
Doing potentially breaking code changes
</p>
<p>
For instance, I want to remove some unused function or refactor something in <a href="https://github.com/karlicoss/my"><code class="inline">my</code></a> package, which is a Python library to access my personal data.
It's used in lots of scripts or dashboards that run in Cron every day.
</p>
<p>
I could just go for it, remove the function and hope nothing fails, but if it does then I'd have to deal with fixing it again.
It's frustrating and I'd rather search for function usages in all of my code and make sure it's actually safe to remove.
</p></li>
<li><p>
Reusing code snippets and tricks
</p>
<p>
When you're getting familiar to some new library or framework, you often end up googling how to solve problems twice.
Sometimes you remember solving the problem you've already had, but don't quite recall where. 
</p>
<p>
For instance for me, such library is <a href="https://docs.sqlalchemy.org/en/13/core">Sqlalchemy</a>.
It's very convenient for handling databases, but I only need it infrequently, so can never remember how to work with it.
Reading documentation all over again is not very helpful because I've got very few usecases and queries that are specific to my purposes.
</p>
<p>
If I can search for <code class="inline">sqlalchemy</code> in my code, it shows every repository where I used it so I can quickly copy bit of code I'm interested at.
</p></li>
<li><p>
Forgotten code
</p>
<p>
It happens that I remember writing code for some purpose, but don't quite recall where I put it.
Even if you keep all your repos in the same location, you might forget how you named it.
</p>
<p>
Full text search, however, allows to find it if you remember some comments or class/function names.
</p></li>
<li><p>
Help and documentation
</p>
<p>
However good is library's documentation, sometimes it just isn't covering your typical needs. If you're a power user, docs are almost never enough and you end up reading the code to bend the library into doing what you want.
</p>
<p>
For me such libraries are <a href="https://code.orgmode.org/bzg/org-mode">Org mode</a> or <a href="https://github.com/jaspervdj/hakyll">Hakyll</a>, so I often had to search in their code on Github.
Searching on Github however is quite awkward. It's slow, it's not incremental and lacks navigation.
</p>
<p>
If I have a local clone of the repository on my disk, I can search over it in an instant (without having it opened in the first place) and use familiar tools (e.g. IDE) for navigation.
</p></li>
</ul>
<p>
At the time, I was just using recursive <code class="inline">grep</code> and then opening some of results in vim to refine.
That's a pretty pathetic workflow. 
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000011">
<h3 id="org0000011"><a class="headerlink" href="#org0000011">¶</a>What do I want</h3>
<div class="outline-text-3" id="text-org0000011">
<p>
My ideal code search tool would:
</p>
<ul class="org-ul">
<li><p>
run against code on my filesystem
</p>
<p>
Just any source files, so it wouldn't have to fetch repositories from Github and keep them somewhere separately.
</p></li>
<li><p>
realtime indexing 
</p>
<p>
Ideally, inotify-based, but any means of refreshing search index without having to commit first would be nice.
</p></li>
<li>semantic search in definitions/variables etc with fallback to simple search if the language isn't supported</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="org0000012"><a class="headerlink" href="#org0000012">¶</a>Existing code search tools</h3>
<div class="outline-text-3" id="text-org0000012">
<p>
So, I wanted some code search and indexing tool that could watch over all the source file on my filesystem and let me search through them.
</p>
<p>
It sounds as a fairly straightforward wish, but to my surprise, none of existing projects I found and tried do the job:
</p>
<ul class="org-ul">
<li><p>
<a href="https://github.com/sourcegraph/sourcegraph">Sourcegraph</a>
</p>
<p>
Lets you index Github/Bitbucket/Gitlab repos etc, but the process for adding local repositories <a href="https://docs.sourcegraph.com/admin/repo/add_from_local_disk">is extremely tedious</a>.
Also apparently, it clones repositories first so it's not exactly realtime indexing.
</p>
<p>
Overall, I feel that it only makes sense for companies that use few monorepos.
</p></li>
<li><a href="https://oracle.github.io/opengrok">OpenGrok</a>: <a href="https://github.com/oracle/opengrok/wiki/How-to-setup-OpenGrok">setup</a> looks extremely heavy, doesn't support realtime search in arbitrary paths</li>
<li><a href="https://github.com/hound-search/hound">Hound</a>: <a href="https://github.com/hound-search/hound/issues/83">doesn't support</a> recursive repository discovery.</li>
<li><a href="https://github.com/google/zoekt">zoekt</a>: manual is pretty confusing and also looks tailored for huge standalone repos</li>
<li><a href="https://livegrep.com">Livegrep</a>: tailored to huge monorepos (see <a href="https://news.ycombinator.com/item?id=3869880">HN discussion</a>)</li>
</ul>
<p>
As you can see, none of these are convenient for searching in personal code.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="org0000014"><a class="headerlink" href="#org0000014">¶</a>Solution: use Emacs and Ripgrep</h3>
<div class="outline-text-3" id="text-org0000014">
<p>
Disappointed, I figured that least I could do is at somehow improve my workflow with grep.
</p>
<p>
So, what are the problems with using <code class="inline">grep</code>?
</p>
<ul class="org-ul">
<li>running it against all of code results in false positives. <samp class="inline">node_modules</samp>, minified javascript, etc., you name it
<ul class="org-ul">
<li>you probably want to at least ignore anything that's ignored by <code class="inline">.gitignore</code></li>
</ul></li>
<li>getting bunch of output lines in terminal is not interactive
<ul class="org-ul">
<li>you have to repeat the command to refine the results</li>
<li>you can't quickly navigate to the result, check it and go back</li>
</ul></li>
<li>running it recursively against your filesystem root is ridiculously slow, even if you use an SSD
<ul class="org-ul">
<li>you probably want to restrict your search to directories that look like a project (e.g. repositories), and again, exclude files ignored by version control</li>
</ul></li>
</ul>
<p>
<a id="org0000004"></a>
As it turns out, <code class="inline">ripgrep</code> is the tool!
</p>
<ul class="org-ul">
<li>respects <code class="inline">.gitignore</code> files, so by maintaining <code class="inline">.gitignore</code> properly (e.g. adding <samp class="inline">node_modules/venv</samp> etc) you can make sure you only get <b>meaningful matches</b> when searching for code.</li>
<li>respects <code class="inline">.ignore</code> files. Sometimes code has to be under version control, but you don't want it to show up in search (e.g. could happen if you have vendorized code or minified javascript or static html files).
In that case you can use <code class="inline">.ignore</code> files with the same syntax to exclude certain patterns from ripgrep's reach without messing with <code class="inline">.gitignore</code>.</li>
<li>it's <b>very</b> fast, both by <a href="https://github.com/BurntSushi/ripgrep#quick-examples-comparing-tools">benchmarks</a> and subjective experiments. You can read more comprehensive benchmarks <a href="https://blog.burntsushi.net/ripgrep/#code-search-benchmarks">here</a>.</li>
</ul>
<p>
If you just use ripgrep instead of grep, code search becomes magnitude more pleasant, but it's still not interactive. Long story short, we can use <code class="inline">helm</code> in Emacs to achieve <b>interactivity</b> and incremental search.
</p>
<p>
The only thing that's left is restricting the search to git repositories only.
Ripgrep relies on regexes, so we can't do something like Xpath queries and tell it to only search in directories, that contain <code class="inline">.git</code> directory. I ended up using a two step approach:
</p>
<ul class="org-ul">
<li><p>
first, <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L75-L83"><code class="inline">my/code-targets</code></a> returns all git repositories it can reach from <code class="inline">my/git-repos-search-root</code>.
</p>
<p>
I'm using <a href="https://github.com/sharkdp/fd"><code class="inline">fd</code></a> to go through the disk and collect all candidate git repositories.
</p>
<p>
Even though fd is already ridiculously <a href="https://github.com/sharkdp/fd#benchmark">fast</a>, this step still takes some time, so I'm caching the repositories. Cache is refreshed in the background every five minutes so we don't have to crawl the filesystem every time. That saves me few seconds on every search.
</p></li>
</ul>
<ul class="org-ul">
<li>then, <a href="https://github.com/karlicoss/dotfiles-emacs/blob/4ea7a8deb48403cea712f1bd48b553b465da05f4/.spacemacs.d/config.el#L136-L140"><code class="inline">my/search-code</code></a> keybindings invokes <code class="inline">ripgrep</code> against all my directories with code, defined in <code class="inline">my/code-targets</code> function.</li>
</ul>
<p>
So, literally running grep against my code turned out to be a pretty good solution. I've got about 350 repositories and it works in a blink. Note, however, that I'm using SSD.
</p>
<p>
Ripgrep searches in real files on my disk, so any changes are reflected <b>immediately</b>, which removes the need for indexing (apart from performance concerns).
It would still be nice to avoid unnecessary disk operations, and of course, semantic search would be great, and that is definitely going to require some sort of indexer.
</p>
<p>
I've got a <a href="#org0000013">global keybinding</a> to invoke Emacs with a prompt to search in code, so I can do in in a blink.
</p>
<p>
Here's a <a href="https://file.globalupload.io/onCac7sh9M.gif">gif (3.5 Mb)</a> showing it <b>in action</b>: say, I am working on testing a browser extension, and need to interact with in via hotkeys. I remember using <code class="inline">pyautogui</code> for automating <a href="https://github.com/karlicoss/grasp">Grasp</a> tests, but I forgot which function I actually need to use. Searching for 'pyautogui' brings me all the repositories where I'm using it and lets me quickly find out the command I need without having to read the documentation all over again.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000016">
<h2 id="appendix_cloudmacs"><a class="headerlink" href="#appendix_cloudmacs">¶</a><span class="section-number-2">8</span> Appendix: searching away from computer</h2>
<div class="outline-text-2" id="text-appendix_cloudmacs">
<p>
I'm running Spacemacs on my VPS, so if I'm not near my computer and <a href="#android">phone search</a> doesn't help for some reason, I can still access and search my data. You can read about it <a href="./cloudmacs.html">here</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000018">
<h2 id="appendix_daemon"><a class="headerlink" href="#appendix_daemon">¶</a><span class="section-number-2">9</span> Appendix: Lightning fast Emacs</h2>
<div class="outline-text-2" id="text-appendix_daemon">
<p>
As you might have noticed, I'm relying on Emacs as my primary means of interacting with my information, whether it's capturing, accessing or searching.
That means that I want it as fast as possible, in a matter of milliseconds. Seconds spent waiting to launch discourage break your concentration and workflow.
</p>
<p>
Most of the time I've got Emacs window open on one of my desktops anyway, but sometimes it isn't, or I don't want to pollute the current Emacs instance with my search. So I've got a handy helper <a href="https://github.com/karlicoss/dotfiles-emacs/blob/master/bin/gemacsclient">script</a> to quickly invoke persistent Emacs frame for me:
</p>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Wrapper script to invoke interactive emacs commands in a daemon instance.</span>

<span class="org-comment-delimiter"># </span><span class="org-comment">These days many people don't suspect it,</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">but Emacs got server ('emacs' binary) and client ('emacsclient') parts.</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Launching server (i.e. default 'emacs' command) evaluates the config</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">and could potentially take seconds if it's very heavy</span>
<span class="org-comment-delimiter"># </span><span class="org-comment">Launching the client however is lightning fast. It's just a matter of creating a window.</span>


<span class="org-variable-name">ARGS</span>=(
 <span class="org-comment-delimiter"># </span><span class="org-comment">This trick gives you best of two worlds: if there is an Emacs daemon running,</span>
 <span class="org-comment-delimiter"># </span><span class="org-comment">it just connects to it. Otherwise, it spawns a daemon first and then connects to it.</span>
 <span class="org-comment-delimiter"># </span><span class="org-comment">Without this setting if you didn't have a daemon running, the command would fail.</span>
 -a <span class="org-string">''</span>

 <span class="org-comment-delimiter"># </span><span class="org-comment">spawn new GUI window, otherwise it tries to launch client in terminal</span>
 --create-frame 
 --frame-parameters=<span class="org-string">"'(fullscreen . maximized)"</span>

 <span class="org-comment-delimiter"># </span><span class="org-comment">process rest of arguments as elisp code</span>
 --eval
  <span class="org-comment-delimiter"># </span><span class="org-comment">bring focus to the window</span>
 <span class="org-string">'(select-frame-set-input-focus (selected-frame))'</span>
)

<span class="org-comment-delimiter"># </span><span class="org-comment">without any extra args it just invokes the daemon instance, otherwise executes the args</span>
<span class="org-keyword">exec</span> emacsclient <span class="org-string">"${ARGS[@]}"</span> <span class="org-sh-escaped-newline">\</span>
                 <span class="org-string">"$@"</span>          <span class="org-comment-delimiter"># </span><span class="org-comment">pass through whatever else you are trying to run</span>
</pre>
</div>
<p>
I've got a global keybinding (<code class="inline">Win+m</code>) that invokes this script. In addition the script accepts a function to call so you can open Emacs with a search prompt, so I have few more handy keybindings:
</p>
<ul class="org-ul">
<li><a id="org0000005"></a> <code class="inline">Win+F1</code> for searching in my <a href="#other">notes and knowledge repository</a></li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/search)"</span>
</pre>
</div>
<ul class="org-ul">
<li><a id="org0000013"></a> <code class="inline">Win+F3</code> for searching in my repositories</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/search-code)"</span>
</pre>
</div>
<ul class="org-ul">
<li><code class="inline">Win+a</code> to open my org-mode agenda</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'my/switch-to-agenda)"</span>
</pre>
</div>
<ul class="org-ul">
<li><code class="inline">Win+c</code> to open org-capture</li>
</ul>
<div class="org-src-container">
<pre class="src src-bash"><span class="org-comment-delimiter">#</span><span class="org-comment">!/bin/</span><span class="org-keyword">bash</span><span class="org-comment"> -eux</span>
<span class="org-keyword">exec</span> <span class="org-string">"~/bin/gemacsclient"</span> <span class="org-string">"(spacemacs/defer-until-after-user-config #'org-capture)"</span>
</pre>
</div>
</div>
<div class="outline-3" id="outline-container-org0000017">
<h3 id="org0000017"><a class="headerlink" href="#org0000017">¶</a>running daemon on startup</h3>
<div class="outline-text-3" id="text-org0000017">
<p>
It might be convenient to always have the daemon running, for that I'm using a systemd unit in <samp class="inline">~/.config/systemd/user/emacs-daemon.service</samp>.
</p>
<div class="org-src-container">
<pre class="src src-bash">[Unit]
<span class="org-variable-name">Description</span>=Emacs daemon

[Service]
<span class="org-variable-name">Type</span>=forking
<span class="org-comment-delimiter"># </span><span class="org-comment">running via bash -l makes it pick up .profile, which sets up PATH etc</span>
<span class="org-variable-name">ExecStart</span>=/bin/bash -l -c <span class="org-string">'/usr/bin/emacs --daemon'</span>
<span class="org-variable-name">ExecStop</span>=/usr/bin/emacsclient --eval <span class="org-string">"(kill-emacs)"</span>
<span class="org-variable-name">Environment</span>=<span class="org-variable-name">SSH_AUTH_SOCK</span>=%t/keyring/ssh
<span class="org-variable-name">Restart</span>=always

[Install]
<span class="org-variable-name">WantedBy</span>=default.target
</pre>
</div>
<p>
It's nothing unusual perhaps apart from using <code class="inline">bash -l</code> so Emacs picks up your <code class="inline">.profile</code> file. Without it, you almost certainly will encounter issues with missing binaries because they would not be in your <code class="inline">PATH</code>.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000019">
<h2 id="appendix_emacs"><a class="headerlink" href="#appendix_emacs">¶</a><span class="section-number-2">10</span> Appending: general Emacs tips</h2>
<div class="outline-text-2" id="text-appendix_emacs">
<p>
These tips might be pretty obvious, but they belong to this post, so here you go:
</p>
<ul class="org-ul">
<li>if you're on Spacemacs, use <a href="https://github.com/syl20bnr/spacemacs/tree/develop"><code class="inline">develop</code></a> branch. Master is pretty backwards.</li>
<li><p>
search with <code class="inline">ripgrep</code> instead of <code class="inline">grep</code> (not only in Emacs!). It's just <a href="#org0000004">better</a>.
</p>
<p>
In Spacemacs, set up your <code class="inline">init.el</code>:
</p></li>
</ul>
<div class="org-src-container">
<pre class="src src-elisp">dotspacemacs-search-tools '(<span class="org-string">"rg"</span> <span class="org-string">"ag"</span> <span class="org-string">"pt"</span> <span class="org-string">"ack"</span> <span class="org-string">"grep"</span>)

dotspacemacs-additional-packages '(helm-rg)
</pre>
</div>
<ul class="org-ul">
<li><p>
use <a href="https://github.com/emacsorphanage/helm-swoop"><code class="inline">helm-swoop</code></a> for search within the buffer
</p>
<p>
It's easier to watch a <a href="https://raw.githubusercontent.com/ShingoFukuyama/images/master/helm-swoop.gif">demo GIF</a> than to explain.
Swoop opens a Helm window with search result summary and jumps between results in the original buffer as you navigate in helm (<code class="inline">C-j/C-k</code>).
</p>
<p>
I <b><b>highly</b></b> recommend it as a primary way of searching withing a buffer. Bind it it to some convenient combination and get used to it (e.g. mine is <code class="inline">SPC RET</code>).
</p>
<p>
There is also <code class="inline">helm-occur</code>, which has similar functionality, but it seems inferior to swoop.
</p></li>
<li><p>
use <code class="inline">helm-follow-mode</code> (<code class="inline">C-c C-f</code> in Helm buffer) to jump between search results in any Helm search
</p>
<p>
E.g. you can use it with <code class="inline">helm-org-in-buffer-headings</code> as a neat way to navigate within an Org file.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org000001a">
<h2 id="future"><a class="headerlink" href="#future">¶</a><span class="section-number-2">11</span> Future and my holy grail of search</h2>
<div class="outline-text-2" id="text-future">
<p>
My ultimate goal is to have my 'external' knowledge as highly integrated as possible, as if it was imprinted on my brain neurons. 
</p>
<p>
  Ideally I want to be able to do fulltext realtime search over anything that I ever had in my visual field.
Not even necessarily text, but audio and video as well.
</p>
<p>
That way one wouldn't have to distinguish between different services and mediums of information at all, be it digital or analogue.
</p>
<p>
Technically it's not impossible with the current technology:
</p>
<ul class="org-ul">
<li>I believe that state of OCR is pretty good considering existence of products like google instant translate</li>
<li>speech recognition still sucks in noisy environments, but generally works</li>
<li>object recognition and annotation is still at dawn (I think?), but we'll get there eventually</li>
<li>that would be a lot of data, but potentially lots of it can be filtered out (at least until storage gets really compact and cheap to justify keeping everything)</li>
<li>processing and indexing don't have to be realtime as you can still rely on biological memory and could work overnight on expensive (but not astronomically so?) hardware</li>
<li>plaintext indexes can potentially be stored on your phone and you could have some sort of backend to access visual component</li>
<li>to jump back to the content digital media (like e-books/web pages/information screens) could aid this by supplying QR code or something similar</li>
</ul>
<p>
However each of these is a pretty hard problem and hardly with high demand from people.   
</p>
<p>
Considering Google Glass hasn't made it, the technology is not exactly there, so we have to rely on kludges like the ones I described above.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000001b">
<h2 id="org000001b"><a class="headerlink" href="#org000001b">¶</a><span class="section-number-2">12</span> --</h2>
<div class="outline-text-2" id="text-12">
<p>
My closing tips would be:
</p>
<ul class="org-ul">
<li><p>
start simple
</p>
<p>
It's better to have a crappy adhoc script or bash alias that runs <code class="inline">grep</code> over your <samp class="inline">~/notes</samp> directory than no means of searching at all.
</p></li>
<li><p>
keep your things as plaintext as possible
</p>
<p>
This is a somewhat sad advice to give in 2019, but the reality is it's still extremely tedious to work with anything else.
</p></li>
<li><p>
whichever tools you use, make sure they launch in an instant
</p>
<p>
Seconds wasted on waiting break your flow. Better spend time on setting it up once and never think about that later.
</p></li>
<li><p>
give Emacs a try
</p>
<p>
I feel almost sorry advocating Emacs for everything, but despite my disgust at Elisp and occasional frustration, 
it just happens to be superior in terms of bending it to do what you want it.
</p></li>
</ul>
<p>
As always, I'm open to feedback and would love to hear what is or setup or help you if you're struggling with something!
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#search">#search</a> <a class="post-tag" href="./tags.html#emacs">#emacs</a> <a class="post-tag" href="./tags.html#orgmode">#orgmode</a></div>
        <!-- TODO post-date? -->
        <div class="date">01 November 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/emacs/comments/dq42vk/building_personal_search_engine_using_emacs_and">/r/emacs</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_pkm_search"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Python: better typed than you think</title>
    <link href="https://beepb00p.xyz/mypy-error-handling.html" />
    <id>https://beepb00p.xyz/mypy-error-handling.html</id>
    <published>2019-10-26T00:00:00Z</published>
    <updated>2019-10-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="mypy python">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Python: better typed than you think | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Python: better typed than you think</h1>
    <div class="summary">mypy assisted error handling, exception mechanisms in other languages, fun with pattern matching and type variance</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#intro">1. Intro aka computers are hard</a></li>
<li><a href="#problem">2. The problem: parsing Kindle highlights</a></li>
<li><a href="#logging">3. A non-solution #1: logging</a></li>
<li><a href="#error_object">4. A non-solution #2: special error value</a></li>
<li><a href="#container">5. Almost solution #1: Result container</a>
<ul>
<li><a href="#iterator">By the way, what's up with <code class="inline">Iterator</code> everywhere?</a></li>
</ul>
</li>
<li><a href="#combinators">6. Almost solution #2: use error combinators</a></li>
<li><a href="#pair">7. Still-not-quite-a-solution #3: (Value, Error) pairs</a></li>
<li><a href="#kiss">8. Solution: keep it simple</a></li>
<li><a href="#tips_tricks">9. Tips &amp; tricks</a>
<ul>
<li><a href="#api">Custom error type</a></li>
<li><a href="#unwrap">unwrap</a></li>
<li><a href="#global_policy">Global error policy</a></li>
<li><a href="#error_context">Improving error context</a></li>
<li><a href="#warnings">Fine grained defensiveness</a></li>
<li><a href="#dataframe">Error values, revisited</a></li>
<li><a href="#cursed_pattern_matching">Cursed pattern matching mechanism</a></li>
</ul>
</li>
<li><a href="#fin">10. Closing points</a></li>
<li><a href="#links">11. Other links</a></li>
<li><a href="#org0000020">12. --</a></li>
</ul>
</div>
</div>
<p>
TLDR: I overview few error handling techniques (with the emphasis on Python, although I mention few other programming languages), some existing Python libraries and suggesting a 
simple and clean <a href="https://mypy.readthedocs.io/en/latest/introduction.html">mypy</a>-based approach.
</p>
<p>
You might learn few things about error handling in different languages, pattern matching, type variance, mypy's capabilities in general and clues for making your code and interfaces more mypy-friendly (and IDE friendly if you're using LSP/Intellij).
</p>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="intro"><a class="headerlink" href="#intro">¶</a><span class="section-number-2">1</span> Intro aka computers are hard</h2>
<div class="outline-text-2" id="text-intro">
<p>
I am somewhat obsessed with personal data and information, analyzing data for quantified self, lifelogging etc. 
I am trying to integrate all my information sources and make it easy to access and search.
You can see some examples in <a href="https://github.com/karlicoss/my">my</a> package and Orger: <a href="https://beepb00p.xyz/orger.html">part I</a>, <a href="https://beepb00p.xyz/orger-todos.html">part II</a>.
</p>
<p>
To get this data, manipulate with it and interact with, of course, you need to extract it first (e.g. from json/csv), parse it (e.g. from plaintext),
or even worse, reverse engineer it from vendor locked formats (e.g. in my <a href="https://github.com/karlicoss/kobuddy">kobo parsing library</a>).
</p>
<p>
If you ever worked with data and had to parse some semi-structured data (let alone natural language), or scraped web pages, you might start getting flashbacks now.
Undocumented APIs, bad characters, cryptic regexes, corrupt fields, unexpected nulls, logical inconsistencies, all sorts of things.
You will almost never get it right from the first few attempts, and then when it finally does what your want… it breaks after couple of days because of course you missed some edge cases or data provider just gives you utter garbage for no reason. And thing you've spent so much effort on stops working, spams your mailbox and requires attention.
</p>
<p>
Ew. <b>Data is messy</b>. 
</p>
<p>
Most modern programming languages are fairly unforgiving to unexpected, and would crash at the slightest opportunity.
Some languages do have quirks (e.g. 'undefined' in JS), but generally well written software aborts very soon after something unexpected starts happening.
And for good reasons:
</p>
<ul class="org-ul">
<li><p>
if it didn't, your program's state would lose the properties the author intended it to have.
</p>
<p>
Ignoring the errors will almost surely prevent the program from getting to desired result anyway and end up with even more severe, or potentially catastrophic inconsistencies. How about formatting your disk if you're <i>really</i> unlucky?
</p></li>
<li>another good reason to fail fast is that it makes the programmer more likely to notice and then fix the bug</li>
</ul>
<p>
So in most cases, as long as you can get away with it, it's <b>good to throw exception or abort</b> the program immediately in some way.
You might not be able to do that if you're literally doing rocket science or <a href="https://isocpp.org/wiki/faq/exceptions#why-exceptions">flight control software</a>, but most of us aren't.
For typical software engineering problems, some errors are less crucial and more manageable than other errors. So we try to be pragmatic when we program, evaluate failure risks and use try/catch mechanisms where appropriate.
</p>
<p>
Now, I'm sure we as an engineers we could handwave about about that stuff forever, so let me be more specific straightaway
and introduce a motivating <b>real life problem</b> that I actually had to solve.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="problem"><a class="headerlink" href="#problem">¶</a><span class="section-number-2">2</span> The problem: parsing Kindle highlights</h2>
<div class="outline-text-2" id="text-problem">
<p>
Say, you own a Kindle book. Electronic books are great. Yeah okay they don't smell like the real thing, but the possibility of highlighting bits of text and typing your comment without distracting on external means of annotation is incredibly helpful.
However, then when you want to go through your highlights after reading to refresh your memory or perhaps to share with a friend,
you find out it's <a href="./annotating.html#kindle">not so convenient</a> to actually quickly access them.
</p>
<p>
So you decide to write a script that would process the highlights, perhaps group them by book, displays timestamps and render a nice HTML page
so you could easily open it from phone and recall latest books you read to discuss with friends.
</p>
<p>
On device, Kindle keeps bookmarks and highlights are stored … in <samp class="inline">My Clippings.txt</samp> file. 
</p>
<details><summary>Click to view 'clippings.txt' </summary>
<pre class="example">
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 2 | Added on Sunday, July 21, 2013 10:06:53 AM

Roger Penrose likes to talk about making direct contact with Platonic reality, but it's a bit embarrassing when you think you've made such contact and it turns out the next morning that you were wrong!
==========
[Tong][2013] Dynamics and Relativity  
- Your Highlight on Page 120 | Added on Sunday, August 4, 2013 6:17:21 PM

It is worth mentioning that although the two people disagree on whether the light hits the walls at the same time, this does not mean that they can't be friends.
==========
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 14 | Added on Sunday, August 4, 2013 8:41:53 PM

No hidden-variable theory can be local (I think some guy named Bell proved that).
</pre>
</details>
<p>
Yes, it's a messy format and not very machine friendly. But oh well it's a file, you're a programmer. You know the drill.
</p>
<p>
<a id="org0000001"></a>
<a id="org0000002"></a>
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr"> 1: </span><span class="org-keyword">from</span> datetime <span class="org-keyword">import</span> datetime
<span class="linenr"> 2: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Sequence
<span class="linenr"> 3: </span><span class="org-keyword">import</span> re
<span class="linenr"> 4: </span><span class="org-keyword">from</span> pathlib <span class="org-keyword">import</span> Path
<span class="linenr"> 5: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> groupby
<span class="linenr"> 6: </span><span class="org-keyword">from</span> textwrap <span class="org-keyword">import</span> wrap
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span class="org-keyword">class</span> <span class="org-type">Highlight</span>(NamedTuple):
<span class="linenr"> 9: </span>    dt: datetime <span class="org-comment-delimiter"># </span><span class="org-comment">date when highlight was made</span>
<span class="linenr">10: </span>    title: <span class="org-builtin">str</span>   <span class="org-comment-delimiter"># </span><span class="org-comment">book title</span>
<span class="linenr">11: </span>    page: <span class="org-builtin">str</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">highlight location</span>
<span class="linenr">12: </span>    text: <span class="org-builtin">str</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">highlighted text</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span class="org-keyword">class</span> <span class="org-type">Book</span>(NamedTuple):
<span class="linenr">15: </span>    <span class="org-doc">"Represents book along with its highlights"</span>
<span class="linenr">16: </span>    title: <span class="org-builtin">str</span>
<span class="linenr">17: </span>    highlights: Sequence[Highlight]
<span class="linenr">18: </span>
<span class="linenr">19: </span><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Highlight:
<span class="linenr">20: </span>    <span class="org-variable-name">groups</span> = re.search(
<span class="linenr">21: </span>        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
<span class="linenr">22: </span>        entry, 
<span class="linenr">23: </span>        re.MULTILINE,
<span class="linenr">24: </span>    )
<span class="linenr">25: </span>    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
<span class="linenr">26: </span>    <span class="org-variable-name">dt</span> = datetime.strptime(groups[<span class="org-string">'dts'</span>], <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
<span class="linenr">27: </span>    <span class="org-keyword">return</span> Highlight(
<span class="linenr">28: </span>        dt=dt,
<span class="linenr">29: </span>        title=groups[<span class="org-string">'title'</span>],
<span class="linenr">30: </span>        page=groups[<span class="org-string">'page'</span>],
<span class="linenr">31: </span>        text=groups[<span class="org-string">'text'</span>],
<span class="linenr">32: </span>    )
<span class="linenr">33: </span>
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">38: </span>
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>():
<span class="linenr">40: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">41: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(iter_highlights(), key=key), key=key):
<span class="linenr">42: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">43: </span>        <span class="org-keyword">yield</span> Book(title=book, highlights=highlights)
<span class="linenr">44: </span>
<span class="linenr">45: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
<span class="linenr">46: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">47: </span>        <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">48: </span>        <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">49: </span>            <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">50: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">51: </span>        <span class="org-keyword">print</span>()
<span class="linenr">52: </span>print_books()
</pre>
</div>
<pre class="example">
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

</pre>
<div><span class="before-aside">
For the purposes of this post, to keep the example output clean, I am just using plain text.
Even though it's not quite HTML with CSS, it still looks kinda nice, doesn't it?

</span><aside>if you're wondering why <code class="inline">yield</code> I'll explain it <a href="#iterator">further down</a></aside></div>
<p>
Now:
</p>
<ul class="org-ul">
<li><p>
imagine you've set this script to run in cron, and it's been fine for a while. You left for a three week holiday to finally get some rest from programming; started reading this new book about quant finance (yeah, you've always had interesting ways of getting a rest from computer) and… your script stopped working.
</p>
<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 55, in &lt;module&gt;
  File "&lt;stdin&gt;", line 49, in print_books
  File "&lt;stdin&gt;", line 44, in iter_books
  File "&lt;stdin&gt;", line 34, in iter_highlights
  File "&lt;stdin&gt;", line 21, in parse_entry
AssertionError: Couldn't match regex!
</pre>
<p>
You swear out loud, reach for the laptop you promised to distance yourself from and turns our your parser chokes over <samp class="inline">page</samp> instead of <samp class="inline">Page</samp> in one of new entries. (and yes, this was actually the case in my Kindle export)
</p>
<details><summary>Click to view updated 'clippings.txt' </summary>
<pre class="example">
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 2 | Added on Sunday, July 21, 2013 10:06:53 AM

Roger Penrose likes to talk about making direct contact with Platonic reality, but it's a bit embarrassing when you think you've made such contact and it turns out the next morning that you were wrong!
==========
[Tong][2013] Dynamics and Relativity  
- Your Highlight on Page 120 | Added on Sunday, August 4, 2013 6:17:21 PM

It is worth mentioning that although the two people disagree on whether the light hits the walls at the same time, this does not mean that they can't be friends.
==========
PHYS771 Lecture 12: Proof (scottaaronson.com)
- Your Highlight on Page 14 | Added on Sunday, August 4, 2013 8:41:53 PM

No hidden-variable theory can be local (I think some guy named Bell proved that).
==========
My Life as a Quant: Reflections on Physics and Finance (Emanuel Derman)
- Your Highlight on page 54 | Added on Tuesday, October 4, 2013 12:11:16 PM

The Black-Scholes model allows us to determine the fair value of a stock option.
</pre>
</details>
<p>
You could argue that you should have made the regex in <code class="inline">parse_entry</code> case independent in the first place, but it's not something you would normally expect. 
Kindle specifically got all sorts of nasty things: roman numerals for page numbers, locale dependent dates, inconsistent separators, and so on.
</p>
<p>
Perhaps you even fix this particular problem, but it's a <b>matter of short time till next parsing issue</b>. It's quite sad if you have to constantly tend for things that are meant to simplify and enhance your life.
</p></li>
</ul>
<p>
Or,
</p>
<ul class="org-ul">
<li><p>
you wrote this parser and decided that it could be useful for other people.
</p>
<p>
So for a small fee, you are providing a service that fetches highlights from their Kindles, displays on 
profile pages and lets their friends comment. 
</p>
<p>
Imagine user's highlights result in the same error described above. It would be pretty sad if parsing a single entry
took down the whole user's page or prevented updates. No matter how fast you'd be willing to fix these things, <b>users would leave discouraged</b>.
</p></li>
</ul>
<p>
With the way code is written at the moment, any exception would take the whole program down.
So, we need some way of getting around these errors and carrying on.
</p>
<p>
What do we do? 
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="logging"><a class="headerlink" href="#logging">¶</a><span class="section-number-2">3</span> A non-solution #1: logging</h2>
<div class="outline-text-2" id="text-logging">
<p>
One simple strategy would be to make parsing fully defensive, wrap the whole <code class="inline">parse_entry</code> call in <code class="inline">try/except</code> and log:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">import</span> logging
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">try</span>:
<span class="linenr">38: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">39: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">40: </span>            logging.exception(e)
</pre>
</div>
<p>
Logging typically works well for minor things not worthy a proper error (i.e. warnings) and as a means of retrospective error analysis and debugging. 
In our case logging wouldn't do the job:
</p>
<ul class="org-ul">
<li>you're not aware that error is happening at all. If it's your personal tool, chances are you don't have time to go through all the logs and inspect them regularly.</li>
<li>user expects to see their data, but can't find it. It's pretty frustrating.</li>
</ul>
<p>
What do we want?
</p>
<ul class="org-ul">
<li>keep track of errors, render as much as we can, but terminate with non-zero exit code</li>
<li>potentially present errors in the interface so you or your users wouldn't worry about lost data</li>
</ul>
<p>
So we need some way of propagating the errors up the call hierarchy instead of throwing immediately or suppressing.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000005">
<h2 id="error_object"><a class="headerlink" href="#error_object">¶</a><span class="section-number-2">4</span> A non-solution #2: special error value</h2>
<div class="outline-text-2" id="text-error_object">
<p>
Often it's tempting to fallback to some sort of special 'default' or 'error' value. I bet you've seen this before: <code class="inline">0</code> or <code class="inline">INT_MAX</code> meaning error for integer type, or <code class="inline">""</code> for string types. We could try something similar and squeeze exception into the <code class="inline">Highlight</code> object itself. 
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">34: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">35: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">36: </span>        <span class="org-keyword">try</span>:
<span class="linenr">37: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">38: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">39: </span>            <span class="org-keyword">yield</span> Highlight(dt=datetime.now(), page=<span class="org-string">''</span>, book=<span class="org-string">"ERROR"</span>, text=<span class="org-builtin">str</span>(e))
</pre>
</div>
<p>
One obvious problem is that it's very nontransparent and <b>relies on implicit convention</b>: there is no way of telling that this function might return some special <code class="inline">Highlight</code> which should be treated as error. That not only complicates code, but might also introduce logical inconsistencies.
</p>
<p>
E.g. if your <code class="inline">Highlight</code> object also returned book's ISBN and you filled it with some arbitrary text, it would almost surely not be a valid ISBN, that might cause failures down the pipeline.
</p>
<p>
Sometimes it's inevitable though, e.g. I'm giving an example <a href="#dataframe">later</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="container"><a class="headerlink" href="#container">¶</a><span class="section-number-2">5</span> Almost solution #1: Result container</h2>
<div class="outline-text-2" id="text-container">
<p>
An abstraction that stood the test of time well is a container that holds a <b>result</b> representing one of two:
</p>
<ul class="org-ul">
<li><b>success value</b>, representing the <b>desired outcome</b> of type <code class="inline">T</code></li>
<li>or <b>'error value'</b>, holding <b>error description</b> of type <code class="inline">E</code>.</li>
</ul>
<p>
I will try to stick to the same semantics further down, 'result' typically meaning that it could be either desired value or error.
</p>
<p>
You can vaguely think of it as an interface <code class="inline">Result</code>, and two implementations: <code class="inline">Ok</code> and <code class="inline">Error</code>.
In runtime, you can ask the instance behind <code class="inline">Result</code>, which of these alternative it holds and act accordingly.
</p>
<p>
It has manifested as:
</p>
<ul class="org-ul">
<li><p>
in Rust: <a href="https://doc.rust-lang.org/std/result/enum.Result.html">std::result::Result</a>. Example borrowed from <a href="https://doc.rust-lang.org/1.30.0/book/second-edition/ch09-02-recoverable-errors-with-result.html">here</a>:
</p>
<div class="org-src-container">
<pre class="src src-rust">let f: Result&lt;File, io::Error&gt; = File::open("hello.txt");
let f = match f {
    Ok(file) =&gt; file,
    Err(error) =&gt; {
	panic!("There was a problem opening the file: {:?}", error)
    },
};
</pre>
</div></li>
<li><p>
in Haskell: <a href="https://wiki.haskell.org/Handling_errors_in_Haskell#Error_using_the_Either_type"><code class="inline">Either E T</code></a>
</p>
<div class="org-src-container">
<pre class="src src-haskell">main = do
  line &lt;- getLine
  case runParser emailParser line of
    Right (user, domain) -&gt; print ("The email is OK.", user, domain)
    Left  (pos, err)     -&gt; putStrLn ("Parse error on " &lt;&gt; pos &lt;&gt; ": " &lt;&gt; err)
</pre>
</div>
<p>
Yes, <code class="inline">Left</code> meaning error and <code class="inline">Right</code> meaning success are not necessarily obvious. It's kinda a pun: "right" also means "correct".
Also notice that error is not just a string, but also contains the position where parsing failed.
</p></li>
<li>in C++: there is a proposal for <a href="https://issues.isocpp.org/show_bug.cgi?id=29"><code class="inline">std::expected&lt;E, T&gt;</code></a></li>
</ul>
<p>
So, Rust and Haskell programmers seem to be quite happy with it? <b>Why can't we have same in Python?</b>
Well, some people tried! So I'll review a python library that does that: <a href="https://github.com/dbrgn/result#result">result.Result</a>
</p>
<p>
Let's try it on our program and see how it works.
To make it easier to compare to <a href="#org0000002">the original code</a> I suggest duplicating the tab in a separate window and tiling them side by side.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">33: </span><span class="org-keyword">from</span> result <span class="org-keyword">import</span> Ok, Err
<span class="linenr">34: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>():
<span class="linenr">35: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">36: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">37: </span>        <span class="org-keyword">try</span>:
<span class="linenr">38: </span>            <span class="org-keyword">yield</span> Ok(parse_entry(entry.strip()))
<span class="linenr">39: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">40: </span>            <span class="org-keyword">yield</span> Err(<span class="org-builtin">str</span>(e))
</pre>
</div>
<p>
We've had to wrap success and error values in <code class="inline">Ok</code> and <code class="inline">Err</code>, but so far it's not too bad.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">41: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">42: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>():
<span class="linenr">43: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">44: </span>    <span class="org-variable-name">values</span> = (r.value <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">45: </span>    <span class="org-variable-name">errors</span> = (r.err() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">46: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">47: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">48: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">49: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">50: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> <span class="org-builtin">map</span>(Err, errors)
</pre>
</div>
<p>
We use <a href="https://docs.python.org/3/library/itertools.html#itertools.tee"><code class="inline">itertools.tee</code></a> here so we don't have to pollute our code with temporary lists.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="linenr">51: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
<span class="linenr">52: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">53: </span>        <span class="org-keyword">if</span> r.is_ok():
<span class="linenr">54: </span>            <span class="org-variable-name">v</span> = r.value
<span class="linenr">55: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {v.title}'</span>)
<span class="linenr">56: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> v.highlights:
<span class="linenr">57: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">58: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">59: </span>            <span class="org-keyword">print</span>()
<span class="linenr">60: </span>        <span class="org-keyword">else</span>:
<span class="linenr">61: </span>            <span class="org-variable-name">e</span> = r.err()
<span class="linenr">62: </span>            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
<span class="linenr">63: </span>print_books()
</pre>
</div>
<pre class="example">
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

* ERROR: Couldn't match regex!
</pre>
<p>
<a id="org0000006"></a>
</p>
<p>
Cool, we rendered as much as we can, and we get the error displayed as well, so nothing crashes and the users are not as unhappy.
The error looks a bit out of nowhere, but at least it's there. We will address how we can improve it <a href="#error_context">later</a>.
</p>
<p>
Sadly, for someone else who looks at <code class="inline">iter_highlights</code> or <code class="inline">iter_books</code> signatures, it's not obvious that it yields <code class="inline">Result</code> objects, not <code class="inline">Book/Highlight</code> objects without reading the code.
It's a thankless job for a human to keep track of, and <a href="https://mypy.readthedocs.io/en/latest/introduction.html"><b>mypy</b></a> is a perfect fit for this task.
Gladly, <code class="inline">result</code> library already <a href="https://github.com/dbrgn/result/blob/master/result/result.py">comes with type annotations</a>.
</p>
<p>
So, let's try to use mypy to aid us at writing correct code.
</p>
<p>
Let's focus just on <code class="inline">iter_highlights</code> and <code class="inline">iter_books</code> and use the <code class="inline">Result</code> type.
</p>
<div class="org-src-container">
<pre class="src src-python" id="org0000007"><span class="linenr">34: </span><span class="org-keyword">from</span> result <span class="org-keyword">import</span> Ok, Err, Result
<span class="linenr">35: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">36: </span><span class="org-variable-name">Error</span> = <span class="org-builtin">str</span>
<span class="linenr">37: </span>
<span class="linenr">38: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Result[Error, Highlight]]:
<span class="linenr">39: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">40: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">41: </span>        <span class="org-keyword">try</span>:
<span class="linenr">42: </span>            <span class="org-keyword">yield</span> Ok(parse_entry(entry.strip()))
<span class="linenr">43: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">44: </span>            <span class="org-keyword">yield</span> Err(<span class="org-builtin">str</span>(e))
</pre>
</div>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">45: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">46: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Error, Book]]:
<span class="linenr">47: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">48: </span>    <span class="org-variable-name">values</span> = (r.ok() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">49: </span>    <span class="org-variable-name">errors</span> = (r      <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">50: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">51: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">52: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">53: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">54: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> errors
</pre>
</div>
<pre class="example">
Mypy output [exit code 1]:
input.py: note: In function "iter_books":
input.py:52: error: Item "None" of "Optional[Highlight]" has no
attribute "dt"  [union-attr]
	    highlights = list(sorted(hls, key=lambda hl: hl.dt))
							 ^
input.py:53: error: Argument "highlights" to "Book" has incompatible
type "List[Optional[Highlight]]"; expected "Sequence[Highlight]"  [arg-type]
	    yield Ok(Book(title=book, highlights=highlights))
						 ^
input.py:54: error: Incompatible types in "yield from" (actual type
"Result[str, Highlight]", expected type "Result[str, Book]")  [misc]
	yield from errors
	^
Found 3 errors in 1 file (checked 1 source file)
</pre>
<p>
Umm. Let's go through the errors:   
</p>
<ul class="org-ul">
<li>errors 1 and 2 are due to <code class="inline">ok()</code> method being too defensive and <a href="https://github.com/dbrgn/result/blob/0778597ddb737754780b3aca956ad944282ee870/result/result.py#L75-L81">returning <code class="inline">None</code></a> if <code class="inline">is_ok</code> is <code class="inline">False</code>. Ideally, you'd throw exception here, because such a situation is a <b>programming bug</b>. We can just enforce non-optional type here via <code class="inline">unopt</code> helper.</li>
<li>error 3 happens because even though we filtered error values, mypy has no idea about that, so it still assumes that <code class="inline">errors</code> might hold <code class="inline">Highlight</code> objects. You could blame mypy of not being smart enough, but it would be a very <b>hard if not impossible analysis</b> in general case. We can get around this by unpacking error and wrapping back in <code class="inline">Err</code>.</li>
</ul>
<p>
Let's apply these insights and try again:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">45: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Optional, TypeVar
<span class="linenr">46: </span><span class="org-variable-name">X</span> = TypeVar(<span class="org-string">'X'</span>)
<span class="linenr">47: </span><span class="org-keyword">def</span> <span class="org-function-name">unopt</span>(x: Optional[X]) -&gt; X:
<span class="linenr">48: </span>    <span class="org-comment-delimiter"># </span><span class="org-comment">similar to https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap</span>
<span class="linenr">49: </span>    <span class="org-keyword">assert</span> x <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>
<span class="linenr">50: </span>    <span class="org-keyword">return</span> x
<span class="linenr">51: </span>
<span class="linenr">52: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">53: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Error, Book]]:
<span class="linenr">54: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">55: </span>    <span class="org-variable-name">values</span> = (unopt(r.ok())  <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.is_ok())
<span class="linenr">56: </span>    <span class="org-variable-name">errors</span> = (unopt(r.err()) <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.is_err())
<span class="linenr">57: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">58: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">59: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">60: </span>        <span class="org-keyword">yield</span> Ok(Book(title=book, highlights=highlights))
<span class="linenr">61: </span>    <span class="org-keyword">for</span> err <span class="org-keyword">in</span> errors:
<span class="linenr">62: </span>        <span class="org-keyword">yield</span> Err(err)
</pre>
</div>
<pre class="example">
Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Phew! With some minor changes and restructuring we've convinced mypy.
</p>
<p>
<a id="org0000008"></a>
It does come with some downsides:
</p>
<ul class="org-ul">
<li><b>readability</b>: there is a bit of visual noise since you need to add <code class="inline">Ok/Err</code> wrappers and access the success value via <code class="inline">.value</code> property</li>
<li><p>
<b>safety</b>: you could forget to call <code class="inline">is_ok/is_err</code> before calling <code class="inline">ok/err</code>, and mypy won't even blink.
</p>
<p>
<a id="org0000009"></a>
The contract <samp class="inline">if .is_ok() is True, then it's safe to call .ok()</samp> is too complicated to be encoded as a type that mypy can handle. You'll get <code class="inline">None</code> or exception thrown in runtime. The author of the library admits it by the way, so it's not a criticism, just highlighting limitations of mypy here!
</p></li>
</ul>
<p>
Ok, we've learned something, let's try again. 
</p>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="iterator"><a class="headerlink" href="#iterator">¶</a>By the way, what's up with <a href="https://docs.python.org/3/library/typing.html#typing.Iterator"><code class="inline">Iterator</code></a> everywhere?</h3>
<div class="outline-text-3" id="text-iterator">
<p>
Glad you asked! Several reasons I'm using generators here:
</p>
<ul class="org-ul">
<li>it makes code cleaner because there is <b>no need for temporary lists</b>, calling <code class="inline">.append</code> and then returning them in the end.</li>
<li>it makes code faster (again, no temporary lists), and also it <b>feels faster</b> because you print items as soon as you process</li>
<li><code class="inline">Iterator</code> type is <b>covariant</b>, whereas <code class="inline">List</code> is not. I'm elaborating on it <a href="#org000000a">later</a>. I'm also using <a href="https://docs.python.org/3/library/typing.html#typing.Sequence"><code class="inline">Sequence</code></a> for the same reason.</li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000010">
<h2 id="combinators"><a class="headerlink" href="#combinators">¶</a><span class="section-number-2">6</span> Almost solution #2: use error combinators</h2>
<div class="outline-text-2" id="text-combinators">
<p>
Now, let's try out <a href="https://github.com/dry-python/returns#result-container">returns.result</a> library, clearly inspired by Haskell's <code class="inline">Either</code> monad and <code class="inline">do</code> notation.
I'm quite glad someone already implemented it and I didn't have to reinvent the wheel here.
</p>
<p>
So, let's try and rewrite the code using <code class="inline">returns.result.Result</code>:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org000000d"><span class="linenr">19: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> safe
<span class="linenr">20: </span>
<span class="linenr">21: </span><span class="org-type">@safe</span>
<span class="linenr">22: </span><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Highlight:
<span class="linenr">23: </span>    <span class="org-variable-name">groups</span> = re.search(
<span class="linenr">24: </span>        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
<span class="linenr">25: </span>        entry, 
<span class="linenr">26: </span>        re.MULTILINE,
<span class="linenr">27: </span>    )
<span class="linenr">28: </span>    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
<span class="linenr">29: </span>    <span class="org-variable-name">dt</span> = datetime.strptime(groups[<span class="org-string">'dts'</span>], <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
<span class="linenr">30: </span>    <span class="org-keyword">return</span> Highlight(
<span class="linenr">31: </span>        dt=dt,
<span class="linenr">32: </span>        title=groups[<span class="org-string">'title'</span>],
<span class="linenr">33: </span>        page=groups[<span class="org-string">'page'</span>],
<span class="linenr">34: </span>        text=groups[<span class="org-string">'text'</span>],
<span class="linenr">35: </span>    )
<span class="linenr">36: </span>
<span class="linenr">37: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> Result
<span class="linenr">38: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Result[Highlight, <span class="org-type">Exception</span>]]:
<span class="linenr">40: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">41: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">42: </span>        <span class="org-keyword">yield</span> parse_entry(entry.strip())
</pre>
</div>
<p>
So far the only difference from <a href="#org0000002">the original code</a> is <a href="https://returns.readthedocs.io/en/latest/pages/result.html#safe"><code class="inline">@safe</code></a> decorator on <code class="inline">parse_entry</code>, which basically deals with catching all exceptions and wrapping into <code class="inline">Result</code>.
</p>
<p>
As a consequence, <code class="inline">iter_highlights</code> required no changes in its body. (which may not be a desirable thing as we'll see <a href="#error_context">later</a>)
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org000000e"><span class="linenr">43: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> cast
<span class="linenr">44: </span><span class="org-keyword">from</span> returns.result <span class="org-keyword">import</span> Success, Failure
<span class="linenr">45: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">46: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Result[Book, <span class="org-type">Exception</span>]]:
<span class="linenr">47: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">48: </span>    <span class="org-variable-name">sentinel</span> = cast(Highlight, <span class="org-builtin">object</span>())
<span class="linenr">49: </span>    <span class="org-variable-name">values</span> = (r.unwrap()  <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> r.value_or(sentinel) <span class="org-keyword">is</span> <span class="org-keyword">not</span> sentinel)
<span class="linenr">50: </span>    <span class="org-variable-name">errors</span> = (r.failure() <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span> r.value_or(sentinel) <span class="org-keyword">is</span>     sentinel)
<span class="linenr">51: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">52: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">53: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">54: </span>        <span class="org-keyword">yield</span> Success(Book(title=book, highlights=highlights))
<span class="linenr">55: </span>    <span class="org-keyword">for</span> e <span class="org-keyword">in</span> errors:
<span class="linenr">56: </span>        <span class="org-keyword">yield</span> Failure(e)
</pre>
</div>
<p>
Ok, that definitely requires some explanation…
</p>
<p>
<code class="inline">returns</code> library public API doesn't provide any way to tell between success and failure (<a href="https://returns.readthedocs.io/en/latest/pages/result.html#what-is-the-difference-between-success-and-success">kind of deliberately</a>). The types <code class="inline">_Success</code> and <code class="inline">_Failure</code> are private, and the only method that we can use seems to be <a href="https://returns.readthedocs.io/en/latest/pages/result.html#returns.result.Result.value_or"><code class="inline">result.value_or(default)</code></a>. This method returns the success value if <code class="inline">result</code> is <code class="inline">Success</code> and falls back to <code class="inline">default</code> if <code class="inline">result</code> is a <code class="inline">Failure</code>. So we use a <b>sentinel object to distinguish</b> between actual success values and <code class="inline">default</code> ones, and also have to trick mypy with a <code class="inline">cast</code>.
</p>
<p>
Apart from this obscurity, the function suffers from exactly the same issues as the <code class="inline">iter_books</code> implementation from <a href="#org0000008">the previous section</a>, and for the same reason: contract is too complicated to be expressed in mypy.
</p>
<p>
One could argue that this function is going to look awkward anyway since we need to separate list of results into successes and errors. Let's see the function that should be more straightforward:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org000000f"><span class="linenr">57: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Callable
<span class="linenr">58: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">59: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">60: </span>        <span class="org-keyword">def</span> <span class="org-function-name">print_ok</span>(r: Book) -&gt; <span class="org-constant">None</span>:
<span class="linenr">61: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">62: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">63: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">64: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">65: </span>        <span class="org-variable-name">print_error</span> = <span class="org-keyword">lambda</span> e: <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
<span class="linenr">66: </span>        r.<span class="org-builtin">map</span>(print_ok).fix(print_error)
</pre>
</div>
<p>
The idea here is that we can use <code class="inline">map</code> method (that works like <code class="inline">fmap</code> in Haskell) and use it to print successful results,
and chain it with <code class="inline">fix</code> that works like like <code class="inline">fmap</code>, but for errors. In a sense, these methods encapsulate pattern matching 
(which Python lacks syntactically) so as long the implementor did the dirty business of correctly doing it dynamically, you're safe.
However I feel that this particular library overdid this encapsulation a bit, hence very hacky implementation of <code class="inline">iter_books</code>.
</p>
<p>
Lambdas <a href="https://stackoverflow.com/a/1233520/706389"><b>can't be multiline</b></a>, so we have to define a local function for <code class="inline">print_ok</code>.
</p>
<p>
There is a <a href="https://github.com/python/mypy/issues/4226">bug in mypy</a> that sometimes prevents you from inlining the lambda and struggles with type inference. Here I'm hitting this bug with <code class="inline">print_error</code>, that's why it's not <code class="inline">.fix(lambda e: print(f"* ERROR: {e}"))</code>.
</p>
<p>
Another potential problem is one could forget to implement one of <code class="inline">map/fix</code> clauses, since <b>nothing enforces calling them</b>. Even if you're detecting unused variables, missing <code class="inline">.fix</code> clause could stay unnoticed forever. It's very similar to forgetting <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code class="inline">catch</code></a> when using Javascript Promises.
</p>
<p>
It might be possible to enforce with some static analysis though, e.g. via mypy plugin by flagging dangling/temporary <code class="inline">Result</code> values (e.g. similarly to <a href="https://doc.rust-lang.org/std/result/#results-must-be-used"><code class="inline">must_use</code></a> attribute in Rust), but it's a project on its own.
</p>
<p>
Well at the very least it works and type checks!
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">67: </span>print_books()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]
* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]
* ERROR: Couldn't match regex!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Overall I'm not sold, Python simply <b>lacks syntax</b> that lets you unpack and compose <code class="inline">Result</code> objects in a clean way and you end up with boilerplate.
<a href="https://returns.readthedocs.io/en/latest/pages/io.html#returns.io.IO.lift"><code class="inline">lifts</code></a> are not very readable in Haskell, let alone in Python.
</p>
<p>
I think authors did a great experiment though, the more people have fun with types, the more good abstractions we'll find. 
</p>
<p>
I don't want to discourage people from using their library, so if it's your personal project and it makes your code more manageable or it just feels fun then by all means go for it!
</p>
<p>
But as much as I like ideas from functional programming, I'm almost certain that it's gonna look confusing to an average Python programmer,
 and won't be welcome warmly in your team.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000011">
<h2 id="pair"><a class="headerlink" href="#pair">¶</a><span class="section-number-2">7</span> Still-not-quite-a-solution #3: (Value, Error) pairs</h2>
<div class="outline-text-2" id="text-pair">
<p>
Before we go on to the solution I propose let me mention another notable pattern of error handling.
</p>
<p>
It's commonly used in <a href="https://blog.golang.org/error-handling-and-go">Go</a>.
</p>
<div class="org-src-container">
<pre class="src src-go">f, err := os.Open("filename.ext")
if err != nil {
    log.Fatal(err)
}
// do something with the open *File f
</pre>
</div>
<p>
However, it's not limited only by Go, e.g. you'd often encounter it implicitly in C (which had no exceptions) or C++ code.
For instance, <a href="https://en.cppreference.com/w/cpp/filesystem/is_symlink"><code class="inline">std::filesystem::is_symlink</code></a> comes in two flavours:
</p>
<ul class="org-ul">
<li><code class="inline">bool is_symlink( const std::filesystem::path&amp; p )</code>, which throws exceptions on errors.</li>
<li><p>
<code class="inline">bool is_symlink( const std::filesystem::path&amp; p, std::error_code&amp; ec ) noexcept</code>, which sets <code class="inline">ec</code> on errors. 
</p>
<p>
You can think of it as if it returned <code class="inline">std::tuple&lt;bool, std::error_code&gt;</code>. I assume it's not that way because the compiler wouldn't be able to distinguish between signatures.
</p></li>
</ul>
<p>
Personally I as well as many other people find it pretty ugly. No judgment here though as I have no idea behind the design requirements and rationale for such a model in Go.
Pretty sure one can get used to it after a while and that there are some static flow analyzers that help to ensure correct error handling.
</p>
<p>
Main issue with this approach regarding Python is that it's not mypy friendly as return type of <code class="inline">Open</code> would have to be <code class="inline">Tuple[Optional[Success], Optional[Error]]</code>.
In the type theory language, it is a <a href="https://en.wikipedia.org/wiki/Product_type">product type</a>, so in addition to all members of <code class="inline">Success</code> type and all members of <code class="inline">Error</code> type, it also got inhabitants that <b>don't make sense for our program</b>, such as <code class="inline">(None, None)</code> and also all of <code class="inline">Tuple[Success, Error]</code>. 
</p>
<p>
In other words, nothing on type level prevents the callee (<code class="inline">os.Open</code>) from returning something like <code class="inline">(file_descriptor, "whoops")</code>, which has ambiguous meaning.
If we use it we would have to pay with sacrificing type safety or <b>extra code on caller site</b> to eliminate these impossible program states:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-variable-name">f</span>, <span class="org-variable-name">err</span> = <span class="org-builtin">open</span>(<span class="org-string">'filename.ext'</span>)
<span class="org-keyword">if</span> err <span class="org-keyword">is</span> <span class="org-constant">None</span>:
    <span class="org-keyword">assert</span> f <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>
    <span class="org-comment-delimiter"># </span><span class="org-comment">ok, now we have both mypy and runtime safety: open returned error</span>
<span class="org-keyword">elif</span>:
    <span class="org-keyword">assert</span> f <span class="org-keyword">is</span> <span class="org-constant">None</span>
    <span class="org-comment-delimiter"># </span><span class="org-comment">ok, now we have both mypy and runtime safety: open returned value</span>
</pre>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000012">
<h2 id="kiss"><a class="headerlink" href="#kiss">¶</a><span class="section-number-2">8</span> Solution: keep it simple</h2>
<div class="outline-text-2" id="text-kiss">
<p>
It seems that we were on the right track with the <a href="#container">container type</a> and <a href="#combinators">combinators</a>, but never completely satisfied.
Let's recall the problems we had again:
</p>
<ul class="org-ul">
<li><p>
<b>readability</b>: extra wrappers and accessor methods like <code class="inline">Ok/Success/Error/.is_ok()/.unwrap()</code>.
</p>
<p>
It's <b>visual noise</b> and also they creep throughout the code, so if you decide you won't need them later,
you might have to refactor a lot of code.
</p></li>
</ul>
<ul class="org-ul">
<li><b>safety</b>: it's still possible to write logically inconsistent code like <code class="inline">if res.is_error(): return res.value * 10</code>.</li>
<li><b>composability</b>: <code class="inline">fmap</code>-style combinators are not really going to look good because Python lacks multiline lambdas.</li>
<li><b>performance and memory use</b>: not going to make claims here as I haven't benchmarked, but there is a potential for overhead caused by extra wrapper objects.</li>
</ul>
<p>
First, we'll attack readability and safety. Yes, at the same time!  
</p>
<p>
In part it's solved with syntactic sugar in other languages like <code class="inline">do</code> syntax in <code class="inline">Haskell</code>, or <code class="inline">try!</code> macro and <code class="inline">?</code> operator in <a href="https://doc.rust-lang.org/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html">Rust</a>. Sometimes it's inevitable and you have to inject values into rust's <code class="inline">Result</code> explicitly via <code class="inline">Ok/Err</code> constructors. However checking for  <code class="inline">.is_ok()</code> or <code class="inline">isRight</code> is really not that common in idiomatic Rust and Haskell. Reason is <b>pattern matching</b>! E.g. if we had pattern matching in Python we could write something like:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
        match r:
            Book b:
                <span class="org-keyword">print</span>(f<span class="org-string">'* {b.title}'</span>)
                <span class="org-keyword">for</span> h <span class="org-keyword">in</span> b.highlights:
                    <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
                    <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
                <span class="org-keyword">print</span>()
            Error e:
                <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
</pre>
</div>
<p>
That's cleaner than checking for <code class="inline">is_ok/is_err</code> and unpacking; and also makes it type safe because <code class="inline">b</code> and <code class="inline">e</code> already have the appropriate types. In our imaginary world where python had this syntax, surely mypy would have supported it too, right?
</p>
<p>
Oh wait. It kind of <a href="https://mypy.readthedocs.io/en/latest/kinds_of_types.html#union-types">supports it already</a>!
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Union

<span class="org-keyword">def</span> <span class="org-function-name">f</span>(x: Union[<span class="org-builtin">int</span>, <span class="org-builtin">str</span>]) -&gt; <span class="org-constant">None</span>:
    x + 1     <span class="org-comment-delimiter"># </span><span class="org-comment">Error: str + int is not valid</span>
    <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(x, <span class="org-builtin">int</span>):
        <span class="org-comment-delimiter"># </span><span class="org-comment">Here type of x is int.</span>
        x + 1      <span class="org-comment-delimiter"># </span><span class="org-comment">OK</span>
    <span class="org-keyword">else</span>:
        <span class="org-comment-delimiter"># </span><span class="org-comment">Here type of x is str.</span>
        x + <span class="org-string">'a'</span>    <span class="org-comment-delimiter"># </span><span class="org-comment">OK</span>
</pre>
</div>
<p>
So, mypy keeps track of the <a href="https://en.wikipedia.org/wiki/Typing_environment">typing context</a> and <b>narrows it down</b> after certain operations, in particular, <code class="inline">isinstance</code> checks and <a href="https://mypy.readthedocs.io/en/latest/kinds_of_types.html#optional-types-and-the-none-type"><code class="inline">is None/is not None</code> checks</a>.
</p>
<p>
That looks <b>very similar to pattern matching</b> both in terms of syntax and typing rules.
</p>
<p>
So, it seems that <code class="inline">Union</code> would represent our result type. Do we still need to come up with some special wrapper for errors?
Not really, Python already has a fairly convenient candidate for it: <code class="inline">Exception</code>! Most often you have it anyway in <code class="inline">except</code> clause, if it's not enough, you can inherit it, add extra fields and treat as any other type.
</p>
<p>
On the other hand, Exceptions almost never end up as function return values (and when they do, it's normally some fairly unambiguous code dealing specifically with error handling). Hmm, how convenient 🤔.
</p>
<p>
So even though we don't have explicit tagged unions in Python, if we agree that error values are represented as Exceptions, then we do get a disjoint type (i.e. <code class="inline">Ok</code> and <code class="inline">Error</code> are mutually exclusive) at runtime.
</p>
<p>
So, rules of thumb: 
</p>
<ul class="org-ul">
<li>use <code class="inline">Union[T, Exception]</code> to represent type for results that hold <code class="inline">T</code> but can also end up with an error</li>
<li><code class="inline">return</code> or <code class="inline">yield</code> exceptions and success values without using any extra wrappers</li>
<li>'pattern match' through <code class="inline">isinstance</code></li>
</ul>
<p>
Let's see how we can rewrite our program by employing these principles:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="coderef-off" id="coderef-simple_error_api"><span class="linenr">33: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar, Union</span>
<span class="linenr">34: </span><span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>)
<span class="linenr">35: </span><span class="org-variable-name">Res</span> = Union[T, <span class="org-type">Exception</span>]
<span class="linenr">36: </span>
<span class="linenr">37: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">38: </span>
<span class="linenr">39: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_highlights</span>() -&gt; Iterator[Res[Highlight]]:
<span class="linenr">40: </span>    <span class="org-variable-name">data</span> = Path(clippings_file).read_text()
<span class="linenr">41: </span>    <span class="org-keyword">for</span> entry <span class="org-keyword">in</span> data.split(<span class="org-string">'=========='</span>):
<span class="linenr">42: </span>        <span class="org-keyword">try</span>:
<span class="linenr">43: </span>            <span class="org-keyword">yield</span> parse_entry(entry.strip())
<span class="linenr">44: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="coderef-off" id="coderef-throw_exc"><span class="linenr">45: </span>            <span class="org-keyword">yield</span> e</span>
<span class="linenr">46: </span>
<span class="linenr">47: </span><span class="org-keyword">from</span> itertools <span class="org-keyword">import</span> tee
<span class="linenr">48: </span>
<span class="linenr">49: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_books</span>() -&gt; Iterator[Res[Book]]:
<span class="linenr">50: </span>    <span class="org-variable-name">vit</span>, <span class="org-variable-name">eit</span> = tee(iter_highlights())
<span class="linenr">51: </span>    <span class="org-variable-name">values</span> = (r <span class="org-keyword">for</span> r <span class="org-keyword">in</span> vit <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>))
<span class="linenr">52: </span>    <span class="org-variable-name">errors</span> = (r <span class="org-keyword">for</span> r <span class="org-keyword">in</span> eit <span class="org-keyword">if</span>     <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>))
<span class="linenr">53: </span>    <span class="org-variable-name">key</span> = <span class="org-keyword">lambda</span> e: e.title
<span class="linenr">54: </span>    <span class="org-keyword">for</span> book, hls <span class="org-keyword">in</span> groupby(<span class="org-builtin">sorted</span>(values, key=key), key=key):
<span class="linenr">55: </span>        <span class="org-variable-name">highlights</span> = <span class="org-builtin">list</span>(<span class="org-builtin">sorted</span>(hls, key=<span class="org-keyword">lambda</span> hl: hl.dt))
<span class="linenr">56: </span>        <span class="org-keyword">yield</span> Book(title=book, highlights=highlights)
<span class="linenr">57: </span>    <span class="org-keyword">yield</span> <span class="org-keyword">from</span> errors
<span class="linenr">58: </span>
<span class="linenr">59: </span><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">60: </span>    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
<span class="linenr">61: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(r, <span class="org-type">Exception</span>):
<span class="linenr">62: </span>            <span class="org-keyword">print</span>(f<span class="org-string">'* {r.title}'</span>)
<span class="linenr">63: </span>            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> r.highlights:
<span class="linenr">64: </span>                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
<span class="linenr">65: </span>                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
<span class="linenr">66: </span>            <span class="org-keyword">print</span>()
<span class="linenr">67: </span>        <span class="org-keyword">else</span>:
<span class="linenr">68: </span>            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {r}"</span>)
<span class="linenr">69: </span>print_books()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
* PHYS771 Lecture 12: Proof (scottaaronson.com)
  - 21 Jul 2013 10:06  Roger Penrose likes to talk about making direct contact with Platonic
      reality, but it's a bit embarrassing when you think you've made such
      contact and it turns out the next morning that you were wrong! [Page 2]
  - 04 Aug 2013 20:41  No hidden-variable theory can be local (I think some guy named Bell
      proved that). [Page 14]

* [Tong][2013] Dynamics and Relativity  
  - 04 Aug 2013 18:17  It is worth mentioning that although the two people disagree on
      whether the light hits the walls at the same time, this does not mean
      that they can't be friends. [Page 120]

* ERROR: Couldn't match regex!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Yay, it works and typechecks. Now you can decide for yourself how clean it is by comparing it side by side with <a href="#org0000002">the original code</a> without error handling. You'd see that the only differences (apart from indentation) is code for error handling.
</p>
<p>
<a name="upsides"></a>
Here's what I like about this approach: 
</p>
<ul class="org-ul">
<li><p>
no extra wrapper classes, code is <b>clean and readable</b>
</p>
<p>
Also note that surprisingly, Python's dynamic nature actually helps here. E.g. if you rewrote <code class="inline">iter_books</code> in Rust, you'd have to use <code class="inline">Ok</code> and <code class="inline">Err</code> to wrap the return values into <code class="inline">Res</code> object. I can imagine you might be able get away with explicit wrapping if you use language with conversions like <code class="inline">Scala</code> or <code class="inline">C++</code>.
</p></li>
<li><p>
because of no runtime wrappers, <b>on the 'successful' code path, the callee doesn't need extra code</b> to wrap/unwrap anything.
</p>
<p>
You can prototype and mess with your program in the interpreter without having to think about errors.
If you do get an error, it would just most likely crash the whole program with <code class="inline">AttributeError</code>, which is essentially the desired non-defensive
behaviour during prototyping.
</p>
<p>
You can completely ignore mypy and error handling, until you're happy, then you harden your program by making sure it complies to mypy.
</p></li>
<li><p>
<b>no memory overhead</b> caused by constant wrapping and unwrapping. 
</p>
<p>
I don't really want to make claims about CPU here. I tried isolated micro benchmarking; using <code class="inline">isinstance(r, Exception)</code> runs in 50ns,
using <code class="inline">is_err()</code> call and then unpacking <code class="inline">err()</code> runs is 60ns.
But these numbers might not make sense under a realistic data flow.
</p></li>
<li><p>
<b>easy to operate and transform</b> values, you just write regular Python code without extra lambdas or kludgy local functions.
</p>
<p>
If you don't need to handle the error, you can just yield it up the call stack as we do in <code class="inline">iter_books</code>.
</p></li>
<li><b>doesn't require modifying existing types</b>, and introducing invalid states that signal errors (mentioned <a href="#error_object">here</a>)</li>
<li><p>
<a id="org000000a"></a> <b>correct variance</b> for free
</p>
<p>
<a href="https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)">Variance</a> reflects how compound types (e.g. containers/functions) behave with respect to inheritance of their arguments and return types. You might have also heard of this as Liskov substitution principle.
I wouldn't try to explain it here, as it's a topic that deserves a whole post and something you need to experiment with and get comfortable. You can also find some explanations and examples <a href="https://mypy.readthedocs.io/en/latest/generics.html#variance-of-generic-types">here</a>.
</p>
<p>
It short, we can let <code class="inline">Res[T]</code> to be covariant with respect to <code class="inline">T</code>, because it's a simple immutable wrapper around <code class="inline">T</code>.
</p>
<p>
If you were defining your own generic class, you'd have to declare <code class="inline">T = TypeVar('T', covariant=True)</code>.
It's somewhat misleading, because <b>variance is a property of a generic container</b>, however for some historic reasons in mypy, you specify variance in the definition of type variable.
However, because <code class="inline">Res</code> is merely an alias to <code class="inline">Union</code>, you <a href="https://mypy.readthedocs.io/en/latest/generics.html#generic-type-aliases">don't have to remember to do it</a>, because <code class="inline">Union</code> is already defined as covariant in both its type arguments.
</p></li>
</ul>
<p>
Downsides:
</p>
<ul class="org-ul">
<li><p>
<code class="inline">isinstance</code> looks a bit verbose and might be frowned upon as it's <b>often considered as code smell</b>
</p>
<p>
We can't get around this and hide in a helper function for the same reason mentioned <a href="#org0000009">above</a>, 
but it might be solved in mypy in <a href="https://github.com/python/mypy/issues/5206">some near future</a>, though.
</p></li>
</ul>
<p>
That's basically what I wanted to show! I've been using this pattern for a while now and I think it could work well.
Remember about typing contexts and how <code class="inline">isinstance</code> / <code class="inline">is None</code> checks impact it, and you can keep your code clean and safe.
</p>
<p>
Not suggesting you to go and rewrite all your code from using <code class="inline">try/catch</code> now though. Every error handling style has its place, and 
hopefully you'll figure out parts of your projects where it's applicable.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000001d">
<h2 id="tips_tricks"><a class="headerlink" href="#tips_tricks">¶</a><span class="section-number-2">9</span> Tips &amp; tricks</h2>
<div class="outline-text-2" id="text-tips_tricks">
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="api"><a class="headerlink" href="#api">¶</a>Custom error type</h3>
<div class="outline-text-3" id="text-api">
<p>
While <a class="coderef" href="#coderef-simple_error_api" onmouseout="CodeHighlightOff(this, 'coderef-simple_error_api');" onmouseover="CodeHighlightOn(this, 'coderef-simple_error_api');">the three line API</a> is enough in most cases, you might want something more fancy.
</p>
<p>
One improvement is allowing <b>arbitrary error type</b>.
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000013"><span class="linenr">1: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar, Union
<span class="linenr">2: </span><span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>)
<span class="linenr">3: </span><span class="org-variable-name">E</span> = TypeVar(<span class="org-string">'E'</span>)
<span class="linenr">4: </span><span class="org-variable-name">ResT</span> = Union[T, E]
</pre>
</div>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr"> 5: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Iterator
<span class="linenr"> 6: </span><span class="org-keyword">class</span> <span class="org-type">Error</span>(NamedTuple):
<span class="linenr"> 7: </span>    text: <span class="org-builtin">str</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span class="org-variable-name">Res</span> = ResT[T, Error]
<span class="linenr">10: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_numbers</span>() -&gt; Iterator[Res[<span class="org-builtin">int</span>]]:
<span class="linenr">11: </span>    <span class="org-keyword">for</span> s <span class="org-keyword">in</span> [<span class="org-string">'1'</span>, <span class="org-string">'two'</span>, <span class="org-string">'3'</span>, <span class="org-string">'4'</span>]:
<span class="linenr">12: </span>        <span class="org-keyword">try</span>:
<span class="linenr">13: </span>            <span class="org-keyword">yield</span> <span class="org-builtin">int</span>(s)
<span class="linenr">14: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">15: </span>            <span class="org-keyword">yield</span> Error(<span class="org-builtin">str</span>(e))
<span class="linenr">16: </span>
<span class="linenr">17: </span><span class="org-keyword">def</span> <span class="org-function-name">print_negated</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">18: </span>    <span class="org-keyword">for</span> n <span class="org-keyword">in</span> iter_numbers():
<span class="linenr">19: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(n, Error):
<span class="linenr">20: </span>            <span class="org-keyword">print</span>(-n)
<span class="linenr">21: </span>        <span class="org-keyword">else</span>:
<span class="linenr">22: </span>            <span class="org-keyword">print</span>(<span class="org-string">'ERROR! '</span> + n.text)
<span class="linenr">23: </span>
<span class="linenr">24: </span>print_negated()
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
-1
ERROR! invalid literal for int() with base 10: 'two'
-3
-4

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
The downside now is that you do need to wrap your exception (i.e. presumably you still want to keep the message and stacktrace) in <code class="inline">Error</code> container.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000015">
<h3 id="unwrap"><a class="headerlink" href="#unwrap">¶</a>unwrap</h3>
<div class="outline-text-3" id="text-unwrap">
<p>
Sometimes it's desirable to quickly switch result back to non-defensive version. You can do it by using a simple helper function <code class="inline">unwrap</code> (naming inspired by <a href="https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap">rust</a>):
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Union, TypeVar
<span class="org-variable-name">T</span> = TypeVar(<span class="org-string">'T'</span>, covariant=<span class="org-constant">True</span>)
<span class="org-variable-name">Res</span> = Union[T, <span class="org-type">Exception</span>]
<span class="org-keyword">def</span> <span class="org-function-name">unwrap</span>(res: Res[T]) -&gt; T:
    <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(res, <span class="org-type">Exception</span>):
        <span class="org-keyword">raise</span> res
    <span class="org-keyword">else</span>:
        <span class="org-keyword">return</span> res

good: <span class="org-variable-name">Res</span>[<span class="org-builtin">int</span>] = 123
bad: <span class="org-variable-name">Res</span>[<span class="org-builtin">int</span>] = <span class="org-type">RuntimeError</span>(<span class="org-string">'bad'</span>)
<span class="org-keyword">print</span>(unwrap(good))
<span class="org-keyword">print</span>(unwrap(bad))
</pre>
</div>
<pre class="example">
Python output [exit code 1]:
123
Traceback (most recent call last):
  File "input.py", line 13, in &lt;module&gt;
    print(unwrap(bad))
  File "input.py", line 6, in unwrap
    raise res
RuntimeError: bad

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
</div>
</div>
<div class="outline-3" id="outline-container-org0000018">
<h3 id="global_policy"><a class="headerlink" href="#global_policy">¶</a>Global error policy</h3>
<div class="outline-text-3" id="text-global_policy">
<p>
When you're actively working on your code and running tests, you want to make sure that there are no errors and be as non-defensive as possible.
However, in the field, you want to keep the code more defensive. To switch behaviours quickly, you can use the following trick:
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000016"><span class="linenr"> 5: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Generic
<span class="linenr"> 6: </span><span class="org-variable-name">X</span> = TypeVar(<span class="org-string">'X'</span>, bound=<span class="org-type">Exception</span>, covariant=<span class="org-constant">True</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span class="org-keyword">class</span> <span class="org-type">Error</span>(Generic[X]):
<span class="linenr"> 9: </span>    <span class="org-variable-name">defensive_policy</span> = <span class="org-constant">True</span>
<span class="linenr">10: </span>
<span class="linenr">11: </span>    <span class="org-keyword">def</span> <span class="org-function-name">__init__</span>(<span class="org-keyword">self</span>, exc: X) -&gt; <span class="org-constant">None</span>:
<span class="linenr">12: </span>        <span class="org-keyword">self</span>.exc = exc
<span class="linenr">13: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> Error.defensive_policy:
<span class="linenr">14: </span>            <span class="org-keyword">raise</span> exc
<span class="linenr">15: </span>
<span class="linenr">16: </span><span class="org-variable-name">Res</span> = ResT[T, Error[<span class="org-type">Exception</span>]]
</pre>
</div>
<p>
The idea here is <code class="inline">Error.defensive_policy</code> determines if exception will be handled defensively or thrown straightaway. <b>This is enforced on type level</b>, because in order to get <code class="inline">Error</code> you need to call its constructor at some point.
</p>
<p>
Also note the use of <code class="inline">bound=Exception</code> on the type variable, this is because we can only <code class="inline">raise</code> something that inherits <code class="inline">Exception</code>.
</p>
<div class="org-src-container">
<pre class="src src-mypy" id="org0000017"><span class="linenr">17: </span>
<span class="linenr">18: </span><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Iterator
<span class="linenr">19: </span><span class="org-keyword">def</span> <span class="org-function-name">iter_numbers</span>() -&gt; Iterator[Res[<span class="org-builtin">int</span>]]:
<span class="linenr">20: </span>    <span class="org-keyword">for</span> s <span class="org-keyword">in</span> [<span class="org-string">'1'</span>, <span class="org-string">'two'</span>, <span class="org-string">'3'</span>, <span class="org-string">'4'</span>]:
<span class="linenr">21: </span>        <span class="org-keyword">try</span>:
<span class="linenr">22: </span>            <span class="org-keyword">yield</span> <span class="org-builtin">int</span>(s)
<span class="linenr">23: </span>        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
<span class="linenr">24: </span>            <span class="org-keyword">yield</span> Error(e)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span class="org-keyword">def</span> <span class="org-function-name">print_negated</span>() -&gt; <span class="org-constant">None</span>:
<span class="linenr">27: </span>    <span class="org-keyword">for</span> n <span class="org-keyword">in</span> iter_numbers():
<span class="linenr">28: </span>        <span class="org-keyword">if</span> <span class="org-keyword">not</span> <span class="org-builtin">isinstance</span>(n, Error):
<span class="linenr">29: </span>            <span class="org-keyword">print</span>(-n)
<span class="linenr">30: </span>        <span class="org-keyword">else</span>:
<span class="linenr">31: </span>            <span class="org-keyword">print</span>(<span class="org-string">'ERROR! '</span> + <span class="org-builtin">str</span>(n.exc))
</pre>
</div>
<p>
Now, the default behavior is defensive:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">32: </span>print_negated() 
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
-1
ERROR! invalid literal for int() with base 10: 'two'
-3
-4

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
And if we set the error policy to non-defensive, we get exception as soon as we get parsing error:
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="linenr">33: </span><span class="org-variable-name">Error.defensive_policy</span> = <span class="org-constant">False</span>
<span class="linenr">34: </span>print_negated()
</pre>
</div>
<pre class="example">
Python output [exit code 1]:
-1
Traceback (most recent call last):
  File "input.py", line 33, in &lt;module&gt;
    print_negated()
  File "input.py", line 27, in print_negated
    for n in iter_numbers():
  File "input.py", line 24, in iter_numbers
    yield Error(e)
  File "input.py", line 14, in __init__
    raise exc
  File "input.py", line 22, in iter_numbers
    yield int(s)
ValueError: invalid literal for int() with base 10: 'two'

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
Even though you never actually return <code class="inline">Error</code> under the non-defensive policy, you <b>don't have to change any of the type signatures</b>: <code class="inline">Iterator[int]</code> is still a perfectly good <code class="inline">Iterator[Res[int]]</code>. Thanks, <a href="#org000000a">covariance</a>!
</p>
<p>
I'm using this technique in my <a href="https://github.com/karlicoss/kobuddy#as-a-standalone-app">Kobo parser</a> and control it via <samp class="inline">--errors</samp> argument.
On CI, it runs in non-defensive mode of course. However when other people use the library for the first time they, something is likely to fail. It deals with decoding binary blobs in unspecified format after all! So one can run it in defensive mode, get most of their data and just ignore (hopefully few) errors till they are fixed.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000019">
<h3 id="error_context"><a class="headerlink" href="#error_context">¶</a>Improving error context</h3>
<div class="outline-text-3" id="text-error_context">
<p>
If you remember <a href="#org0000006">the output</a>, we got a rather cryptic <samp class="inline">ERROR: Couldn't match regex!</samp>.
That's of course not desirable because you can't easily tell what exactly is causing the error.
</p>
<p>
Normally, you'd use  <a href="https://www.python.org/dev/peps/pep-3134/#explicit-exception-chaining">exception chaining</a>, i.e. <code class="inline">raise EXCEPTION from CAUSE</code> syntax <a class="coderef" href="#coderef-throw_exc" onmouseout="CodeHighlightOff(this, 'coderef-throw_exc');" onmouseover="CodeHighlightOn(this, 'coderef-throw_exc');">here</a>.
</p>
<div><span class="before-aside">
However the problem is that <code class="inline">raise ... from ...</code> is a compound statement, so you can't write <code class="inline">yield RuntimeError(entry) from e</code>.

</span><aside>see my investigation attempt <a href="https://stackoverflow.com/questions/58355639/why-raise-exception-from-cause-not-raise-exception-from-cause">here</a></aside></div>
<p>
I find it handy to have a helper function here: 
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">from</span> typing <span class="org-keyword">import</span> TypeVar
<span class="org-variable-name">E</span> = TypeVar(<span class="org-string">'E'</span>, bound=<span class="org-type">Exception</span>)
<span class="org-keyword">def</span> <span class="org-function-name">echain</span>(e: E, from_: <span class="org-type">Exception</span>) -&gt; E:
    <span class="org-variable-name">e.__cause__</span> = from_
    <span class="org-keyword">return</span> e
</pre>
</div>
<p>
, then you can write  <code class="inline">yield echain(RuntimeError(entry), from_=e)</code>, and use <code class="inline">traceback.format_exception</code> to unroll it and get the stacktrace.
The result looks like this:
</p>
<pre class="example">
* ERROR: Traceback (most recent call last):
        File "/tmp/tmp.afhyiITIK2", line 45, in iter_highlights
          yield parse_entry(entry.strip())
        File "/tmp/tmp.afhyiITIK2", line 26, in parse_entry
          assert groups is not None, "Couldn't match regex!"
      AssertionError: Couldn't match regex!
      
      The above exception was the direct cause of the following exception:
      
      RuntimeError: 
      My Life as a Quant: Reflections on Physics and Finance (Emanuel Derman)
      - Your Highlight on page 54 | Added on Tuesday, October 4, 2013 12:11:16 PM
      
      The Black-Scholes model allows us to determine the fair value of a stock option.
</pre>
<p>
Now that's better!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001a">
<h3 id="warnings"><a class="headerlink" href="#warnings">¶</a>Fine grained defensiveness</h3>
<div class="outline-text-3" id="text-warnings">
<p>
Remember <a href="#org0000001"><code class="inline">parse_entry</code></a>? Its return type is <code class="inline">Highlight</code>, so it can return a single highlight or throw a single error,
that will be handled by <code class="inline">iter_highlights</code>. 
</p>
<p>
If we change return type to <code class="inline">Iterator[Res[Highlight]]</code>, we can be more defensive and do some <b>neat fallbacks</b>:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">parse_entry</span>(entry: <span class="org-builtin">str</span>) -&gt; Iterator[Res[Highlight]]:
    <span class="org-variable-name">groups</span> = re.search(
        r<span class="org-string">'(?P&lt;title&gt;.*)$\n.*Highlight on Page (?P&lt;page&gt;\d+).*Added on (?P&lt;dts&gt;.*)$\n\n(?P&lt;text&gt;.*)$'</span>, 
        entry, 
        re.MULTILINE,
    )
    <span class="org-keyword">assert</span> groups <span class="org-keyword">is</span> <span class="org-keyword">not</span> <span class="org-constant">None</span>, <span class="org-string">"Couldn't match regex!"</span>
    <span class="org-variable-name">dts</span>   = groups[<span class="org-string">'dts'</span>]
    <span class="org-variable-name">title</span> = groups[<span class="org-string">'title'</span>]
    <span class="org-variable-name">page</span>  = groups[<span class="org-string">'page'</span>]
    <span class="org-variable-name">text</span>  = groups[<span class="org-string">'text'</span>]
    <span class="org-keyword">if</span> <span class="org-builtin">len</span>(dts) == 0:
        <span class="org-keyword">yield</span> <span class="org-type">Exception</span>(<span class="org-string">"Bad timestamp!"</span>)
        <span class="org-variable-name">dt</span> = datetime.now() <span class="org-comment-delimiter"># </span><span class="org-comment">might be better than no highlight at all</span>
    <span class="org-keyword">else</span>:
        <span class="org-variable-name">dt</span> = datetime.strptime(dts, <span class="org-string">'%A, %B %d, %Y %I:%M:%S %p'</span>)
    <span class="org-keyword">if</span> <span class="org-builtin">len</span>(text) == 0:
        <span class="org-keyword">yield</span> <span class="org-type">Exception</span>(<span class="org-string">"Empty highlight, something might be wrong"</span>)
    <span class="org-keyword">yield</span> Highlight(
        dt=dt,
        title=title,
        page=page,
        text=text,
    )
</pre>
</div>
<p>
You can think of <code class="inline">Exceptions</code> coming from <code class="inline">parse_entry</code> as sort of warnings and you can handle them accordingly in <code class="inline">iter_highlights</code>, e.g. attach extra context.
</p>
<p>
Of course, this complicates code, and you can't predict all possible errors anyway, so there is always some balance of how defensive you can be.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001b">
<h3 id="dataframe"><a class="headerlink" href="#dataframe">¶</a>Error values, revisited</h3>
<div class="outline-text-3" id="text-dataframe">
<p>
One case where I find <a href="#error_object">'special error value'</a> more or less appropriate is when your function returns a pandas <code class="inline">DataFrame</code>.
</p>
<p>
When manipulating dataframes, you typically don't iterate explicitly, but apply more idiomatic (and often efficient!) combinators like <code class="inline">merge</code>, <code class="inline">join</code>, <code class="inline">concat</code> etc,
 so it makes sense to try and keep errors inside the dataframe. For me, it looks somewhat like this:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">iter_workout_data</span>() -&gt; Iterable[ResT[Exercise, ParsingException]]:
    ...

<span class="org-keyword">def</span> <span class="org-function-name">rows</span>() -&gt; Iterable[Dict]:
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_workout_data():
        <span class="org-keyword">if</span> <span class="org-builtin">isinstance</span>(r, ParsingException):
            <span class="org-keyword">yield</span> {
                <span class="org-string">'timestamp'</span>: r.timestamp,
                <span class="org-string">'error'</span>    : <span class="org-string">'parsing failed'</span>,
            }
        <span class="org-keyword">else</span>: <span class="org-comment-delimiter"># </span><span class="org-comment">otherwise it's an instance of Exercise</span>
            <span class="org-keyword">yield</span> {
                <span class="org-string">'timestamp'</span>: r.timestamp,
                <span class="org-string">'exercise'</span> : r.exercise_name,
                <span class="org-string">'volume'</span>   : r.exercise_volume,
            }

<span class="org-keyword">def</span> <span class="org-function-name">make_dataframe</span>() -&gt; pandas.DataFrame:
    <span class="org-keyword">return</span> pandas.DataFrame(rows())
</pre>
</div>
<p>
It looks pretty clean since <code class="inline">DataFrame</code> constructor automatically creates the necessary columns and fills missing values with <code class="inline">None</code>.
(you can see some frame examples <a href="./heartbeats_vs_kcals.html">here</a>).
</p>
<p>
Then in the dataframe processing code I would typically check for presence of non-nil value in 'error' column and act accordingly. 
E.g. <a href="https://gateway.serph.network/ipfs/Qmc5hBuomCLzb25kg14dAesAcnRSJZHPvFSUifZUJexKRx">here</a> I'm using the timestamp attached to the parsing errors to plot them neatly close to the rest of data. 
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000001c">
<h3 id="cursed_pattern_matching"><a class="headerlink" href="#cursed_pattern_matching">¶</a>Cursed pattern matching mechanism</h3>
<div class="outline-text-3" id="text-cursed_pattern_matching">
<p>
This is forbidden knowledge liberated during the latest Area 51 raid. Tsss… don't tell the government.
</p>
<p>
Have to admit, this is a pretty weird idea that I haven't got practical use for, but still.   
</p>
<p>
What's a construction in Python language that's dispatching objects according to their type? <code class="inline">try/catch</code>!
</p>
<div class="org-src-container">
<pre class="src src-mypy"><span class="org-keyword">class</span> <span class="org-type">A</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>
<span class="org-keyword">class</span> <span class="org-type">B</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>
<span class="org-keyword">class</span> <span class="org-type">C</span>(<span class="org-type">Exception</span>): <span class="org-keyword">pass</span>

<span class="org-keyword">from</span> typing <span class="org-keyword">import</span> Any
<span class="org-keyword">def</span> <span class="org-function-name">dispatch</span>(x: Any) -&gt; <span class="org-constant">None</span>:
    <span class="org-keyword">try</span>:
        <span class="org-keyword">raise</span> x
    <span class="org-keyword">except</span> A <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(<span class="org-string">"Matched A!"</span>)
    <span class="org-keyword">except</span> B <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(<span class="org-string">"Matched B!"</span>)
    <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
        <span class="org-keyword">print</span>(f<span class="org-string">"Unhandled object: {type(e)} {e}"</span>)

dispatch(B())
dispatch(C())
dispatch(A())
</pre>
</div>
<pre class="example">
Python output [exit code 0]:
Matched B!
Unhandled object: &lt;class '__main__.C'&gt; 
Matched A!

Mypy output [exit code 0]:
Success: no issues found in 1 source file
</pre>
<p>
It certainly looks unconventional, and you can only use that as long as your object inherits from <code class="inline">Exception</code>.
</p>
<p>
We can exploit this for our specific case on <code class="inline">Union[T, Exception]</code> by using <a href="#unwrap"><code class="inline">unwrap</code></a>:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">def</span> <span class="org-function-name">print_books</span>():
    <span class="org-keyword">for</span> r <span class="org-keyword">in</span> iter_books():
        <span class="org-keyword">try</span>:
            <span class="org-variable-name">b</span> = unwrap(r)
        <span class="org-keyword">except</span> <span class="org-type">Exception</span> <span class="org-keyword">as</span> e:
            <span class="org-comment-delimiter"># </span><span class="org-comment">e has type Exception (duh!)</span>
            <span class="org-keyword">print</span>(f<span class="org-string">"* ERROR: {e}"</span>)
        <span class="org-keyword">else</span>:
            <span class="org-comment-delimiter"># </span><span class="org-comment">b has type Highlight!</span>
            <span class="org-keyword">print</span>(f<span class="org-string">'* {b.title}'</span>)
            <span class="org-keyword">for</span> h <span class="org-keyword">in</span> b.highlights:
                <span class="org-variable-name">text</span> = <span class="org-string">"\n      "</span>.join(wrap(h.text))
                <span class="org-keyword">print</span>(f<span class="org-string">'  - {h.dt:%d %b %Y %H:%M}  {text} [Page {h.page}]'</span>)
            <span class="org-keyword">print</span>()
</pre>
</div>
<p>
This looks a bit odd. We still have to type <code class="inline">Exception</code>, you can't just write <code class="inline">except e</code>, which hardly makes it different from <code class="inline">isinstance</code>. 
Note that we have to use <code class="inline">else</code> block: if you put code in it under <code class="inline">try</code>, you'll start catching exceptions coming from the printing code, which is unintended.
</p>
<p>
And the obvious downside is that there is a potential to forget to handle exception signaled by <code class="inline">unwrap</code> and mypy can't help you here.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000001e">
<h2 id="fin"><a class="headerlink" href="#fin">¶</a><span class="section-number-2">10</span> Closing points</h2>
<div class="outline-text-2" id="text-fin">
<ul class="org-ul">
<li>mypy is your best friend</li>
<li><p>
sometimes existing and simple things work better and cleaner
</p>
<p>
Not trying to advocate avoiding syntactic sugar, decorators and libraries at any cost, however you might experience friction
while trying to introduce them in more conservative teams.  
</p></li>
<li><p>
it's kind of ironic that you can't achieve similar level of safety and cleanliness in many statically typed programming languages
</p>
<p>
Python is often hated by static typing advocates (I suppose as any other dynamically typed language).
Have to admit, I was one of these haters few years ago. But in this case Python nails it.
</p></li>
<li><p>
writing is damn hard
</p>
<p>
Literate programming is even harder, however I'm glad I've started doing this in Emacs and Org mode.
That saved me from otherwise massive amounts of code duplication and reference rot.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org000001f">
<h2 id="links"><a class="headerlink" href="#links">¶</a><span class="section-number-2">11</span> Other links</h2>
<div class="outline-text-2" id="text-links">
<ul class="org-ul">
<li>A good overview of different approaches to error handling: <a href="http://joeduffyblog.com/2016/02/07/the-error-model">Joe Duffy - The Error Model</a></li>
<li><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0709r4.pdf">Zero-overhead deterministic exceptions: Throwing values</a> by Herb Sutter</li>
<li><a href="https://barahilia.github.io/blog/computers/2017/01/04/to-yield-or-not-to-yield.html">To yield or not to yield</a>: good summary of Python's generator's strengths</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000020">
<h2 id="org0000020"><a class="headerlink" href="#org0000020">¶</a><span class="section-number-2">12</span> --</h2>
<div class="outline-text-2" id="text-12">
<p>
Let me know what you think! I'm open to all feedback.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#mypy python">#mypy python</a></div>
        <!-- TODO post-date? -->
        <div class="date">26 October 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://lobste.rs/s/xxzwij/python_is_better_typed_than_you_think">lobste.rs</a></li>
    
        <li><a href="https://www.reddit.com/r/Python/comments/dplkz6/python_safer_typed_than_you_think">reddit</a></li>
    
        <li><a href="https://news.ycombinator.com/item?id=21397150">hackernews</a></li>
    
        <li><a href="https://news.ycombinator.com/item?id=21456706">hackernews</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_mypy_error_handling"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Using Orger to populate your tasks list</title>
    <link href="https://beepb00p.xyz/orger-todos.html" />
    <id>https://beepb00p.xyz/orger-todos.html</id>
    <published>2019-10-05T00:00:00Z</published>
    <updated>2019-10-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="orgmode productivity orger">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Using Orger to populate your tasks list | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Using Orger to populate your tasks list</h1>
    <div class="summary">Reading Reddit, building spaced repetition queue and quick todos from Telegram messages</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#reddit">1. reddit: better processing of saved Reddit items</a></li>
<li><a href="#telegram2org">2. telegram2org: one tap to create tasks from Telegram messages</a></li>
<li><a href="#hyp2org">3. hyp2org: create tasks from Hypothesis highlights</a></li>
<li><a href="#krill">4. krill: learn new words from your Kobo books</a></li>
<li><a href="#org0000004">5. ---</a></li>
</ul>
</div>
</div>
<p>
In <a href="orger.html">the first part</a> about Orger I wrote how I'm using it (in particular, the <code class="inline">orger.StaticView</code> component) to render my personal data as org-mode files
for easy, instant access and search.
</p>
<p>
Another generic application of Orger, is populating Org-mode files with outlines. 
In particular that means tasks for your agenda/spaced repetition routine or whatever else you could imagine it to be useful for.
</p>
<p>
Main goal was to minimize the overhead and distractions caused by creating todos by normal means (opening an app, copying some text, etc.).
Basically I want it to be completely seamless, almost without thinking at all.
</p>
<p>
You can use the target files as any of your normal org-mode files: modify contents, delete or reschedule tasks, etc.
When Orger detects new items they would be carefully and atomically appended to the end of file.
It keeps track of already processed items in a separate JSON file. All this nasty business is dealt with in <code class="inline">orger.InteractiveView</code> component.
</p>
<p>
You can find all of interactive Orger modules I'm using <a href="https://github.com/karlicoss/orger/search?q=InteractiveView">on Github</a>. 
</p>
<div class="outline-2" id="outline-container-org0000000">
<h2 id="reddit"><a class="headerlink" href="#reddit">¶</a><span class="section-number-2">1</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/reddit.py">reddit</a>: better processing of saved Reddit items</h2>
<div class="outline-text-2" id="text-reddit">
<p>
This one I have been sustainably using for almost a year now, so I believe it could be useful to many people.
</p>
<p>
I tend to be curious about lots of different topics so I'm subscribed to over 100 subreddits.
</p>
<p>
For the most part I'm reading Reddit passively and I can't afford spending much time on Reddit every day, so my system for years has been: reading updates for the past week on Sundays.
</p>
<p>
For few select subreddits that most interest me (e.g. <a href="https://www.reddit.com/r/QuantifiedSelf/">quantifiedself</a> or <a href="https://www.reddit.com/r/orgmode">orgmode</a>)
I read all updates, for the rest I just read weekly top.
</p>
<p>
I tend to do it from my phone on the go/in transport or while I'm waiting somewhere, so the concentration is not exactly perfect and many things are too awkward to read or browse on phone anyway.
</p>
<p>
So I tend to favorite interesting submissions (judging by the title) without reading them instead, and later once in a while when I'm at my desktop I have a deeper look at whatever I favorited.
</p>
<p>
This however gets a little clumsy. 
</p>
<ul class="org-ul">
<li><p>
saved <b>items can't be rearranged</b> in the Reddit interface and the only sort available is by 'saving time'
</p>
<p>
This would be ok if every time you processed your saved items you cleared all of them, but that's just not very realistic.
</p>
<p>
Some things take higher priority; some things just give you few thoughts now and you wanna action on it later.
So every time you process saved submissions, you end up going through same things all over again, and you have to remember where you stopped last time. 
That's quite distracting!
</p></li>
<li><p>
you <b>can't add private comments</b> to saved items
</p>
<p>
Using some annotation engine like <a href="https://hypothes.is">Hypothesis</a> on 'Saved' page would be too flaky if Reddit changes design.
You could annotate saved items directly, but then you won't have an overview on 'Saved' page.
</p></li>
<li><p>
sometimes posts/comments get deleted so if you look at saved item months later, you'd not know what have you saved anymore
</p>
<p>
While there are ways to read removed reddit comments, it's a bit distracting to do too and with orger you'd always have an original version of the item.
</p></li>
</ul>
<p>
How Orger solves that for me? Here's my typical workflow with <samp class="inline">reddit.org</samp> file:
</p>
<ul class="org-ul">
<li>I'm running <a href="https://github.com/karlicoss/rexport">reddit data exporter</a> and <samp class="inline">reddit.py</samp> every night automatically (via cron).</li>
<li>when I feel like reading some Reddit, I open <samp class="inline">reddit.org</samp> and jump to new items at the end of file (I can quickly tell them from old ones since they don't have a priority), and go through them</li>
<li>some things just get refiled immediately. E.g. if it's a recipe it would go to <samp class="inline">food.org</samp>, if it's something C++ related, it would go to <samp class="inline">cpp.org</samp>, etc.</li>
<li>what isn't refiled, I mark with a priority</li>
<li>when everything is prioritized, I select the whole file, call <code class="inline">org-sort-entries</code> and sort by priorities.</li>
<li><p>
now that everything looks a bit more manageable, I can action on the highest priority items (<code class="inline">#A</code> and <code class="inline">#B</code>) properly.
</p>
<p>
Some I just read and archive.
</p>
<p>
Some give me thoughts or ideas which I can add under the corresponding org-mode heading.
</p>
<p>
Some things just require actually acting on them (e.g. new library release), so I can mark it as TODO and schedule so it shows up in my agenda.
</p></li>
<li>also, once in a while I'll look through items with lower (<code class="inline">#C</code> / <code class="inline">#D</code>) priorities and bump them or archive if they become irrelevant.</li>
</ul>
<p>
Needless to say when I'm searching through all of my Org-mode files, items saved on Reddit pop up as well.
</p>
<p>
The only downside of my particular implementation is that items are not unmarked as 'Saved' on Reddit.
One could probably implement this with API call on archiving/marking item as done or something, I just didn't find it too big of a deal for me.
</p>
<p>
Here's how it looks for me (with content collapsed):
</p>
<div class="org-src-container">
<pre class="src src-org">
<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> </span><span class="org-org-priority">[#B]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-05-18 Sat 19:00]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/spacemacs/comments/bnlgkv/refactoring_in_spacemacs_using_iedit_and_helmedit/">Refactoring in Spacemacs using iedit and helm-edit</a></span><span class="org-org-level-1"> /r/spacemacs</span>
...
<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> </span><span class="org-org-priority">[#B]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-09-02 Mon 12:41]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/scifi/comments/cvy78o/searching_stories_with_super_intelligence_in/eyldzyb/">Searching stories with super intelligence in humans theme</a></span><span class="org-org-level-1"> /r/scifi </span><span class="org-org-level-1"><span class="org-org-tag">:read:</span></span>
...
<span class="org-org-level-1">* </span><span class="org-org-priority">[#C]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-06-21 Fri 06:50]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/AskMen/comments/c2vw9p/how_do_relationship_fights_affect_men/ermvj9a/">How do relationship fights affect men?</a></span><span class="org-org-level-1"> /r/AskMen </span>
...
<span class="org-org-level-1">* </span><span class="org-org-priority">[#D]</span><span class="org-org-level-1"> </span><span class="org-org-date">[2019-01-15 Tue 08:30]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/bodyweightfitness/comments/afutqw/mindmuscle_connection_whats_the_evidence/">Mind-Muscle Connection: What's the evidence?</a></span><span class="org-org-level-1"> /r/bodyweightfitness </span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-14 Sat 09:00]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/biology/comments/d1u5je/kinesin_a_motor_protein_walks_different_proteins/">Kinesin, a motor protein, "walks" different proteins from one place to another</a></span><span class="org-org-level-1"> /r/biology</span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-24 Tue 19:10]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/Biohackers/comments/d8ky2y/why_you_should_not_blindly_trust_nutrition/">Why you should not blindly trust nutrition experts but instead self experiment.</a></span><span class="org-org-level-1"> /r/Biohackers</span>
...
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-10-03 Thu 21:51]</span><span class="org-org-level-1"> </span><span class="org-org-link"><a href="https://reddit.com/r/decentralization/comments/dcxtzm/is_there_an_opensource_decentralized_search_engine/">Is there an opensource decentralized search engine?</a></span><span class="org-org-level-1"> /r/decentralization</span>


</pre>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="telegram2org"><a class="headerlink" href="#telegram2org">¶</a><span class="section-number-2">2</span> <a href="https://github.com/karlicoss/telegram2org">telegram2org</a>: one tap to create tasks from Telegram messages</h2>
<div class="outline-text-2" id="text-telegram2org">
<p>
</p>
<p>
Imagine a friend asked you for something, or sent you a link or a video, but you don't have time to process that right at the moment.
</p>
<p>
Normally I'd share their message to my TODO list app so I can process it later.
However, official Android app for Telegram doesn't have sharing capabilities.
</p>
<p>
This is a tool that allows you to overcome this restriction by forwarding messages you want to
remember about to a special private channel. Then it grabs the messages from this private channel and creates TODO items from it!
</p>
<p>
That way you keep your focus while not being mean ignoring your friends' messages.
</p>
<p>
I keep tags for the people I communicate most with (creepy I know :P ), so it also maps select people's names to tags,
so I can quickly have an overview of things to discuss or reply to.
</p>
<p>
It would be fairly straightforward to modify the code for other instant messengers, although there are some potential issues.
For instance, Whatsapp or Facebook Messenger don't have an API. You can potentially web scrape it or reverse engineer the database on your phone to get messages,
but I'm personally not motivated enough since I'm not using them much. Unless many people lack this, so let me know!
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="hyp2org"><a class="headerlink" href="#hyp2org">¶</a><span class="section-number-2">3</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/hyp2org.py">hyp2org</a>: create tasks from Hypothesis highlights</h2>
<div class="outline-text-2" id="text-hyp2org">
<p>
</p>
<p>
Sometimes when I'm annotating using <a href="https://hypothes.is">Hypothesis</a>, I want to think more
about specific highlights, google more about them later or generally act on them somehow.
</p>
<p>
Normally you'd have to copy the URL, highlighted text and create a task from it.
</p>
<p>
This script does that automatically, only thing that you have to do is to mark it with a tag or type 'todo'
in the annotation text.
</p>
<p>
Items get scheduled and appear on my org-mode agenda,
so I can un/reschedule them if they don't require immediate attention.
</p>
<p>
Modules for <a href="https://github.com/karlicoss/orger/blob/master/modules/kobo2org.py">Kobo</a>
and <a href="https://github.com/karlicoss/orger/blob/master/modules/ip2org.py">Instapaper</a>
work in the pretty much same way.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="krill"><a class="headerlink" href="#krill">¶</a><span class="section-number-2">4</span> <a href="https://github.com/karlicoss/orger/blob/master/modules/krill.py">krill</a>: learn new words from your Kobo books</h2>
<div class="outline-text-2" id="text-krill">
<p>
</p>
<p>
Automatically import stuff from my Kobo backups into org-mode for further spaced repetition (via org-drill in my case).
Mainly learning vocabulary with it.
</p>
<p>
It uses <a href="https://github.com/karlicoss/kobuddy">kobuddy</a> to extract data from Kobo exports.
</p>
<p>
The name stands for K[oboD]rill.
</p>
<p>
I'm using <a href="https://orgmode.org/worg/org-contrib/org-drill.html">org-drill</a> for Spaced repetition, but you could potentially use same principle to 
import cards in Anki or any other spaced repetition engine you like.
</p>
<p>
Here's how it looks for me:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> yesterday [ Gestern ]                                          </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-10-17 Thu&gt;</span>
<span class="org-org-special-keyword">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span>  <span class="org-org-date">[2018-11-16 Fri 20:30]</span>
<span class="org-org-special-keyword">:ID:</span>       <span class="org-org-property-value">986e4686-75ec-40a9-9827-f9458bcb2811</span>
<span class="org-org-special-keyword">:DRILL_LAST_INTERVAL:</span> <span class="org-org-property-value">200.7488</span>
<span class="org-org-special-keyword">:DRILL_REPEATS_SINCE_FAIL:</span> <span class="org-org-property-value">6</span>
<span class="org-org-special-keyword">:DRILL_TOTAL_REPEATS:</span> <span class="org-org-property-value">5</span>
<span class="org-org-special-keyword">:DRILL_FAILURE_COUNT:</span> <span class="org-org-property-value">0</span>
<span class="org-org-special-keyword">:DRILL_AVERAGE_QUALITY:</span> <span class="org-org-property-value">4.6</span>
<span class="org-org-special-keyword">:DRILL_EASE:</span> <span class="org-org-property-value">2.8</span>
<span class="org-org-special-keyword">:DRILL_LAST_QUALITY:</span> <span class="org-org-property-value">4</span>
<span class="org-org-special-keyword">:DRILL_LAST_REVIEWED:</span> <span class="org-org-date">[2019-03-30 Sat 21:27]</span>
<span class="org-org-special-keyword">:END:</span>
from Learn German with Stories: Café in Berlin - 10 short stories for beginners

<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> disquieting                                                    </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-09-29 Sun&gt;</span>
<span class="org-org-special-keyword">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span> <span class="org-org-date">[2019-08-27 Tue 20:12]</span>
<span class="org-org-special-keyword">:ID:</span>       <span class="org-org-property-value">28652353-c905-46b1-b4a5-bc2daf71125d</span>
<span class="org-org-special-keyword">:DRILL_LAST_INTERVAL:</span> <span class="org-org-property-value">9.2418</span>
<span class="org-org-special-keyword">:DRILL_REPEATS_SINCE_FAIL:</span> <span class="org-org-property-value">3</span>
<span class="org-org-special-keyword">:DRILL_TOTAL_REPEATS:</span> <span class="org-org-property-value">2</span>
<span class="org-org-special-keyword">:DRILL_FAILURE_COUNT:</span> <span class="org-org-property-value">0</span>
<span class="org-org-special-keyword">:DRILL_AVERAGE_QUALITY:</span> <span class="org-org-property-value">3.5</span>
<span class="org-org-special-keyword">:DRILL_EASE:</span> <span class="org-org-property-value">2.36</span>
<span class="org-org-special-keyword">:DRILL_LAST_QUALITY:</span> <span class="org-org-property-value">4</span>
<span class="org-org-special-keyword">:DRILL_LAST_REVIEWED:</span> <span class="org-org-date">[2019-09-20 Fri 00:17]</span>
<span class="org-org-special-keyword">:END:</span>
 from Worm

<span class="org-org-level-1">* </span><span class="org-org-todo">TODO</span><span class="org-org-level-1"> Plötzlich                                                      </span><span class="org-org-level-1"><span class="org-org-tag">:drill:</span></span>
  <span class="org-org-special-keyword">SCHEDULED:</span> <span class="org-org-date">&lt;2019-10-05 Sat&gt;</span>
<span class="org-org-special-keyword">:PROPERTIES:</span>
<span class="org-org-special-keyword">:CREATED:</span> <span class="org-org-date">[2019-10-04 Fri 14:19]</span>
<span class="org-org-special-keyword">:END:</span>
 from Learn German with Stories: Café in Berlin - 10 short stories for beginners
</pre>
</div>
<p>
Last item was just appended after I connected my reader to computer, whereas two other have been there for a while.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><span class="section-number-2">5</span> ---</h2>
<div class="outline-text-2" id="text-5">
<p>
Let me know what you think! I'm open to all feedback.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#orgmode">#orgmode</a> <a class="post-tag" href="./tags.html#productivity">#productivity</a> <a class="post-tag" href="./tags.html#orger">#orger</a></div>
        <!-- TODO post-date? -->
        <div class="date">05 October 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/dgdej4/orger_part_ii_reading_reddit_via_orgmode_quick">/r/orgmode</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_orger_todos"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Orger: plaintext reflection of your digital self</title>
    <link href="https://beepb00p.xyz/orger.html" />
    <id>https://beepb00p.xyz/orger.html</id>
    <published>2019-09-26T00:00:00Z</published>
    <updated>2019-09-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm orgmode orger">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Orger: plaintext reflection of your digital self | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Orger: plaintext reflection of your digital self</h1>
    <div class="summary">Mirror your personal data as org-mode for instant access and search</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#intro">1. Intro</a></li>
<li><a href="#what">2. What Orger does</a></li>
<li><a href="#demo">3. Demo: displaying Pocket data via Orger</a></li>
<li><a href="#examples">4. More examples</a>
<ul>
<li><a href="#org0000005">instapaper</a></li>
<li><a href="#org0000006">hypothesis</a></li>
<li><a href="#org0000007">kobo</a></li>
<li><a href="#org0000008">pinboard</a></li>
<li><a href="#org0000009">pdfs</a></li>
<li><a href="#org000000a">twitter</a></li>
<li><a href="#org000000b">rtm2org</a></li>
<li><a href="#org000000c">telegram2org</a></li>
<li><a href="#org000000d">reddit</a></li>
</ul>
</li>
<li><a href="#why_hard">5. It does sound very simple. Does that really deserve a post?</a></li>
<li><a href="#org0000010">6. What makes Orger good?</a></li>
<li><a href="#using">7. Using Orger views</a>
<ul>
<li><a href="#org0000011">Typical use patterns</a></li>
</ul>
</li>
<li><a href="#improvements">8. Potential improvements</a>
<ul>
<li><a href="#org0000013"><span class="todo TODO">TODO</span> more frequent, ideally realtime updates to views</a></li>
<li><a href="#org0000014"><span class="todo TODO">TODO</span> alternative export formats</a></li>
<li><a href="#org0000015"><span class="todo TODO">TODO</span> two-way data flow</a></li>
<li><a href="#org0000016"><span class="todo TODO">TODO</span> potential for race condition</a></li>
</ul>
</li>
<li><a href="#org0000018">9. ----</a></li>
</ul>
</div>
</div>
<p>
TLDR: I'll write about <a href="https://github.com/karlicoss/orger">orger</a>, a tool I'm using to convert my personal data into easily readable and searchable org-mode views.
I'll present some examples and use cases, that will hopefully be helpful to you as well even if you are not sold by using my tool.
</p>
<p>
There is also <a href="orger-todos.html">second part</a> where I'm explaining how it can be used to process Reddit, create quick tasks from Telegram messages and help with spaced repetition.
If you're impatient, you can jump straight to a <a href="#demo">demo</a>.
</p>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="intro"><a class="headerlink" href="#intro">¶</a><span class="section-number-2">1</span> Intro</h2>
<div class="outline-text-2" id="text-intro">
<p>
I consume lots of digital content (books, articles, reddit, youtube, reddit, etc.) and most of it I find somewhat useful and insightful.
I want to use that knowledge later, act and build on it. But there's an obstacle: human brain.
</p>
<p>
It would be cool to be capable of always remembering and instantly recalling information you've interacted with, metadata and your thoughts on it.
Until we get augmented though, there are two options: first is just to accept it and live with it. You might have guessed this is not the option I'm taking.
</p>
<div><span class="before-aside">
Second option is compensating for your sloppy meaty memory and having information you've read at hand and a quick way of searching over it. 

</span><aside>see <a class="post-tag" href="./tags.html#extendedmind">#extendedmind</a></aside></div>
<p>
<a id="org0000000"></a>
That sounds simple enough but as with many simple things, on practice you run into obstacles. 
I'll give some I've personally been overcoming as examples:
</p>
<ul class="org-ul">
<li>convenience of access, e.g.:
<ul class="org-ul">
<li>to access highlights and notes on my Kobo ebook I need to actually reach my reader and tap through e-ink touch screen. Not much fun!</li>
<li>if you want to search over annotations in your PDF collections… well good luck, I'm just not aware of such a tool. Let alone the fact that many pdf viewers wouldn't even let you search through highlights within a single opened PDF file. TODO link annotations</li>
<li>there is no easy way to access all of your twitter favorites, people suggest using hacks like <a href="https://webapps.stackexchange.com/a/131374/68104">autoscroll extension</a>.</li>
</ul></li>
<li>searching data, e.g.:
<ul class="org-ul">
<li>search function often just isn't available at all or search is not incremental, e.g. on Instapaper, you can't restrict search to highlights</li>
<li>builtin browser search (<code class="inline">Ctrl-F</code>) sucks for the most part: it's not very easy to navigate as you don't get previews and you have to look through every match</li>
<li>sometimes you vaguely recall reading about something but don't remember where exactly. Was it on stackoverflow? Or in some github issue? Or in a conversation with friend?</li>
</ul></li>
<li>data ownership and liberation, e.g.
<ul class="org-ul">
<li>what happens if data disappears or service is down (temporary/permanently) or banned by your government?</li>
<li><div><span class="before-aside">99% of services don't have support for offline mode. This may be just a small inconvenience if you're on a train or something, but there is more to it.
What if some sort of apocalypse happens and you lose all access to data? 
That depends on your paranoia level of course, and apocalypse is bad enough, but my take on it is that at least I'd have my data :) </span><aside>see <a class="post-tag" href="./tags.html#offline">#offline</a></aside></div></li>
<li>if you delete a book on Kobo, not only you can't access its annotations, but they seem to get <b>wiped</b> from the database.</li>
<li>in 2018, instapaper was unavailable in Europe for several months (!) due to missing the GDPR deadline</li>
</ul></li>
</ul>
<p>
Thinking about that and tinkering helped me understand what I want: some sort of <b><b>search engine</b></b>, over my <b><b>personal data</b></b>, with <b><b>uniform</b></b> and <b><b>always available</b></b> way of accessing it.
</p>
<p>
So, I present you a system that I've developed and that solves all my problems™: <a href="https://github.com/karlicoss/orger">orger</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="what"><a class="headerlink" href="#what">¶</a><span class="section-number-2">2</span> What Orger does</h2>
<div class="outline-text-2" id="text-what">
<p>
It's really so quite trivial that it's almost stupid. Orger provides a simple python API to render any data as an Org-mode file. It's easier to give an example:
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">from</span> orger <span class="org-keyword">import</span> StaticView
<span class="org-keyword">from</span> orger.inorganic <span class="org-keyword">import</span> node, link
<span class="org-keyword">from</span> orger.common <span class="org-keyword">import</span> dt_heading

<span class="org-keyword">import</span> my.github_data

<span class="org-keyword">class</span> <span class="org-type">Github</span>(StaticView):
  <span class="org-keyword">def</span> <span class="org-function-name">get_items</span>(<span class="org-keyword">self</span>):
    <span class="org-keyword">for</span> event <span class="org-keyword">in</span> my.github_data.get_events():
      <span class="org-keyword">yield</span> node(dt_heading(event.dt, event.summary))

Github.main()
</pre>
</div>
<p>
That ten line program results in a file <samp class="inline">Github.org</samp>:
</p>
<div class="org-src-container">
<pre class="src src-org"><span class="org-comment"># AUTOGENERATED BY /code/orger/github.py</span>

<span class="org-org-level-1">* </span><span class="org-org-date">[2016-10-30 Sun 10:29]</span><span class="org-org-level-1"> opened PR Add </span><span class="org-org-level-1"><span class="org-underline">__enter__</span></span><span class="org-org-level-1"> and </span><span class="org-org-level-1"><span class="org-underline">__exit__</span></span><span class="org-org-level-1"> to Pool stub</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-11-10 Thu 09:29]</span><span class="org-org-level-1"> opened PR Update gradle to 2.14.1 and gradle plugin to 2.1.1</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-11-16 Wed 20:20]</span><span class="org-org-level-1"> commented on issue Linker error makes it impossible to use a stack-provided ghc</span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2016-12-30 Fri 11:57]</span><span class="org-org-level-1"> commented on issue Fix performance in the rare case of hashCode evaluating to zero </span>
<span class="org-org-level-1">* </span><span class="org-org-date">[2019-09-21 Sat 16:51]</span><span class="org-org-level-1"> commented on issue Tags containing letters outside of a-zA-Z</span>
....
</pre>
</div>
<p>
Even with event summaries only it can already be very useful to search over. What you can potentially do really depends on your imagination and needs! You can also add:
</p>
<ul class="org-ul">
<li>links</li>
<li>tags</li>
<li>timestamps</li>
<li>properties</li>
<li>child nodes</li>
</ul>
<p>
See <a href="#examples">'Examples'</a> section for more.
</p>
<p>
So as you can see orger itself is a really not sophisticated tool, at least until you spend time trying to reimplement the same.
As always the devil is in the details (look at that cheeky <code class="inline">my.github_data</code> import), which I'll explain <a href="#org0000002">further</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="demo"><a class="headerlink" href="#demo">¶</a><span class="section-number-2">3</span> Demo: displaying Pocket data via Orger</h2>
<div class="outline-text-2" id="text-demo">
<p>
I've documented one of modules, <a href="https://github.com/karlicoss/orger/blob/master/modules/pocket_demo.py"><samp class="inline">pocket_demo</samp></a> so you could get the sense of using Orger.
</p>
<details><summary>Click to view the code</summary>
<div class="org-src-container">
<pre class="src src-python"><span class="org-comment-delimiter">#</span><span class="org-comment">!/usr/bin/env python3</span>
<span class="org-doc">"""</span>
<span class="org-doc">Demo Orger adapter for Pocket data. For documentation purposes, so please modify pocket.py if you want to contribute.</span>
<span class="org-doc">"""</span>

<span class="org-doc">"""</span>
<span class="org-doc">First we define some abstractions for Pocket entities (articles and highlights).</span>

<span class="org-doc">While it's not that necessary and for one script you can get away with using json directly,</span>
<span class="org-doc"> it does help to separate parsing and rendering, allows you to reuse parsing for other projects</span>
<span class="org-doc"> and generally makes everything clean.</span>

<span class="org-doc">Also see https://github.com/karlicoss/my package for some inspiration.</span>
<span class="org-doc">"""</span>


<span class="org-keyword">from</span> datetime <span class="org-keyword">import</span> datetime
<span class="org-keyword">from</span> pathlib <span class="org-keyword">import</span> Path
<span class="org-keyword">from</span> typing <span class="org-keyword">import</span> NamedTuple, Sequence, Any

<span class="org-keyword">class</span> <span class="org-type">Highlight</span>(NamedTuple):
    <span class="org-doc">"""</span>
<span class="org-doc">    Abstract representation of Pocket highlight</span>
<span class="org-doc">    """</span>
    json: Any

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">text</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'quote'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">created</span>(<span class="org-keyword">self</span>) -&gt; datetime:
        <span class="org-keyword">return</span> datetime.strptime(<span class="org-keyword">self</span>.json[<span class="org-string">'created_at'</span>], <span class="org-string">'%Y-%m-%d %H:%M:%S'</span>)


<span class="org-keyword">class</span> <span class="org-type">Article</span>(NamedTuple):
    <span class="org-doc">"""</span>
<span class="org-doc">    Abstract representation of Pocket saved page</span>
<span class="org-doc">    """</span>
    json: Any

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">url</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'given_url'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">title</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-keyword">self</span>.json[<span class="org-string">'given_title'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">pocket_link</span>(<span class="org-keyword">self</span>) -&gt; <span class="org-builtin">str</span>:
        <span class="org-keyword">return</span> <span class="org-string">'https://app.getpocket.com/read/'</span> + <span class="org-keyword">self</span>.json[<span class="org-string">'item_id'</span>]

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">added</span>(<span class="org-keyword">self</span>) -&gt; datetime:
        <span class="org-keyword">return</span> datetime.fromtimestamp(<span class="org-builtin">int</span>(<span class="org-keyword">self</span>.json[<span class="org-string">'time_added'</span>]))

    <span class="org-type">@property</span>
    <span class="org-keyword">def</span> <span class="org-function-name">highlights</span>(<span class="org-keyword">self</span>) -&gt; Sequence[Highlight]:
        <span class="org-variable-name">raw</span> = <span class="org-keyword">self</span>.json.get(<span class="org-string">'annotations'</span>, [])
        <span class="org-keyword">return</span> <span class="org-builtin">list</span>(<span class="org-builtin">map</span>(Highlight, raw))

    <span class="org-comment-delimiter"># </span><span class="org-comment">TODO add tags?</span>


<span class="org-keyword">def</span> <span class="org-function-name">get_articles</span>(json_path: Path) -&gt; Sequence[Article]:
    <span class="org-doc">"""</span>
<span class="org-doc">    Parses Pocket export produced by https://github.com/karlicoss/pockexport</span>
<span class="org-doc">    """</span>
    <span class="org-keyword">import</span> json
    <span class="org-variable-name">raw</span> = json.loads(json_path.read_text())[<span class="org-string">'list'</span>]
    <span class="org-keyword">return</span> <span class="org-builtin">list</span>(<span class="org-builtin">map</span>(Article, raw.values()))

<span class="org-string">"""</span>
<span class="org-string">Ok, now we can get to implementing the adapter.</span>
<span class="org-string">"""</span>
<span class="org-keyword">from</span> orger <span class="org-keyword">import</span> StaticView
<span class="org-string">"""</span>
<span class="org-string">StaticView means it's meant to be read-only view onto data (as opposed to InteractiveView).</span>
<span class="org-string">"""</span>
<span class="org-keyword">from</span> orger.inorganic <span class="org-keyword">import</span> node, link
<span class="org-keyword">from</span> orger.common <span class="org-keyword">import</span> dt_heading


<span class="org-keyword">class</span> <span class="org-type">PocketView</span>(StaticView):
    <span class="org-keyword">def</span> <span class="org-function-name">get_items</span>(<span class="org-keyword">self</span>):
        <span class="org-doc">"""</span>
<span class="org-doc">        get_items returns a sequence/iterator of nodes</span>
<span class="org-doc">        see orger.inorganic.OrgNode to find out about attributes you can use</span>
<span class="org-doc">        """</span>
        <span class="org-variable-name">export_file</span> = <span class="org-keyword">self</span>.cmdline_args.<span class="org-builtin">file</span> <span class="org-comment-delimiter"># </span><span class="org-comment">see setup_parser</span>
        <span class="org-keyword">for</span> a <span class="org-keyword">in</span> get_articles(export_file):
            <span class="org-keyword">yield</span> node(
                heading=dt_heading(
                    a.added,
                    link(title=a.title, url=a.url)
                ),
                body=link(title=<span class="org-string">'Pocket link'</span>, url=a.pocket_link), <span class="org-comment-delimiter"># </span><span class="org-comment">permalink is pretty convenient to jump straight into Pocket app</span>
                children=[node( <span class="org-comment-delimiter"># </span><span class="org-comment">comments are displayed as org-mode child entries</span>
                    heading=dt_heading(hl.created, hl.text)
                ) <span class="org-keyword">for</span> hl <span class="org-keyword">in</span> a.highlights]
            )


<span class="org-keyword">def</span> <span class="org-function-name">setup_parser</span>(p):
    <span class="org-doc">"""</span>
<span class="org-doc">    Optional hooks for extra arguments if you need them in your adapter</span>
<span class="org-doc">    """</span>
    p.add_argument(<span class="org-string">'--file'</span>, <span class="org-builtin">type</span>=Path, <span class="org-builtin">help</span>=<span class="org-string">'JSON file from API export'</span>, required=<span class="org-constant">True</span>)


<span class="org-keyword">if</span> <span class="org-builtin">__name__</span> == <span class="org-string">'__main__'</span>:
    <span class="org-string">"""</span>
<span class="org-string">    Usage example: ./pocket.py --file /backups/pocket/last-backup.json --to /data/orger/pocket.org</span>
<span class="org-string">    """</span>
    PocketView.main(setup_parser=setup_parser)

<span class="org-string">"""</span>
<span class="org-string">Example pocket.org output:</span>

<span class="org-string"># AUTOGENERATED BY /L/zzz_syncthing/coding/orger/pocket.py</span>

<span class="org-string">* [2018-07-09 Mon 10:56] [[https://www.gwern.net/Complexity-vs-AI][Complexity no Bar to AI - Gwern.net]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1949330650][Pocket link]]</span>
<span class="org-string">* [2016-10-21 Fri 14:42] [[https://johncarlosbaez.wordpress.com/2016/09/09/struggles-with-the-continuum-part-2/][Struggles with the Continuum (Part 2) | Azimuth]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1407671000][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:25] [[http://www.scottaaronson.com/blog/?p=2464][Bell inequality violation finally done right]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1042711293][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:24] [[https://packetzoom.com/blog/how-to-test-your-app-in-different-network-conditions.html][How to test your app in different network conditions -]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1188624587][Pocket link]]</span>
<span class="org-string">* [2016-05-31 Tue 18:24] [[http://www.schibsted.pl/2016/02/hood-okhttps-cache/][What's under the hood of the OkHttp's cache?]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1191143185][Pocket link]]</span>
<span class="org-string">* [2016-03-15 Tue 17:27] [[http://joeduffyblog.com/2016/02/07/the-error-model/][Joe Duffy - The Error Model]]</span>
<span class="org-string"> [[https://app.getpocket.com/read/1187239791][Pocket link]]</span>
<span class="org-string">** [2019-09-25 Wed 18:20] A bug is a kind of error the programmer didn’t expect. Inputs weren’t validated correctly, logic was written wrong, or any host of problems have arisen.</span>
<span class="org-string">** [2019-09-25 Wed 18:19] First, throwing an exception is usually ridiculously expensive. This is almost always due to the gathering of a stack trace.</span>
<span class="org-string">** [2019-09-25 Wed 18:20] In other words, an exception, as with error codes, is just a different kind of return value!</span>
<span class="org-string">"""</span>
</pre>
</div>
</details>
<details><summary>Click to view the output</summary>
<div id="content">
<div class="outline-2" id="outline-container-org6385060">
<h2 id="org6385060"><a class="headerlink" href="#org6385060">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2018-07-09 Mon 10:56] </span></span> <a href="https://www.gwern.net/Complexity-vs-AI">Complexity no Bar to AI - Gwern.net</a></h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://app.getpocket.com/read/1949330650">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgf66ad5f">
<h2 id="orgf66ad5f"><a class="headerlink" href="#orgf66ad5f">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-10-21 Fri 14:42] </span></span> <a href="https://johncarlosbaez.wordpress.com/2016/09/09/struggles-with-the-continuum-part-2/">Struggles with the Continuum (Part 2) | Azimuth</a></h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://app.getpocket.com/read/1407671000">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orga907d2c">
<h2 id="orga907d2c"><a class="headerlink" href="#orga907d2c">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:25] </span></span> <a href="http://www.scottaaronson.com/blog/?p=2464">Bell inequality violation finally done right</a></h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://app.getpocket.com/read/1042711293">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgaa7b53a">
<h2 id="orgaa7b53a"><a class="headerlink" href="#orgaa7b53a">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:24] </span></span> <a href="https://packetzoom.com/blog/how-to-test-your-app-in-different-network-conditions.html">How to test your app in different network conditions -</a></h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="https://app.getpocket.com/read/1188624587">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org01f1d77">
<h2 id="org01f1d77"><a class="headerlink" href="#org01f1d77">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-05-31 Tue 18:24] </span></span> <a href="http://www.schibsted.pl/2016/02/hood-okhttps-cache/">What's under the hood of the OkHttp's cache?</a></h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="https://app.getpocket.com/read/1191143185">Pocket link</a>
</p>
</div>
</div>
<div class="outline-2" id="outline-container-orgdd27fdd">
<h2 id="orgdd27fdd"><a class="headerlink" href="#orgdd27fdd">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2016-03-15 Tue 17:27] </span></span> <a href="http://joeduffyblog.com/2016/02/07/the-error-model/">Joe Duffy - The Error Model</a></h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://app.getpocket.com/read/1187239791">Pocket link</a>
</p>
</div>
<div class="outline-3" id="outline-container-org92bca32">
<h3 id="org92bca32"><a class="headerlink" href="#org92bca32">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:20] </span></span> A bug is a kind of error the programmer didn’t expect. Inputs weren’t validated correctly, logic was written wrong, or any host of problems have arisen.</h3>
</div>
<div class="outline-3" id="outline-container-org41ce646">
<h3 id="org41ce646"><a class="headerlink" href="#org41ce646">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:19] </span></span> First, throwing an exception is usually ridiculously expensive. This is almost always due to the gathering of a stack trace.</h3>
</div>
<div class="outline-3" id="outline-container-orge27b04d">
<h3 id="orge27b04d"><a class="headerlink" href="#orge27b04d">¶</a><span class="timestamp-wrapper"><span class="timestamp">[2019-09-25 Wed 18:20] </span></span> In other words, an exception, as with error codes, is just a different kind of return value!</h3>
</div>
</div>
</div>
</details>
<p>
As you can see it's quite easy to search in your highlights and jump straight in the pocket app to the article you were reading.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000e">
<h2 id="examples"><a class="headerlink" href="#examples">¶</a><span class="section-number-2">4</span> More examples</h2>
<div class="outline-text-2" id="text-examples">
<p>
I'm using more than ten different Orger modules, most of which I've moved into the <a href="https://github.com/karlicoss/orger/tree/master/modules">repository</a>. Here I'll describe some featured views I'm generating.
</p>
<p>
To give you a heads up, if you read the code, you'll see bunch of imports like <code class="inline">from my.hypothesis import ...</code>. 
I find it easier to move all data parsing in a separate <a href="https://github.com/karlicoss/my"><samp class="inline">my</samp></a> package, that deals with parsing and converting input data (typically, some JSON). 
That makes everything less messy, separates data and rendering and lets me reuse abstract models in other tools. 
Also that lets me access my data from any python code, which makes it way easier to use and interact with data.
</p>
<p>
Some of these are still private so if you're interested in something not present in the github repo, please don't be shy and open an issue so I can prioritize.
</p>
<p>
Hopefully the code is readable enough and will give you some inspiration. 
If you find something confusing or you write your own module and want to contribute, please feel free to open issue/PR!
</p>
</div>
<div class="outline-3" id="outline-container-org0000005">
<h3 id="org0000005"><a class="headerlink" href="#org0000005">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/instapaper.py">instapaper</a></h3>
<div class="outline-text-3" id="text-org0000005">
<p>
Instapaper <a href="./annotating.html#instapaper">doesn't have search</a> over annotations, so I implemented my own!
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="org0000006"><a class="headerlink" href="#org0000006">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/hypothesis.py">hypothesis</a></h3>
<div class="outline-text-3" id="text-org0000006">
<p>
<a href="https://hypothes.is">Hypothesis</a> does have search, but it's still way quicker for me to invoke search in Emacs (takes literally less than a second) than do that in web browser.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000007">
<h3 id="org0000007"><a class="headerlink" href="#org0000007">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/kobo.py">kobo</a></h3>
<div class="outline-text-3" id="text-org0000007">
<p>
Generates views for all highlights and comments along with book titles from my Kobo database export.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="org0000008"><a class="headerlink" href="#org0000008">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/pinboard.py">pinboard</a></h3>
<div class="outline-text-3" id="text-org0000008">
<p>
Searches over my Pinboard bookmarks.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="org0000009"><a class="headerlink" href="#org0000009">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/pdfs.py">pdfs</a></h3>
<div class="outline-text-3" id="text-org0000009">
<p>
Crawls my filesystem for PDF files and collects all highlights and comments in a single view.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="org000000a"><a class="headerlink" href="#org000000a">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/twitter.py">twitter</a></h3>
<div class="outline-text-3" id="text-org000000a">
<p>
It's got two modes
</p>
<ul class="org-ul">
<li>First mode generates a view of everything I've ever tweeted, so I can search over it.</li>
<li>Second mode generates a view of all older tweets from the previous years posted on the same day. I find it quite fascinating to read through it and observe how I've been changing over years.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="org000000b"><a class="headerlink" href="#org000000b">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/rtm2org.py">rtm2org</a></h3>
<div class="outline-text-3" id="text-org000000b">
<p>
I stopped using Remember The Milk a while ago, but there are still some tasks and notes I've left behind, which I'm slowly moving to org-mode or canceling over time.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000c">
<h3 id="org000000c"><a class="headerlink" href="#org000000c">¶</a><a href="https://github.com/karlicoss/telegram2org">telegram2org</a></h3>
<div class="outline-text-3" id="text-org000000c">
<p>
Lets me create todo tasks from Telegram messages in couple of taps (you can't use share function on them in Android).
</p>
<p>
I write about it <a href="./orger-todos.html#telegram2org">in the second part</a>.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000d">
<h3 id="org000000d"><a class="headerlink" href="#org000000d">¶</a><a href="https://github.com/karlicoss/orger/blob/master/modules/reddit.py">reddit</a></h3>
<div class="outline-text-3" id="text-org000000d">
<p>
Displays and lets me search my Reddit saved posts/comments.
</p>
<p>
I write about it <a href="./orger-todos.html#reddit">in the second part</a>.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000000f">
<h2 id="why_hard"><a class="headerlink" href="#why_hard">¶</a><span class="section-number-2">5</span> It does sound very simple. Does that really deserve a post?</h2>
<div class="outline-text-2" id="text-why_hard">
<p>
Well yeah it really does seem simple… until you try to do it.
</p>
<ul class="org-ul">
<li><p>
emitting Org-mode
</p>
<p>
While it's plaintext, and generating simple outlines is trivial, with more sophisticated inputs, there is some nasty business of escaping and sanitizing that has to be dealt with.
I didn't manage to find any Python libraries capable of emitting Org-mode. Only project I knew of was <a href="https://github.com/bjonnh/PyOrgMode">PyOrgMode</a> but the author abandoned it.
</p>
<p>
When it comes to generating 10+ views from different data sources, you <b>really</b> want to make sure it's as little effort and minimal boilerplate as it can possibly be.
</p>
<p>
That's how <a href="https://github.com/karlicoss/inorganic">inorganic</a> library was born.
</p></li>
<li><p>
<a id="org0000002"></a>accessing data sources and exposing it through Python interfaces
</p>
<p>
This is probably where most of effort was spent. All sorts of stupid APIs, tedious parsing, you can imagine.
</p>
<p>
I'll write separately about it sometime, for now you can see some of the code I prettified and shared in my github <a href="https://github.com/search?q=topic:export+user:karlicoss&amp;type=Repositories">'export'</a> and <a href="https://github.com/karlicoss/my">my</a> packages.
I tried to make sure they are easy to use for other people and not specific to my use cases.
</p></li>
<li><p>
keeping track of already processed items for <samp class="inline">Interactive</samp> views
</p>
<p>
Because there is no feedback from org-mode files back to data sources, you want to keep track of items already added in the file, otherwise you're gonna have duplicates.
</p>
<p>
It's not rocket science of course, but it is quite tedious. There is some additional logic that checks for lock files, makes sure writes are atomic, etc. You really don't want to implement it more than once.
I figured it was worth extracting this 'pattern' in a separate <a href="https://github.com/karlicoss/orger/blob/master/src/orger/state.py">python module</a>.
</p></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000010">
<h2 id="org0000010"><a class="headerlink" href="#org0000010">¶</a><span class="section-number-2">6</span> What makes Orger good?</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li><p>
it solves <a href="#org0000000">my problems</a>! 
</p>
<p>
I won't go long into Org-mode propaganda, there are people that do it better than me out there, but for me it's good because it's a decent balance between ease of use and ease of augmenting.
</p>
<ul class="org-ul">
<li>it's easy to do unstructured (i.e. grep) or structured (i.e. tag search in emacs) search on any of your devices be it desktop or phone</li>
<li>you can open it anywhere you can open a text file</li>
<li>tasks as easy to create as any other Org outline so it can integrate with your todo list and agenda (see more in <a href="orger-todos.html">the second part</a>).</li>
</ul></li>
<li><p>
it doesn't require Emacs
</p>
<p>
If you're not willing to go full on Emacs, you can still benefit from this setup by using plaintext viewer and search tool of your choice.
</p></li>
<li><p>
written in Python. I don't claim at all that Python is the best programming language, but that's the one I'm most productive on as well as many other people.
</p>
<p>
Also the fact that it's a real programming language rather than some YAML config makes sure you can do anything and not restricted by stupid DSL.
</p></li>
<li>it's extremely easy to add new views — a matter of 10-20 lines of code.</li>
<li>agnostic to what you feed in it – it could be offline data from your regular backups, or it could be fresh API data. Again, it's a real programming language, you can do literally anything.</li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000012">
<h2 id="using"><a class="headerlink" href="#using">¶</a><span class="section-number-2">7</span> Using Orger views</h2>
<div class="outline-text-2" id="text-using">
<p>
Apart from, obviously, opening org mode file in your favorite text editor, one major strength of this system is being able to search over them.
</p>
<p>
I'll write about my setup separately at some point, but for now I'll give a quick summary and clues.
</p>
<p>
On my desktop I'm just using spacemacs or <a href="https://github.com/karlicoss/cloudmacs">cloudmacs</a> from web browser.
</p>
<ul class="org-ul">
<li>I'm usually just using <a href="https://github.com/syohex/emacs-helm-ag">helm-ag</a> with <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> (your can find how to marry them <a href="https://gist.github.com/pesterhazy/fabd629fbb89a6cd3d3b92246ff29779">here</a>).</li>
<li>sometimes <a href="https://github.com/emacsorphanage/helm-swoop">helm-swoop</a> is very convenient, especially <samp class="inline">helm-multi-swoop</samp> function.</li>
</ul>
<p>
These two are incremental (instant feedback) and effectively instantaneous. For more structured search you could use:
</p>
<ul class="org-ul">
<li>good old <a href="https://orgmode.org/manual/Matching-tags-and-properties.html"><samp class="inline">org-tags-view</samp></a></li>
<li>org-ql with <a href="https://github.com/alphapapa/org-ql#helm-org-ql"><samp class="inline">helm-org-ql</samp></a> is a nicer and incremental alternative</li>
</ul>
<p>
On my Android phone I'm using <a href="https://github.com/orgzly/orgzly-android">orglzy</a> for structured search/viewing Org-mode files. 
Sometimes <a href="https://play.google.com/store/apps/details?id=com.docsearch.pro">Docsearch +</a> is also useful, which is indexing plaintext files and lets you search in them. While it's not tailored for org-mode files, it's usually good enough for me.
</p>
<p>
You can also set up some proper indexing daemon like <a href="https://www.lesbonscomptes.com/recoll">recoll</a>.
</p>
</div>
<div class="outline-3" id="outline-container-org0000011">
<h3 id="org0000011"><a class="headerlink" href="#org0000011">¶</a>Typical use patterns</h3>
<div class="outline-text-3" id="text-org0000011">
<p>
I'll just give some of my use cases:
</p>
<ul class="org-ul">
<li><p>
While running tests for <a href="https://github.com/karlicoss/orgparse">orgparse</a> I started randomly getting  <samp class="inline">AssertionError: Cannot find component 'A@3' for 'orgparse.A@3</samp>. 
</p>
<p>
I recall that I had same issue few month ago but don't quite remember what was the fix. 
I press <samp class="inline">F1</samp> which invokes <code class="inline">helm-ag</code> for me and type 'cannot find component'.
I instantly find a github <a href="https://github.com/python/mypy/issues/7281">issue</a> I opened in <samp class="inline">github.org</samp> and figure out what I need to do to work around the problem.
</p></li>
<li><p>
While discussing special relativity with a friend, I recall watching some intuitive rationale for Maxwell's equations, but don't quite recall what was the video.
</p>
<p>
I press <samp class="inline">F1</samp>, type 'Special relativity' and instantly get few results, in particular <a href="https://www.youtube.com/watch?v=1TKSfAkWWN0">this</a> awesome Veritasium video in <samp class="inline">youtube.org</samp>, which I was looking for.
</p></li>
<li><p>
Recommending books
</p>
<p>
I often struggle to recall the details why I liked a particular book, especially fiction.
Having all annotations in my <samp class="inline">kobo.org</samp> file lets me quickly look up and skim through highlighted bits so I can freshen up my memory.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000017">
<h2 id="improvements"><a class="headerlink" href="#improvements">¶</a><span class="section-number-2">8</span> Potential improvements</h2>
<div class="outline-text-2" id="text-improvements">
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="org0000013"><a class="headerlink" href="#org0000013">¶</a><span class="todo TODO">TODO</span> more frequent, ideally realtime updates to views</h3>
<div class="outline-text-3" id="text-org0000013">
<p>
If the API doesn't provide push-based interface (as most of them), ultimately it's a question of polling them carefully to avoid rate limiting penalties.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="org0000014"><a class="headerlink" href="#org0000014">¶</a><span class="todo TODO">TODO</span> alternative export formats</h3>
<div class="outline-text-3" id="text-org0000014">
<p>
There is nothing really about Org-mode that's specific to this system. For instance, there are markdown-based organizers out there and people could benefit from using Orger for them.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000015">
<h3 id="org0000015"><a class="headerlink" href="#org0000015">¶</a><span class="todo TODO">TODO</span> two-way data flow</h3>
<div class="outline-text-3" id="text-org0000015">
<p>
It would be cool to implement feedback from emacs, e.g. editing Github comment when you edit the corresponding Orger item. But it requires considerably more effort and would only work within emacs.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000016">
<h3 id="org0000016"><a class="headerlink" href="#org0000016">¶</a><span class="todo TODO">TODO</span> potential for race condition</h3>
<div class="outline-text-3" id="text-org0000016">
<p>
Unfortunately there is a little space for race condition if Orger appends something while you're editing file. 
Orger tries to detect emacs and vim swap/lock files, but it's if you're very unlucky or using different setup it's still possible.
Hopefully your text editor warns you when the file had been overwritten while you were editing it (e.g. as emacs does).
</p>
<p>
Also I run Orger jobs at night (via cron) so it's quite unlikely to overlap with editing anything.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000018">
<h2 id="org0000018"><a class="headerlink" href="#org0000018">¶</a><span class="section-number-2">9</span> ----</h2>
<div class="outline-text-2" id="text-9">
<p>
I'd be interesting in hearing your thoughts or feature requests.
</p>
<p>
This post ended up longer that I expected so in the next part I will tell about more use cases, in particular how I'm using Orger to process Reddit.
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#orgmode">#orgmode</a> <a class="post-tag" href="./tags.html#orger">#orger</a></div>
        <!-- TODO post-date? -->
        <div class="date">26 September 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/da1sf0/orger_plaintext_reflection_of_your_digital_self">/r/orgmode</a></li>
    
        <li><a href="https://lobste.rs/s/rr9pxd/orger_plaintext_reflection_your_digital">lobste.rs</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_orger"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Cloudmacs and getting to know Docker</title>
    <link href="https://beepb00p.xyz/cloudmacs.html" />
    <id>https://beepb00p.xyz/cloudmacs.html</id>
    <published>2019-09-12T00:00:00Z</published>
    <updated>2019-09-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="emacs pkm selfhosted">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Cloudmacs and getting to know Docker | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Cloudmacs and getting to know Docker</h1>
    <div class="summary">How I really wanted Spacemacs in web browser and my wish came true</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
TLDR: I'm running my spacemacs as a web service on my VPS, <a href="https://github.com/karlicoss/cloudmacs">check it out too</a>.
</p>
<img src="https://user-images.githubusercontent.com/291333/64866462-26e25c80-d644-11e9-9ad5-ad9d9808b0cb.png" width="auto" />
<p>
Since I've became hooked on emacs, I've been looking for ways to have same experience in my browser.
Sometimes you have to use non-personal computers where it's not possible/undesirable to install desktop Emacs and Dropbox/Syncthing to access your personal data. 
So I've been looking for some cloud solution since I've got a VPS.
</p>
<p>
The closest tool to what I wanted was <a href="https://github.com/mickael-kerjean/filestash">Filestash</a>: it suports vim/emacs bindings and some <a href="https://www.filestash.app/2018/05/31/release-note-v0.1">org-mode goodies</a>.
However, it wasn't anywhere as convenient as emacs. Also after an update it somehow broke my Dropbox connection to the directory with org-mode notes, which rendered it useless for me. I'm also moving from Dropbox to Syncthing, so was planning to abandon Filestash anyway as it doesn't allow local files, only ftp or git.
</p>
<p>
Dropbox is not capable of previewing arbitrary text files let alone edit; and even if it could you obviously wouldn't get anything close to your usual emacs workflow.
</p>
<p>
And you could imagine that while Emacs/Vim style editing is fairly application <a href="https://github.com/brookhong/Surfingkeys#vim-editor-and-emacs-editor">agnostic</a>, it's a thankless job to rewrire/port all the amazing emacs packages and features I'm used to like neotree, helm, refile, swoop, agenda, projectile, org-drill etc.
</p>
<p>
So I figured the only thing that would keep me happy is to run emacs itself over the web! Thankfully, due to its TUI interface that works surprisingly well.
</p>
<p>
It works <b><b>really</b></b> well with spacemacs/evil style <code class="inline">SPC</code> and comma bindings because they for the most part don't overlap with OS/browser hotkeys.
</p>
<p>
Also it's the first time I properly used Docker apart from running other people's containers so here are few non-obvious things I learnt which you might find useful:
</p>
<ul class="org-ul">
<li><a href="https://docs.docker.com/develop/develop-images/multistage-build">Multistage build</a> is a painless way to extend someone else's containers or combine several containers in one</li>
<li><a href="https://docs.docker.com/engine/reference/commandline/build/#set-build-time-variables---build-arg">build time variables</a> is a nice way to make your container more amendable, e.g. you can avoid hardcoding versions if you use it</li>
<li><p>
Perhaps the trickiest one: docker reuses the host kernel and as a consequence same user IDs, so if you built your container as root (which is normally the case if you pull from Docker Hub), your container will write back to mounted volumes as root too!
</p>
<p>
To get around that there is a somewhat hacky <a href="https://github.com/karlicoss/cloudmacs/blob/master/asEnvUser">asEnvUser</a> script and custom <a href="https://github.com/karlicoss/cloudmacs/blob/master/compose">docker-compose wrapper</a> that take care of preserving user ID. 
</p></li>
</ul>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#emacs">#emacs</a> <a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#selfhosted">#selfhosted</a></div>
        <!-- TODO post-date? -->
        <div class="date">12 September 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/selfhosted/comments/d38utu/cloudmacs_make_your_lovely_emacs_setup_accessible">/r/selfhosted</a></li>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/d3pm06/cloudmacs_work_with_your_orgmode_files_and_agenda">/r/orgmode</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_cloudmacs"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Making sense of Endomondo's calorie estimation</title>
    <link href="https://beepb00p.xyz/heartbeats_vs_kcals.html" />
    <id>https://beepb00p.xyz/heartbeats_vs_kcals.html</id>
    <published>2019-08-03T00:00:00Z</published>
    <updated>2019-08-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="quantified-self exercise ipython">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Making sense of Endomondo's calorie estimation | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            
<link rel="stylesheet" href="./css/ipynb.css" />
<link rel="stylesheet" href="./css/ipynb-syntax.css" />




<article>
    
    <section class="post-title">
    <h1>Making sense of Endomondo's calorie estimation</h1>
    
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    


    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>The other day I got curious how Endomondo estimates energy expenditure during the exercise.</p>
<p>On <a href="https://support.endomondo.com/hc/en-us/articles/201861383-Calories">their website</a>, they mention some paywalled paper, but no specifics, so I figured it'd be interesting to reverse engineer that myself. I've extracted endomondo data from their JSON export and plotted a regression.</p>
<p>I'm using <a href="https://uk.wahoofitness.com/devices/heart-rate-monitors/wahoo-tickr-x-heart-rate-strap">Wahoo TickrX chest strap monitor</a>, so the HR data coming from it is pretty decent.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>First, I'm importing the dataframe from the python package I'm using to interact with my data. (I've mentioned it <a href="https://beepb00p.xyz/annotating.html#infra">here</a>).</p>
<p>It's private at the moment, but it's pretty specific to my use cases and the only interfacing in this post it through Pandas dataframe, so hopefully that wouldn't confuse you.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">my.workouts.dataframes</span> <span class="k">import</span> <span class="n">endomondo</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">endomondo</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stderr output_text">
<pre>WARNING:workout-provider:Unhandled: Cycling
WARNING:workout-provider:Unhandled: Cycling
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Some sample data:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">'dt'</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">dt</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">date</span><span class="p">()))</span> <span class="o">==</span> <span class="s1">'2019-04-21'</span><span class="p">])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>



<div class="output_html rendered_html output_subarea ">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>dt</th>
      <th>error</th>
      <th>heartbeats</th>
      <th>kcal</th>
      <th>sport</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>384</th>
      <td>2019-04-21 10:11:28+00:00</td>
      <td>None</td>
      <td>3873.500000</td>
      <td>310.0</td>
      <td>Rope jumping</td>
    </tr>
    <tr>
      <th>385</th>
      <td>2019-04-21 10:47:58+00:00</td>
      <td>None</td>
      <td>2860.666667</td>
      <td>248.0</td>
      <td>Running</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Heartbeats were calculated as average HR multiplied by the duration of exercise.</p>
<p>Error column is a neat way of propagating exceptions from data provider.</p>
<p>E.g. I only have HR data for the last couple of years or so, so data provider doesn't have any of HR points from endomondo. While I could filter out these points in the data provider, they might still be useful for other plots and analysis pipelines (e.g. if I was actually only interested in kcals and didn't hare about heartbeats).</p>
<p>Instead, I'm just being defensive and propagating exceptions up through the dataframe, leaving it up to the user to handle them.</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">'dt'</span><span class="p">]</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">dt</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">date</span><span class="p">()))</span><span class="o">.</span><span class="n">isin</span><span class="p">([</span><span class="s1">'2015-03-06'</span><span class="p">,</span> <span class="s1">'2018-05-28'</span><span class="p">])])</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>



<div class="output_html rendered_html output_subarea ">
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>dt</th>
      <th>error</th>
      <th>heartbeats</th>
      <th>kcal</th>
      <th>sport</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>17</th>
      <td>2015-03-06 05:50:38+00:00</td>
      <td>no hr</td>
      <td>NaN</td>
      <td>397.0</td>
      <td>Running</td>
    </tr>
    <tr>
      <th>18</th>
      <td>2015-03-06 13:20:06+00:00</td>
      <td>no hr</td>
      <td>NaN</td>
      <td>127.0</td>
      <td>Table tennis</td>
    </tr>
    <tr>
      <th>297</th>
      <td>2018-05-28 10:11:45+00:00</td>
      <td>Unhandled activity: Cycling</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>298</th>
      <td>2018-05-28 12:58:33+00:00</td>
      <td>Unhandled activity: Cycling</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So, first we filter out the entries with errors:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="s1">'error'</span><span class="p">]</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">'sport'</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">'Other'</span><span class="p">)]</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>As well as some random entries which would end up as outliers:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">'sport'</span><span class="p">])</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">grp</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">grp</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">)</span> 
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="o">%</span><span class="k">matplotlib</span> inline
<span class="kn">import</span> <span class="nn">matplotlib</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="k">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="nn">sns</span>

<span class="n">matplotlib</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">'font'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">17</span><span class="p">,</span> <span class="n">weight</span><span class="o">=</span><span class="s1">'regular'</span><span class="p">)</span>

<span class="n">sports</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">g</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="k">for</span> <span class="n">g</span><span class="p">,</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">df</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="s1">'sport'</span><span class="p">])</span>
<span class="p">}</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="o">.</span><span class="n">lmplot</span><span class="p">(</span>
    <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span>
    <span class="n">x</span><span class="o">=</span><span class="s1">'heartbeats'</span><span class="p">,</span>
    <span class="n">y</span><span class="o">=</span><span class="s1">'kcal'</span><span class="p">,</span>
    <span class="n">hue</span><span class="o">=</span><span class="s1">'sport'</span><span class="p">,</span> 
    <span class="n">hue_order</span><span class="o">=</span><span class="n">sports</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span>
    <span class="n">legend_out</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
    <span class="n">palette</span><span class="o">=</span><span class="s1">'colorblind'</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">ax</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">'Dependency of energy spent during exercise on number of heartbeats'</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_xlim</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="kc">None</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">'Total heartbeats, measured by chest strap HR monitor'</span><span class="p">)</span>

<span class="n">ax</span><span class="o">.</span><span class="n">set_ylim</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="kc">None</span><span class="p">))</span>
<span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">'Kcal,</span><span class="se">\n</span><span class="s1">Endomondo</span><span class="se">\n</span><span class="s1">estimate'</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">grid</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
<span class="c1"># https://stackoverflow.com/a/55108651/706389</span>
<span class="n">plt</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span>
    <span class="n">title</span><span class="o">=</span><span class="s1">'Sport'</span><span class="p">,</span>
    <span class="n">labels</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="s1">'</span><span class="si">{s}</span><span class="s1"> (</span><span class="si">{cnt}</span><span class="s1"> points)'</span> <span class="k">for</span> <span class="n">s</span><span class="p">,</span> <span class="n">cnt</span> <span class="ow">in</span> <span class="n">sports</span><span class="o">.</span><span class="n">items</span><span class="p">()],</span>
    <span class="n">loc</span><span class="o">=</span><span class="s1">'upper left'</span><span class="p">,</span>
<span class="p">)</span>
<span class="k">pass</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_png output_subarea ">
<img src="heartbeats_vs_kcals_files/heartbeats_vs_kcals_11_0.png">
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Unsurprising, it looks like a simple linear model (considering my weight and age barely changed).</p>
<p>What I find interesting is that for instance for me, running feels way more intense than any of other cardio I'm doing, definitely way harder than skiing!</p>
<p>However the regression coeffecient (basically, calories burnt per 'unit of heart activity') is more or less same. I guess that could potentially be explained by the fact that running involves more muscle activity, which Endomondo can't capture and doesn't try to infer from the exercise type (which you enter manually when you start logging the exercise).</p>
<p>With regards to the actual regression coefficient: seaborn wouldn't let you display them on the regplot (the author has a very strong opition about that, <a href="https://github.com/mwaskom/seaborn/issues/655#issuecomment-370079702">apparently</a>), so we use <code>sklearn</code> to do that for us:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">sklearn</span> <span class="k">import</span> <span class="n">linear_model</span>

<span class="n">reg</span> <span class="o">=</span> <span class="n">linear_model</span><span class="o">.</span><span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">reg</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">df</span><span class="p">[[</span><span class="s1">'heartbeats'</span><span class="p">]],</span> <span class="n">df</span><span class="p">[</span><span class="s1">'kcal'</span><span class="p">])</span>

<span class="p">[</span><span class="n">coef</span><span class="p">]</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">coef_</span>
<span class="n">free</span> <span class="o">=</span> <span class="n">reg</span><span class="o">.</span><span class="n">intercept_</span>

<span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&quot;Regression coefficient: </span><span class="si">{coef:.3f}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="s2">&quot;Free term: </span><span class="si">{free:.3f}</span><span class="s2">&quot;</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>Regression coefficient: 0.093
Free term: -9.608
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Basically, that means I get about <code>0.1</code> Kcal for each heartbeat during exercise. Free term ideally should be equal to <code>0</code> (i.e. just as a sanity sort of thing: not having heartbeat shouldn't result in calorie loss), and <code>-10</code> is close enough.</p>
<p>Also, fun calculation:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">normal_bpm</span> <span class="o">=</span> <span class="mi">60</span>
<span class="n">minutes_in_day</span> <span class="o">=</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">60</span>

<span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="s1">'{coef * normal_bpm * minutes_in_day:.3f}'</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>8066.982
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>8K Kcals per day? A bit too much for an average person. I wouldn't draw any conclusions from that one though :)</p>

</div>
</div>
</div>



 


    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a> <a class="post-tag" href="./tags.html#exercise">#exercise</a> <a class="post-tag" href="./tags.html#ipython">#ipython</a></div>
        <!-- TODO post-date? -->
        <div class="date">03 August 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/dataisbeautiful/comments/cmqfeu/oc_dependency_of_energy_spent_during_exercise_on">/r/dataisbeautiful</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_endomondo_kcal_heartbeats"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>How to annotate literally everything</title>
    <link href="https://beepb00p.xyz/annotating.html" />
    <id>https://beepb00p.xyz/annotating.html</id>
    <published>2019-07-05T00:00:00Z</published>
    <updated>2019-07-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm annotation sr tools">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>How to annotate literally everything | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>How to annotate literally everything</h1>
    <div class="summary">Comprehensive overview of existing tools, strategies and thoughts on interacting with your data</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#motivation">1. Motivation</a></li>
<li><a href="#org000000c">2. Annotating web</a>
<ul>
<li><a href="#org0000004">Pocket</a></li>
<li><a href="#instapaper">Instapaper</a></li>
<li><a href="#wallabag">Wallabag</a></li>
<li><a href="#hypothesis">Hypothes.is</a></li>
<li><a href="#grasp">Grasp</a></li>
<li><a href="#org000000b">Summary</a></li>
</ul>
</li>
<li><a href="#org0000019">3. Annotating PDFs</a>
<ul>
<li><a href="#org0000010">Okular, Evince, Atril</a></li>
<li><a href="#pdftools">Emacs: pdf-tools</a></li>
<li><a href="#org0000012">Other Linux readers</a></li>
<li><a href="#orgnoter">Emacs: org-noter</a></li>
<li><a href="#xournal">Xournal</a></li>
<li><a href="#hypothesis_pdf">Hypothes.is (again)</a></li>
<li><a href="#polar">Polar</a></li>
<li><a href="#android_ann">Annotating on Android</a></li>
<li><a href="#org0000018">Summary</a></li>
</ul>
</li>
<li><a href="#org0000022">4. Annotating E-ink</a>
<ul>
<li><a href="#kindle">Kindle</a></li>
<li><a href="#kobo">Kobo</a></li>
<li><a href="#koreader">Koreader</a></li>
</ul>
</li>
<li><a href="#org0000028">5. Miscellaneous</a>
<ul>
<li><a href="#org0000023">Annotating paper books</a></li>
<li><a href="#org0000024">Annotating plaintext</a></li>
<li><a href="#org0000025">Annotating videos</a></li>
<li><a href="#org0000026">Other notable mentions</a></li>
<li><a href="#org0000027">Hall of shame!</a></li>
</ul>
</li>
<li><a href="#vision">6. What makes a good annotation system?</a>
<ul>
<li><a href="#comparison">Comparison</a></li>
</ul>
</li>
<li><a href="#infra">7. Using annotation data</a>
<ul>
<li><a href="#org000002b">Extracting reading stats</a></li>
<li><a href="#org000002c">Searching in annotations</a></li>
<li><a href="#org000002d">Providing TODO items</a></li>
<li><a href="#org000002e">Spaced repetition</a></li>
<li><a href="#org000002f">Life log</a></li>
</ul>
</li>
<li><a href="#org0000031">8. --</a></li>
</ul>
</div>
</div>
<p>
TLDR: when I read I try to read <a href="https://help.open.ac.uk/active-reading">actively</a>, which for me mainly involves using various tools to annotate content: highlight and leave notes as I read. I've programmed <a href="#infra">data providers</a> that parse them and provide nice interface to interact with this data from other tools. My <a href="#org0000000">automated scripts</a> use them to render these annotations in human readable and searchable plaintext and generate <a href="#org0000001">TODOs</a>/<a href="#org0000002">spaced repetition</a> items.
</p>
<p>
In this post I'm gonna elaborate on all of that and give some motivation, review of these tools (mainly with the focus on open source thus extendable software) and my vision on how they could work in an ideal world.
I won't try to convince you that my method of reading and interacting with information is superior for you: it doesn't have to be, and there are people out there more eloquent than me who do that. I assume you want this too and wondering about the practical details.
</p>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="motivation"><a class="headerlink" href="#motivation">¶</a><span class="section-number-2">1</span> Motivation</h2>
<div class="outline-text-2" id="text-motivation">
<div><span class="before-aside">
At some point in my life I realized I didn't remember most of the books/papers/posts/videos I had consumed few years before. 
</span><aside class="sidenote">For brevity I'll just refer to all of this as 'content' further on</aside></div>
<p>
That bothered me increasingly until I bought a Kindle which had 'highlight' functionality and virtual keyboard; and I had discovered it to help a lot with recalling.
</p>
<p>
I've become increasingly obsessed with this and these days ability to highlight when I read serves multiple purposes for me:
</p>
<ul class="org-ul">
<li>the very act of spending conscious effort on highlighting and commenting helps to remember better.</li>
<li><p>
it's easier to recall the content I already read, I just skim through highlights and refresh the memory
</p>
<p>
In particular, often I'd run on something on the internet that I remember reading before. If I have annotations for that, I can quickly go through them and restore the context.
</p></li>
<li>it's easier to recommend content to other people because you can refer to specific moments or points you liked/disliked</li>
<li>it's got social value if highlights are visible to other people (e.g. <a href="#hypothesis">Hypothesis</a>, Medium, Goodreads)</li>
<li>it helps with <a href="./notes.html#book_scoring">book scoring</a>. If I don't have any highlights, it probably means that the content was not interesting at all for me. Fiction books are not an exception: I tend to highlight use of language I liked, inspirational things, etc.</li>
<li>it serves as activity log if you are into <a class="post-tag" href="./tags.html#lifelogging">#lifelogging</a>.</li>
<li>you can <a href="#org0000001">populate your TODO list</a> and <a href="#org0000002">step up your spaced repetition game</a>.</li>
</ul>
<p>
I'm going to review some of the tools I tried using and still using and highlight their different positive and negative aspects. If you're getting impatient, you can skip straight to my <a href="#comparison">comparison table</a>.
</p>
</div>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="org000000c"><a class="headerlink" href="#org000000c">¶</a><span class="section-number-2">2</span> Annotating web</h2>
<div class="outline-text-2" id="text-2">
</div>
<div class="outline-3" id="outline-container-org0000004">
<h3 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><a href="https://getpocket.com">Pocket</a></h3>
<div class="outline-text-3" id="text-org0000004">
<p>
I won't really write much about it for one reason which is a big deal: while you can highlight text, you can't leave notes. Nearest functionality is 'recommending' a highlight while reading a comment, but that's only displayed on your 'timeline'.
</p>
<p>
Pocket API doesn't support exporting highlights too, or to be precise it seems to be hidden. If you need it you can use <a href="https://github.com/karlicoss/pockexport">my script</a> where I hacked around it.
</p>
<p>
Also, interesting enough, <a href="#kobo">Kobo reader</a> has got Pocket integration, but for some reason when you read Pocket articles on Kobo, you can't highlight at all (let alone syncing highlights with Pocket). Not sure what's the purpose of this integration.
</p>
<p>
Pocket was acquired by Mozilla in 2017, which might be a good thing, but so far their main focus seem to be readability features.
</p>
<p>
You can also read <a href="https://news.ycombinator.com/item?id=19763106">a rant</a> raising similar issues to what I mentioned.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000006">
<h3 id="instapaper"><a class="headerlink" href="#instapaper">¶</a><a href="https://www.instapaper.com">Instapaper</a></h3>
<div class="outline-text-3" id="text-instapaper">
<p>
I won't go into Instapaper's readability capabilities (e.g. fonts and article formatting) because it's not something I care much about, so you might be better off googling that for yourself, here I'll concentrate on annotating aspect. 
Here are couple of recent extensive comparisons of Instapaper and Pocket, which feature screenshots and other aspects of Instapaper:
</p>
<ul class="org-ul">
<li><a href="https://zapier.com/blog/instapaper-vs-pocket">Read-It-Later App Showdown: Instapaper vs. Pocket</a>; <a href="https://zappy.zapier.com/A040E0D5-C672-4F08-812B-D7793F6B40A7.png">screenshot</a> of annotation interface.</li>
<li><a href="https://medium.com/@janniks/instapaper-vs-pocket-2019-comparison-453524ff952d">Instapaper vs. Pocket (2019 Comparison)</a></li>
</ul>
<p>
So, to read something in Instapaper, first you'll have to import the article into it (to unclutter and optimize it for reading). 
Due to this import process, you can <b><b>only read and highlight in Instapaper's app</b></b>, and you can only see your highlights there as well, which is its main limitation for me.
</p>
<p>
The only reason I'm using it at all is that its Android app has got <b><b>offline</b></b> capabilities, so I would export to Instapaper things I want to read on the tube while I don't have connection and read/comment while offline.
</p>
<p>
Mind that free version of Instapaper has got <b><b>5 notes per month limit</b></b>. Personally I'm happy to pay 3$ per month for <a href="https://www.instapaper.com/premium">premium version</a> of such a decent product though in absence of good alternatives.
</p>
<p>
Instapaper got <a href="https://www.instapaper.com/api">Json API</a>, through which you can access your saved articles, comments and highlights. I'm using a <a href="https://github.com/karlicoss/instapaper">fork</a> of python wrapper to access it. Highlights are only stored as text though (as opposed to CSS/xpath locators), so there is no easy way to match them against original text apart from some sort of fuzzy search. 
</p>
<p>
<a id="org0000005"></a>Search function works for full text search in saved articles, but doesn't let you restrict search for highlights, and you can't search in notes at all.
</p>
<p>
One red flag was in 2018 when Instapaper wasn't available in Europe for few months until they resolved GDPR issues. While I don't blame it on Instapaper, this is a kind of thing that happens when you don't own your data and use a closed source product.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000008">
<h3 id="wallabag"><a class="headerlink" href="#wallabag">¶</a><a href="https://github.com/wallabag/wallabag">Wallabag</a></h3>
<div class="outline-text-3" id="text-wallabag">
<p>
Wallabag is the most mature open source/selfhosted read-it-later kind of project I know of. <a href="https://opensource.com/article/18/7/wallabag">Here's</a> a review featuring some screenshots of their web app and Android app.
</p>
<p>
It's very similar to Instapaper in terms of <b><b>having to import</b></b> the article in Wallabag in order to annotate it. I used it for a while and only had some issues with importing articles heavy on MathJax backed Latex.
</p>
<p>
If you don't want to selfhost it, you can use <a href="https://www.wallabag.it/en">wallabag.it</a> hosting for as little as 9 euros per year and two weeks of trial.
</p>
<p>
<a id="org0000007"></a>There is also an <a href="https://github.com/wallabag/android-app">Android app</a>, but sadly it <a href="https://github.com/wallabag/android-app/issues/115">lacks</a> support for highlighting.
</p>
<p>
I wish it had more attention from the community, and might try to work on Android annotation when I got more time.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000009">
<h3 id="hypothesis"><a class="headerlink" href="#hypothesis">¶</a><a href="https://web.hypothes.is/#see-how-it-works">Hypothes.is</a></h3>
<div class="outline-text-3" id="text-hypothesis">
<p>
Hypothesis is simply awesome and my favorite web annotation tool. Their killer feature is that it embeds a bit of JS in the page to provide an <b><b>in-browser overlay</b></b>, so you don't have to leave the page you were reading and can highlight and add comments natively.
They use something cool called <a href="https://web.hypothes.is/blog/fuzzy-anchoring">fuzzy anchoring</a> to achieve this.
That also makes annotations <b><b>resilient to document markup changes</b></b>, and if they can't locate your annotations it would be still shown in metadata as <a href="https://web.hypothes.is/blog/showing-orphaned-annotations">'orphaned'</a>, so you never lose your notes.
</p>
<p>
Another cool feature is that you can choose to make your annotations public and see other people's annotations or create a private group if you want to share them among specific people only.
</p>
<p>
To get a sense of it you can skim through <a href="https://web.hypothes.is/help/annotation-basics">tutorial</a> which has plenty of screenshots,
and I also strongly recommend you checking it out in action here: <a href="https://web.hypothes.is/blog/annotation-is-now-a-web-standard">Annotation Is Now a Web Standard</a>,
or try the very page <a href="https://via.hypothes.is/https://beepb00p.xyz/annotating.html#hypothesis">you're reading now</a>.
</p>
<p>
You don't have to install anything or register, it's just a widget embedded in the page, but do make sure to allow JS.
You should see yellow highlights and the sidebar on the right.
</p>
<p>
It's open source, can be selfhosted and they provide their own service for free (but please consider donating them!).
</p>
<p>
Since Hypothesis powered by javascript, it actually works well in modern <b><b>Android</b></b> browsers via <a href="https://web.hypothes.is/start/">bookmarklet</a>.
It's somewhat not obvious in terms of browser UI how to actually use them though:
</p>
<ul class="org-ul">
<li>for mobile Firefox, once you added a bookmarklet, to invoke it you need to <a href="https://www.reddit.com/r/firefox/comments/3uquy5/do_bookmarklets_work_in_firefox_browser_for/cxh8uvq">tap on the address bar</a> and click the bookmarklet.</li>
<li>for mobile Chrome, it's a bit more tedious but also <a href="https://android.stackexchange.com/questions/159308/how-can-a-bookmarklet-be-added-on-mobile-chrome">possible</a>.</li>
</ul>
<p>
One downside of this service is that you won't be able to annotate while offline.
I feel it's actually more of mobile browser's problem in general rather than Hypothesis though.
While you potentially can annotate offline without querying API and preserving data in <samp class="inline">localStorage</samp>, if you can't load the page in the first place, it doesn't matter. Perhaps that can be given better support in browsers.
</p>
<p>
Hypothesis got <a href="https://h.readthedocs.io/en/latest/api-reference/v1/#tag/annotations/paths/~1search/get">JSON API</a> which gives access to your and other people's public annotations.
I'm using <a href="https://github.com/judell/Hypothesis">judell/Hypothesis</a> python wrapper to access and back up this data.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000a">
<h3 id="grasp"><a class="headerlink" href="#grasp">¶</a><a href="./grasp.html">Grasp</a></h3>
<div class="outline-text-3" id="text-grasp">
<p>
Shameless plug! If you just want to send annotations directly into a plaintext (e.g. org-mode) file and don't really care about displaying them within the original web page you can use my <a href="https://github.com/karlicoss/grasp">grasp</a> browser addon for that.
</p>
<p>
I typically use it for highlights that would be good candidates for TODO items, e.g. something actionable like piece of advice or further reading.
</p>
<p>
Not available for <a href="https://github.com/karlicoss/grasp/issues/15">mobile yet</a>, but perhaps on Android native select and share capabilities (e.g. into <a href="https://github.com/orgzly/orgzly-android">orgzly</a>) makes more sense anyway.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000000b">
<h3 id="org000000b"><a class="headerlink" href="#org000000b">¶</a>Summary</h3>
<div class="outline-text-3" id="text-org000000b">
<p>
<a href="#hypothesis">Hypothses.is</a> is a clear winner for me on desktop and I'm using <a href="#instapaper">Instapaper</a> for offline reading on Android.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000019">
<h2 id="org0000019"><a class="headerlink" href="#org0000019">¶</a><span class="section-number-2">3</span> Annotating PDFs</h2>
<div class="outline-text-2" id="text-3">
<p>
Small disclaimer: I don't own a Mac so have no idea what's going on in their world. Sorry!  (UPD: I got <a href="https://twitter.com/i/web/status/1147473985514459137">few recommendations</a> from a follower, perhaps they would be helpful).
</p>
<p>
PDF format is a complicated beast, and its native annotations are a whole different story to annotating web.
</p>
<p>
First, its ISO standard is <a href="https://www.iso.org/standard/63534.html">not freely available</a>. Adobe website has got some sort of <a href="https://www.adobe.com/devnet/pdf/pdf_reference.html">reference</a>
which is not the same as standard, but apparently close enough.
</p>
<p>
There are quite a few different kinds of PDF annotations, e.g. you can see them here in <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf">section 12.5.6: Annotation Types</a> or in <a href="https://gitlab.freedesktop.org/poppler/poppler/blob/a4d3db87c3bae5e2a364c828479a6cbb0277069e/poppler/Annot.h#L606-634">Poppler source code</a>.
In addition to Highlight and Text types there are things like support for styling, underlines, strikethoughs, and even (heaven forbid) sounds, movies and 3D.
</p>
<p>
Using native PDF annotations has one major drawback: you will have to save metadata back to the PDF file at some point.
At worst it could be impossible due to DRM, but in any case, you'd need to somehow remember that some of your documents might have private notes inside.
I get around it by making a copy of the file I'm about to annotate first, and giving it <samp class="inline">[annotated]</samp> prefix so I wouldn't confuse it with the original file.
</p>
</div>
<div class="outline-3" id="outline-container-org0000010">
<h3 id="org0000010"><a class="headerlink" href="#org0000010">¶</a>Okular, Evince, Atril</h3>
<div class="outline-text-3" id="text-org0000010">
<p>
Probably most widely used PDF readers, all of these use <a href="https://poppler.freedesktop.org">Poppler</a> library for working with PDF, which in particular does the messy business of annotation handling.
</p>
<p>
All of them would let you view existing annotations, but there are some nuances and limitations:
</p>
<ul class="org-ul">
<li><a href="https://github.com/mate-desktop/atril">Atril</a> (as of 1.20.3) allows you to add or edit popup notes only, other types of annotations aren't even displayed in the sidebar</li>
<li><p>
<a href="https://wiki.gnome.org/Apps/Evince">Evince</a> (as of 3.32.0) only allows to add or edit highlights or popup notes (no inline!). Here is <a href="https://www.debugpoint.com/2016/05/evince-3-18-2-comes-with-text-and-highlight-annotation-in-ubuntu-16-04">article</a> with some screenshot (not much changed since 2016).
</p>
<p>
However it's got a nasty few years old bug (<a href="https://bugs.launchpad.net/ubuntu/+source/evince/+bug/1567565">1</a>, <a href="https://gitlab.gnome.org/GNOME/evince/issues/868">2</a>) that doesn't allow you saving over the same file you're editing. That means that to work around it every time you want to persist your changes, you'd have to save to a new file and reopen the new copy. That makes it pretty unusable unless you only want to do couple of changes.
</p></li>
<li><p>
<a id="org000000d"></a><a href="https://okular.kde.org">Okular</a> (as of 1.6.3) allows <b><b>editing and adding pretty much every type of annotation</b></b> that you would expect: highlights, popup and inline notes, freehand and <a href="https://docs.kde.org/stable5/en/kdegraphics/okular/annotations.html">more</a>.
</p>
<p>
Annotation process (<a href="./annotating/okular.jpg">screenshot</a>) is pretty pleasant, hitting Ctrl-S results in saving the file you're working on without any problems.
</p>
<p>
<a id="org000000e"></a>Okular also got support for something called <a href="https://docs.kde.org/stable5/en/kdegraphics/okular/annotations.html">'document archive'</a>, which saves the original document in a zip file along with <samp class="inline">metadata.xml</samp>, which allows you to <b><b>annotate non-PDF files</b></b> (e.g. DJVU), which is a very neat feature. It's obviously Okular specific, in theory though it's possible to process <samp class="inline">metadata.xml</samp> with other tools.
</p>
<p>
<a id="org000000f"></a>Search in okular can't be restricted to annotations only and while you can use normal PDF search for inline notes and highlights (along with the other text that happened to match), it doesn't work at all for popups.
</p>
<p>
Even though Okular is part of KDE, there is no reason not to use it in other desktops environments, it's not that complicated in terms of UI; looks quite native in GTK, and few extra dependencies are barely a problem these days.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000011">
<h3 id="pdftools"><a class="headerlink" href="#pdftools">¶</a><a href="https://github.com/politza/pdf-tools#pdf-tools-readme">Emacs: pdf-tools</a></h3>
<div class="outline-text-3" id="text-pdftools">
<p>
Pdf-tools (as of 0.90) is a PDF viewer for Emacs that meant to be more efficient than the builtin one (in terms of rendering), but is also capable of interacting with PDF metadata.
</p>
<p>
Here's a <a href="./annotating/pdf-tools.jpg">screenshot</a> and a short <a href="https://www.dailymotion.com/video/x2bc1is">screencast</a>, interesting stuff starts somewhere around 02:00 mark.
</p>
<p>
One big drawback is that to highlight and add new annotations you <b><b>still have to use mouse</b></b>, which loses half of the benefits of using Emacs for me.
Also it's got some minor issue displaying inline annotations text in the 'Content' buffer and annotations list (you can edit it if you click on it with your mouse though).
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000012">
<h3 id="org0000012"><a class="headerlink" href="#org0000012">¶</a>Other Linux readers</h3>
<div class="outline-text-3" id="text-org0000012">
<p>
There are few other apps I tried using so figured it's worth mentioning.   
</p>
<ul class="org-ul">
<li><p>
<a href="https://mupdf.com">mupdf</a> (as of 1.14.0) is both rendering library (claimed to be faster than poppler) and PDF viewers. It's capable of displaying all types of highlights and annotations, but there is no way to add or edit them.
</p>
<p>
It mentions annotation editing in <a href="https://mupdf.com/release_history.html">changelog</a>, but in something called 'mupdf-gl', and it doesn't seem to be available in Ubuntu.
</p></li>
<li><a href="https://wiki.archlinux.org/index.php/Zathura">zathura</a> (as of 0.4.3) is capable of both poppler and mupdf backends, but suffers from the same problem that you can't edit and add new highlights. It's pretty sad, because I like it as a viewer: it's minimalist and capable of VI style keybindings.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000013">
<h3 id="orgnoter"><a class="headerlink" href="#orgnoter">¶</a><a href="https://github.com/weirdNox/org-noter">Emacs: org-noter</a></h3>
<div class="outline-text-3" id="text-orgnoter">
<p>
Org-noter (as of 1.3.0) allows you to annotate a PDF while keeping the text annotations in a separate <samp class="inline">org</samp> file which keep track of PDF locations in Org note properties.
<a href="https://github.com/weirdNox/org-noter#screencast">Here's</a> a short demo.
</p>
<p>
For me the main drawback is that it <b><b>doesn't let you highlight</b></b>, which I tend to do a lot.
</p>
<p>
Existing annotations in PDF can be imported via <a href="https://github.com/weirdNox/org-noter/blob/920798e2a977ca74b77cf728ee40bb48450f941b/org-noter.el#L1455"><code class="inline">org-noter-create-skeleton</code></a> function (it didn't work for me for some reason though, and I wasn't motivated enough to investigate).
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000014">
<h3 id="xournal"><a class="headerlink" href="#xournal">¶</a><a href="https://github.com/xournalpp/xournalpp#xournal">Xournal</a></h3>
<div class="outline-text-3" id="text-xournal">
<p>
Xournal is different from the above PDF viewers, since it isn't using types of annotations described in the PDF standard and instead uses its own <a href="http://xournal.sourceforge.net/manual.html#tools">tools</a>.
</p>
<p>
It doesn't modify the original files and instead keeps <samp class="inline">.xoj</samp> file containing the metadata and pointing at the original PDF, so in that sense it's pretty similar to <a href="#org000000e">okular</a>. Similarly, it's xournal-specific and can't be viewed anywhere else unless you export it in PDF before sharing (at which point your annotations wold basically become background images).
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000015">
<h3 id="hypothesis_pdf"><a class="headerlink" href="#hypothesis_pdf">¶</a><a href="https://web.hypothes.is/#see-how-it-works">Hypothes.is</a> (again)</h3>
<div class="outline-text-3" id="text-hypothesis_pdf">
<p>
Already mentioned in the previous section, it's also capable of annotating PDFs via <a href="https://github.com/mozilla/pdf.js">pdf.js</a>. 
</p>
<p>
Check out <a href="https://web.hypothes.is/help/annotating-locally-saved-pdfs">their guide</a>, especially if you're using Chrome, apart from it it's as easy as opening the PDF in your browser and activating Hypothesis.
It fingerprints the PDFs so you don't have to worry about losing your annotations and it's easy to collaborate with other people.
</p>
<p>
It seems to work fast enough for big PDF books as well, however generally reading long things in browser is not very convenient as you lose reading position if you close the tab.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000016">
<h3 id="polar"><a class="headerlink" href="#polar">¶</a><a href="https://github.com/burtonator/polar-bookshelf#polar-bookshelf">Polar</a></h3>
<div class="outline-text-3" id="text-polar">
<p>
Polar is a new project which aims to be not just reader, but 'personal knowledge repository'. 
</p>
<ul class="org-ul">
<li>supports <a href="https://getpolarized.io/#integrated-annotations">highlights and comments</a></li>
<li><a href="https://getpolarized.io/assets/screenshots/document-repo-2019-04.webp">document repository</a>, so you have overview of all the stuff you ever read/commented. It also keeps track of your reading position.</li>
<li>the <b><b>PDFs are fingerprinted</b></b>, so you don't need to worry about moving them around your filesystem</li>
<li><samp class="inline">~.polar</samp> directory holds all the data, which makes it <b><b>easy to share among your computers</b></b> (e.g. via git, or if you keep it on Dropbox and symlink)</li>
<li>metadata is in well structured <samp class="inline">json</samp> files, which makes it easy to access from scripts</li>
<li>highlight locators keep <a href="https://github.com/burtonator/polar-bookshelf/blob/ac36e59e98d378e1ff7ab02aa241b89fdbb68c46/web/js/metadata/TextHighlightsTest.ts#L164">matched text</a> alongside the absolute coordinates, which leaves potential for matching against different editions of the PDF file</li>
<li>it's got <a href="https://github.com/burtonator/polar-bookshelf#personal-knowledge-repository">builtin flashcards engine</a>. Personally, I'm too used to <a href="https://orgmode.org/worg/org-contrib/org-drill.html">org-drill</a> now, but that's a great a way of introducing <b><b>spaced repetition</b></b> to people.</li>
<li>the author is very passionate about this project, invests a lot of effort and quite <a href="https://getpolarized.io/2019/04/11/Polar-Initial-Crowdfunding-Campaign.html">ambitious</a></li>
</ul>
<p>
If you like it, please consider donating them!
</p>
<p>
The only downside is that annotation format is <b><b>Polar specific</b></b>, so it'd be hard to share with other people unless they are willing to use Polar as well.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000017">
<h3 id="android_ann"><a class="headerlink" href="#android_ann">¶</a>Annotating on Android</h3>
<div class="outline-text-3" id="text-android_ann">
<ul class="org-ul">
<li><p>
<a href="https://play.google.com/store/apps/details?id=com.adobe.reader">Adobe Reader</a>
</p>
<p>
Supports most reasonable ways of annotation: highlights, popup/inline comments, strikethough, styling, etc. (<a href="./annotating/adobe-annot.jpg">screenshot</a>). "Comment List" gives overview of your document: <a href="./annotating/adobe-list.jpg">screenshot</a>.
</p>
<p>
It offers Adobe Cloud and Dropbox integration, but I rely on Syncthing for syncing my stuff anyway.
</p></li>
<li><p>
<a href="https://play.google.com/store/apps/details?id=com.xodo.pdf.reader">Xodo</a>
</p>
<p>
Basically supports same things that Adobe does.
</p>
<p>
For me, Xodo wins by a very thin margin because its interface tends to be a bit more denser and 'material': <a href="./annotating/xodo-annot.jpg">interface</a>, <a href="./annotating/xodo-list.jpg">annotations list</a>. Otherwise, it's virtually no different from Adobe Reader.
</p></li>
<li><p>
<a href="https://f-droid.org/en/packages/com.artifex.mupdf.viewer.app">mupdf</a>
</p>
<p>
The F-droid description claims it supports annotation, but it couldn't display any of the existing ones in my pdf files. What's more, the app wasn't responsive on any long taps or my attempts to select text, let alone highlight or comment.
</p>
<p>
Perhaps PDF 1.7 is too outdated? Something weird has been going on with the 'full' version, maybe this is somehow related (<a href="https://forum.f-droid.org/t/what-happened-to-mupdf-full-version/4511">1</a>, <a href="https://gitlab.com/fdroid/fdroiddata/issues/252">2</a>).
</p></li>
<li><a href="https://github.com/cgogolin/penandpdf">Pen&amp;Pdf</a>: I tried this one since it was open source and claimed to support annotation, but it didn't even manage to pick up any of the existing ones.</li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000018">
<h3 id="org0000018"><a class="headerlink" href="#org0000018">¶</a>Summary</h3>
<div class="outline-text-3" id="text-org0000018">
<p>
If you want the convenience of editing and viewing on phone and working with other people, <b><b>Okular</b></b> wins on desktop and <b><b>Adobe Reader/Xodo</b></b> could be used on your phone.
</p>
<p>
If you care about preserving the original PDF files and want convenience in accessing the annotations programmatically, <b><b>Polar</b></b> is best.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000022">
<h2 id="org0000022"><a class="headerlink" href="#org0000022">¶</a><span class="section-number-2">4</span> Annotating E-ink</h2>
<div class="outline-text-2" id="text-4">
<p>
Two e-ink readers that support highlights and notes I know of are Kindle (I had Paperwhite 2) and Kobo (I own Kobo Aura One).
Highlighting works as you would expect on E-ink touchscreen (long press and dragging the selection); and you can leave notes by typing on a virtual keyboard (somewhat laggy, but ok for up to few sentences).
Perhaps the only differences are how you can search and access the annotations.
</p>
</div>
<div class="outline-3" id="outline-container-org000001d">
<h3 id="kindle"><a class="headerlink" href="#kindle">¶</a>Kindle</h3>
<div class="outline-text-3" id="text-kindle">
<p>
Kindle stores bookmarks, notes and highlights in <code class="inline">My Clippings.txt</code> on the device.
The good thing about the format is that it's already plaintext and fairly human readable, so you might be happy with that alone.
The format is a bit nasty for parsing (as you would expect from something with <samp class="inline">.txt</samp> extension). Dates are locale dependent, document locators may or may not have roman numerals, separators are inconsistent at times, etc. 
When I was using Kindle I was just copying the file from time to time, and you can set up some sort of automatic copying when your device is connected similarly to  what I'm doing with <a href="#org000001a">Kobo</a>.
</p>
<p>
Kindle uploads your notes and highlights to <a href="https://read.amazon.com">Kindle Cloud Reader</a>
(<a href="https://www.epubor.com/images/uppic/manage-kindle-highlights-and-notes.png">screenshot</a>, <a href="https://ebookfriendly.com/wp-content/uploads/2017/06/New-home-for-Kindle-highlights-and-notes-540x388.jpg">screenshot</a>)
, but it <b><b>only</b></b> works for stuff bought on Kindle store. <a href="https://www.reddit.com/r/kindle/comments/6sttez/the_new_amazon_highlights_system">Reportedly</a> people also have issues displaying their highlights on Cloud Reader due to copyright restrictions.
</p>
<p>
<a id="org000001b"></a>Kindle also <a href="https://www.makeuseof.com/tag/share-kindle-notes-highlights-friends">integrates with Goodreads</a>, which synchronizes reading progress and lets you selectively share annotations to Goodreads.
But that's also restricted to books bought from Amazon.
</p>
<p>
<a id="org000001c"></a>Search function is somewhat limited: you can search in the book and it displays your highlights alongside content it found in the book, but you can't restrict search to highlights. You can't search in notes either.
Funny enough though, the <code class="inline">My Clipping.txt</code> file can be opened on Kindle itself (as any other <code class="inline">txt</code> file), and then you can search in it. It's not super convenient, but better than nothing. (I wasn't brave enough to try and see what happens if you try to highlight in this file.)
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000020">
<h3 id="kobo"><a class="headerlink" href="#kobo">¶</a>Kobo</h3>
<div class="outline-text-3" id="text-kobo">
<p>
Stores all of it's stuff in <code class="inline">.kobo/KoboReader.sqlite</code> on the device.
</p>
<p>
<a id="org000001e"></a>The database has got lots of cool stuff: in addition to highlights and notes you can also access reading progress, time spend reading and possibly some other interesting data I didn't manage to reverse engineer yet.
You can check out <a href="https://github.com/karlicoss/kobuddy">kobuddy</a>, which is my attempt to extract useful data from the database and provide nicer high level Python interface. It's also fairly straightforward to open it in <code class="inline">sqlitebrowser</code> and play with your own queries.
</p>
<p>
<a id="org000001a"></a>Kobo <b><b>doesn't seem to support cloud sync for annotations</b></b>. I was considering syncing the database wirelessly, as <a href="https://github.com/dropmeaword/kobo-aura-remote">there are</a> some SSH modules for its firmware, but people report it <a href="https://github.com/dropmeaword/kobo-aura-remote/issues/1">may break wifi</a> on it. I'm using <a href="https://github.com/karlicoss/kobuddy#as-a-backup-tool">kobuddy</a> as well to work around it.
</p>
<p>
<a id="org000001f"></a>There is an official <a href="https://play.google.com/store/apps/details?id=com.kobobooks.android">Android app</a> which lets you manage and annotate books from Kobo store and seems to be syncing progress between eink and phone.
However annotations <b><b>don't sync between Kobo and phone</b></b> for me, and other people also report same experience: <a href="https://www.mobileread.com/forums/showthread.php?t=314687">1</a>, <a href="https://www.mobileread.com/forums/showthread.php?t=256685">2</a>, <a href="https://www.mobileread.com/forums/showthread.php?t=271762">3</a>. 
<a href="https://www.mobileread.com/forums/showthread.php?p=3056862#post3056862">Some</a> claim it works on iphones though.
</p>
<p>
Kobo lets you conveniently search over all of your highlights and notes.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000021">
<h3 id="koreader"><a class="headerlink" href="#koreader">¶</a><a href="https://github.com/koreader/koreader#main-features-for-users">Koreader</a></h3>
<div class="outline-text-3" id="text-koreader">
<p>
Koreader is an alternative <b><b>open source</b></b> software for Kindle, Kobo and other E-ink devices.
</p>
<p>
It's got some very cool <a href="https://github.com/koreader/koreader/wiki/Features-list">features</a>, in particular most common document formats, dictionary and Wikipedia lookups, and various plugins.
</p>
<p>
It also supports highlighting, but (as of v2019.06), note taking is unsupported <a href="https://github.com/koreader/koreader/issues/1095">yet</a>, but some progress is going on. I'd be keen to try it once it's implemented!
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000028">
<h2 id="org0000028"><a class="headerlink" href="#org0000028">¶</a><span class="section-number-2">5</span> Miscellaneous</h2>
<div class="outline-text-2" id="text-5">
</div>
<div class="outline-3" id="outline-container-org0000023">
<h3 id="org0000023"><a class="headerlink" href="#org0000023">¶</a>Annotating paper books</h3>
<div class="outline-text-3" id="text-org0000023">
<p>
So far, for me the only downside of using nice tools for annotating digital content is that it ruined the experience of reading paper books for me. 
</p>
<p>
Usually I don't own the books I read, so using a highlighter or pencil would be just mean to the owner.
Even if you own the book and okay with that, it's still not searchable and not easily accessible, which feels very wrong to me.
</p>
<p>
To get around this I've tried few of tricks:
</p>
<ul class="org-ul">
<li>Take pictures of bits I'm interested in, perhaps highlight using image editor on the phone</li>
<li>Sticky notes are ok for commenting as long as you don't damage the book with the glue, but they down help with highlighting</li>
<li><p>
Using paper strips as an annotation overlay.
</p>
<p>
This one I'm particularly proud of coming up to as I haven't found anyone else doing that, and I rarely come up with useful meatspace things.
</p>
<p>
This is how it looks in action: <a href="./annotating/paper-strips.jpg">photo</a>.
</p>
<p>
Basically, before reading, I prepare a bunch of paper strips slightly longer than the page height, kinda like bookmarks.
You will use it as a 'sidebar overlay' for writing notes and highlighting, so the width depends on your handwriting and how much you're expected to do that, I usually use something like 1/4 of the page.
</p>
<p>
If you want to annotate the page, you'll align strip's bottom to the bottom of the page and mark lines you found interesting on this strip and write comments on it as well. You can also use the other side of the strip to annotate the other page.
</p>
<p>
The downside of this is that in order to annotations to make sense, it requires a physical copy of exact same book.
Another one is that it doesn't have automatic timestamps, which somewhat bothers my <a class="post-tag" href="./tags.html#lifelogging">#lifelogging</a> OCD. You can get around it by writing down time as well, but that's quite distracting.
</p></li>
</ul>
<p>
When I'm done with a book, I'd spend a bit of time digitizing annotations and manually typing them into plaintext. Luckily, I don't have to do that often.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000024">
<h3 id="org0000024"><a class="headerlink" href="#org0000024">¶</a>Annotating plaintext</h3>
<div class="outline-text-3" id="text-org0000024">
<p>
Often, I want to leave a quick comment to an org-mode item.
I've got a handy Emacs <a href="https://gitlab.com/karlicoss/dotspacemacs/blob/3f14fd054cef1ff95f6a376523cfae9bd1afe22b/init.el#L1019-1027">binding</a> which appends a child note with a timestamp and enters edit mode, so the whole process is smooth.
If you're not using org-mode you still can benefit from something similar, most of modern text editors allow you binding snippets on hotkeys.
</p>
<p>
One big drawback with Org mode (and I believe most of outline/task list formats) though is that if you insert child outline items in the middle of text,
it would structurally break it in two parts, so you'd have to append your commend to the end of current outline (which can be potentially very long).
On the other hand, plain list items, which you can insert in arbitrary place, are very limited and don't support most of things outline support like tags, timestamps, priorities etc.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000025">
<h3 id="org0000025"><a class="headerlink" href="#org0000025">¶</a>Annotating videos</h3>
<div class="outline-text-3" id="text-org0000025">
<p>
Often when I watch lectures or some talks on Youtube or in VLC, I want to leave a bookmark or write a note with a reference to a specific timestamp. 
This is pretty much not possible apart from opening your text editor and manually recording the position in video. All the video annotation software I know of is more oriented towards video editing/effects etc.
</p>
<p>
So, if I'm watching something in browser, I normally end up using <a href="#grasp">grasp</a> and manually type the timestamp.
</p>
<p>
This is distracting, but even worse is that whatever you use have no means of quickly jumping to the timestamp you recorded; you'd have to move the slider to it manually. 
</p>
<p>
There is no common standard that I know of for jumping at a certain timestamp neither in web nor in desktop applications (e.g. via mime handler).
</p>
<p>
I'd say this is somewhat unsolved problem, which is surprising since presumably it could be helpful for lots of students.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org0000026">
<h3 id="org0000026"><a class="headerlink" href="#org0000026">¶</a>Other notable mentions</h3>
<div class="outline-text-3" id="text-org0000026">
<p>
Due to the lack of common standard for annotated content, some services try to implement their own:
</p>
<ul class="org-ul">
<li><p>
<a href="https://medium.com/@wiobyrne/getting-started-in-medium-reading-annotating-commenting-and-recommending-757f43be83ee">Medium</a>. They use   highlights and annotation that also serve social function: when you read a Medium post you can see if a certain bit of text was highlighted by many other people.
</p>
<p>
They don't tamper with browser selection, so you can still use external annotation tools like Hypothesis. However, judging by their <a href="https://github.com/Medium/medium-api-docs#3-resources">API</a>, there is no way to access your highlights. Anyway, I would encourage people not to use these especially if you only care about personal use, after all Medium is not the only source of information out there.
</p></li>
</ul>
</div>
</div>
<div class="outline-3" id="outline-container-org0000027">
<h3 id="org0000027"><a class="headerlink" href="#org0000027">¶</a>Hall of shame!</h3>
<div class="outline-text-3" id="text-org0000027">
<p>
These are services that wouldn't let you select text. Not sure why that happens: could be some sort of copyright restriction, being assholes, or just accidental pointless restriction.
</p>
<ul class="org-ul">
<li><a href="https://www.quora.com/How-do-I-copy-text-from-Facebook-and-paste-somewhere-else-on-Android-mobile">Facebook</a>: Android app and mobile site prevent text selection.</li>
<li><p>
<a href="https://www.blinkist.com">Blinkist</a>: Android app and website.
</p>
<p>
You can't use native text selection as Blinkist forces some custom JS for highlighting. But their highlights suck: you can't leave a comment and also they actively prevent you from selecting text forcing to use their own JS thing.
</p>
<p>
In addition you can't even export your highlights, best you can do seems to be <a href="https://www.blinkist.com/en/nc/settings/external_services">syncing to an Evernote notebook</a>, and perhaps then you can use Evernote API. I didn't bother with it though.
</p>
<p>
<b>UPD (20190818)</b> I actually managed to dump my highlight data before cancelling Blinkist subscription by using (apparently private) API, here's the <a href="https://github.com/karlicoss/blinkist-backup">script</a>.
</p></li>
</ul>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org000002a">
<h2 id="vision"><a class="headerlink" href="#vision">¶</a><span class="section-number-2">6</span> What makes a good annotation system?</h2>
<div class="outline-text-2" id="text-vision">
<p>
In my quest for the perfect annotation engine I've figured certain aspects that make or would make an annotation tool pleasant to use.
</p>
<ul class="org-ul">
<li><p>
<b><b>Uniform</b></b>
</p>
<p>
Highlighting a piece of content and leaving a comment are fairly straightforward operations, and you shouldn't have to think much about how exactly you do it and which program you use.
Most current annotation engines are also somewhat tedious to interact with, add more content in existing annotaions, link, etc.
</p>
<p>
Solving this requires the tools being <b><b>cross platform</b></b> and <b><b>cross format</b></b>.
</p>
<p>
<a href="#hypothesis">Hypothes.is</a> is the move in the right direction, but there are plenty of other things starting from unsupported formats and working offline to paper books which are missed out.
</p>
<p>
While current sad state of different tools/products for different forms of content is understandable, ideally it should be be <b><b>format agnostic</b></b> with some proper way of
<b><b>fingerprinting</b></b> content. If humans can tell whether a novel published online as HTML and a paper novel are the same thing, so can software.
</p>
<p>
Common standard (e.g. <a href="https://www.w3.org/TR/2017/REC-annotation-model-20170223">Web Annotation Data Model</a>) is a good start, but even this one is pretty unknown and not widely accepted.
</p>
<p>
Perhaps in the near future we could exploit existing (fairly robust) OCR technologies and augmented reality to develop a universal annotation tool, but so far that's a whole different ballpark.
</p></li>
</ul>
<ul class="org-ul">
<li><p>
<b><b>Ease of interaction</b></b>
</p>
<p>
Annotating is meant to augment your limited memory capabilities and using them should be <b><b>as easy as retrieving information from your brain</b></b>.
</p>
<p>
While brain-computer interfaces are not quite there, even with existing technologies you can achieve that with as little as few seconds lag just by using
plaintext representations, indexing and incremental search.
</p>
<p>
Personally, I'm solving this problem via <a href="#org0000000">orger</a>.
</p></li>
<li><p>
<b><b>Separate metadata</b></b>
</p>
<p>
Annotations layer should be loosely coupled to the underlying content. If it's not the case, it makes you too dependent on the specific tools, makes harder to keep track of your private data and to share data with other tools.
</p>
<p>
For physical sources of information it matters even more; although they might decline completely in few decades, who knows.
</p>
<p>
Good examples of this approach are <a href="#polar">Polar</a> and <a href="#hypothesis">Hypothesis</a> which keep metadata in well defined format with locators.
</p></li>
<li><p>
<b><b>Data ownership and resilience</b></b>
</p>
<p>
If annotations make essential part of your knowledge, you want to be capable of accessing them <b><b>anytime</b></b>.
</p>
<p>
Ideally everything should work while fully offline without relying on any services.
</p>
<p>
Currently it's not always feasible due to technical complications (e.g. having to selfhost), but this is a good value to pursue.
</p></li>
<li><p>
<a name="social_function"></a> <b><b>Social and collaborative</b></b>
</p>
<p>
Annotations are a valuable tool for collaborative learning and research, and improving tools can make these activities more pleasant.
</p>
<p>
Blog comments seem to be somewhat in decline which is understandable since it's too annoying to register here and there.
On the other hand, platforms like Facebook comments or Disqus are not very privacy friendly, don't give access to data stored (e.g. if Disqus disappears tomorrow so do comments in your blog),
and are not very friendly towards people who do want to comment anonymously.
</p>
<p>
Perhaps in some near future we could <b><b>ditch all the internet commenting platforms</b></b> and rely on annotation layer instead.
<a href="#hypothesis">Hypothesis</a> basically lets you do that already, perhaps with a little work on design (sidebar is not necessarily convenient for social commenting), it could serve that purpose.
</p>
<p>
I also consider comments people write as projections of their minds and it would be great to give other people easier access to that to get to know each other better.
</p>
<p>
It's hardly worth mentioning that one should be in control whether highlights they are making are private or everyone else can see them.
</p></li>
<li><p>
<b><b>Open source</b></b>: not sure if that even needs justifying :)
</p>
<p>
People have somewhat different requirements for their cognitive tools and it should be possible to can hack them and fix annoying bugs.
That also gives way more potential for integrating them with other services.
</p></li>
</ul>
</div>
<div class="outline-3" id="outline-container-org0000029">
<h3 id="comparison"><a class="headerlink" href="#comparison">¶</a>Comparison</h3>
<div class="outline-text-3" id="text-comparison">
<p>
I'm only listing tools that support proper highlighting and commenting.
</p>
<table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups">
<colgroup>
<col class="org-left" />
</colgroup>
<colgroup>
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
<col class="org-left" />
</colgroup>
<thead>
<tr>
<th class="org-left" scope="col"> </th>
<th class="org-left" scope="col">mobile annotations</th>
<th class="org-left" scope="col">fingerprinting</th>
<th class="org-left" scope="col">search in annotations</th>
<th class="org-left" scope="col">separate metadata</th>
<th class="org-left" scope="col">sharing</th>
<th class="org-left" scope="col">open source</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left"><a href="#instapaper">Instapaper</a></td>
<td class="org-left"><span style="color:green">Y</span>, offline</td>
<td class="org-left">n/a</td>
<td class="org-left"><span style="color:red">N</span><a href="#org0000005">↑</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
</tr>
<tr>
<td class="org-left"><a href="#wallabag">Wallabag</a></td>
<td class="org-left"><span style="color:red">N</span><a href="#org0000007">↑</a></td>
<td class="org-left">n/a</td>
<td class="org-left"><a href="https://github.com/wallabag/wallabag/issues/3635"><span style="color:red">N</span></a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><a href="https://github.com/wallabag/wallabag/issues/679"><span style="color:red">N</span></a></td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#hypothesis"><b><b>Hypothesis</b></b></a></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, web API</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#grasp">Copy-paste</a></td>
<td class="org-left"><span style="color:green">Y</span>, offline</td>
<td class="org-left"><span style="color:red">N</span> (manual)</td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left"><a href="#org000000d">Okular</a></td>
<td class="org-left">n/a</td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:#ff9933">limited</span><a href="#org000000f">↑</a></td>
<td class="org-left"><span style="color:#ff9933">limited</span><a href="#org000000e">↑</a></td>
<td class="org-left"><span style="color:green">Y</span>, file sync</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#pdftools">Emacs pdf-tools</a></td>
<td class="org-left">n/a</td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#orgnoter">Emacs org-noter</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#hypothesis_pdf">Hypothesis (PDF)</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, web API</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#xournal">Xournal</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#polar"><b><b>Polar</b></b></a></td>
<td class="org-left"><span style="color:red">N</span>, <a href="https://github.com/burtonator/polar-bookshelf/issues/916">on roadmap</a></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><a href="https://github.com/burtonator/polar-bookshelf/issues/966"><span style="color:red">N</span></a></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync, cloud</td>
<td class="org-left"><span style="color:green">Y</span></td>
</tr>
<tr>
<td class="org-left"><a href="#android_ann">Xodo/Adobe Reader</a></td>
<td class="org-left"><span style="color:green">Y</span>, offline</td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span>, file sync, cloud</td>
<td class="org-left"><span style="color:red">N</span></td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left"><a href="#kindle">Kindle</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:#ff9933">limited</span><a href="#org000001c">↑</a></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:#ff9933">limited</span><a href="#org000001b">↑</a></td>
<td class="org-left"><span style="color:red">N</span>, <a href="#koreader">but koreader ↑</a></td>
</tr>
<tr>
<td class="org-left"><a href="#kobo"><b><b>Kobo</b></b></a></td>
<td class="org-left"><span style="color:red">N</span>, <a href="#org000001f">broken↑</a></td>
<td class="org-left"><span style="color:red">N</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:green">Y</span></td>
<td class="org-left"><span style="color:red">N</span>, <a href="#org000001a">but possible↑</a></td>
<td class="org-left"><span style="color:red">N</span>, <a href="#koreader">but koreader↑</a></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000030">
<h2 id="infra"><a class="headerlink" href="#infra">¶</a><span class="section-number-2">7</span> Using annotation data</h2>
<div class="outline-text-2" id="text-infra">
<p>
Considering there are multiple tools I have to use none of which is fully capable of doing everything I would ideally want from annotation system, I've developed my ways of getting closer to my <a href="#vision">ideal</a>.
For that I've got some infrastructure set up.
</p>
<p>
<b><b>Backups</b></b>: I've already mentioned script I'm using to back up Kobo database, for cloud services I'm running bunch of daily cron jobs that query APIs for data. Most of the job scripts are fairly ad-hoc and just a matter of GET query with properly set oauth token so perhaps not worth sharing, but let me know if you want something specific. These files are always synced across all of my devices, including phone, so I always have access to them.
</p>
<p>
That serves not just as data backup, but also as <b><b>data providers</b></b> for my tools. I only interact with these daily snapshots on filesystem rather than directly with API. That helps to avoid dealing with rate limiting, flakiness in network connection or API itself, and makes it way faster to iterate and develop. The only downside is that the data is not necessarily up to date, but perhaps you can dump data more often to get around this; I would still highly recommend you to prefer that to interacting with API directly. 
</p>
<p>
I'm using a <b><b>special Python package to access the data</b></b>, which I called <a href="https://github.com/karlicoss/my"><code class="inline">my</code></a>. It's always in my <code class="inline">PYTHONPATH</code> so I can use it from any script/tool or REPL. It's got bunch of different submodules, e.g. <code class="inline">my.reading.instapaper</code>, <code class="inline">my.reading.kobo</code>, <code class="inline">my.reading.polar</code> (there are other modules than <code class="inline">my.reading</code>, but that material for a whole separate post). The package itself is not public since it happens to have some personal data in it, at some point I'll try to strip it off and release it (not sure if it would be really relevant for other people anyway).
</p>
</div>
<div class="outline-3" id="outline-container-org000002b">
<h3 id="org000002b"><a class="headerlink" href="#org000002b">¶</a>Extracting reading stats</h3>
<div class="outline-text-3" id="text-org000002b">
<p>
As a specific example how I do it: recently my friend asked me if I could recommend them posts I found interesting on <a href="https://slatestarcodex.com/">Slate Star Codex</a>. With a tiny python script I was quickly able to give them some stats on posts I read, so they could choose among them.
</p>
<div class="org-src-container">
<pre class="src src-python"><span class="org-keyword">import</span> my.reading.hypothesis
<span class="org-keyword">for</span> p <span class="org-keyword">in</span> my.reading.hypothesis.get_pages():
    <span class="org-keyword">if</span> <span class="org-string">'slatestarcodex'</span> <span class="org-keyword">in</span> p.link: 
        <span class="org-keyword">print</span>(f<span class="org-string">'{p.link} {len(p.highlights)}'</span>)
</pre>
</div>
</div>
</div>
<div class="outline-3" id="outline-container-org000002c">
<h3 id="org000002c"><a class="headerlink" href="#org000002c">¶</a>Searching in annotations</h3>
<div class="outline-text-3" id="text-org000002c">
<p>
<a id="org0000000"></a>I've got bunch of scripts and a rendering tool which I named <a href="https://github.com/karlicoss/orger">orger</a> (yep, haven't invested that much thought into naming).
Basically, these scripts take specific data source as input and produce org-mode output, e.g. renders <samp class="inline">json</samp> backed up from Instapaper into <samp class="inline">instapaper.org</samp> file. That runs every few hours and keeps the contents relatively up to date.
</p>
<p>
I chose org-mode as I was already used to its features, keybindings and metadata. Also the hierarchy (e.g. book → highlight → comments) fits naturally into outline format. But not that it's a real necessity, I feel that as long as it's searchable plaintext, it's good enough.
</p>
<p>
To search them, I've got a <b><b>global keybinding</b></b>, which invokes Emacs with incremental search prompt against the directory with rendered <samp class="inline">org</samp> files, which lets me interact with them in a blink on my computer. On Android I'm using <a href="https://play.google.com/store/apps/details?id=com.docsearch">DocSearch</a> indexer (sadly it's not incremental, and app is not open source, so I'm looking for alternative).
</p>
<p>
Finally, I've got a <a href="https://www.lesbonscomptes.com/recoll">Recoll</a> indexer instance + web interface running on my VPS; so if necessary I can access and search annotations via the internet.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000002d">
<h3 id="org000002d"><a class="headerlink" href="#org000002d">¶</a><a id="org0000001"></a>Providing TODO items</h3>
<div class="outline-text-3" id="text-org000002d">
<p>
While reading, I often encounter something I want to google or check or read about later; or just come up to something actionable inspired by what I'm reading.
But I also don't want to interrupt from reading and losing context: that especially matters while reading on a E-ink device: distracting from the book, fetching your phone etc is really annoying.
</p>
<p>
So, as a workaround, I have programmed rules that pick out notes that start with "TODO" or marked with "TODO" tags; etc, and they are <b><b>automatically added to my agenda</b></b>. Later, when I see it on agenda, I'd assign it a priority and reschedule/unschedule depending on importance.
</p>
<p>
<a href="https://github.com/karlicoss/orger/blob/350e76000e34db49cf6b574041b98bd813040851/ip2org.py#L16">Here's</a> an example of me using using <code class="inline">my.instapaper</code> module for that.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000002e">
<h3 id="org000002e"><a class="headerlink" href="#org000002e">¶</a><a id="org0000002"></a>Spaced repetition</h3>
<div class="outline-text-3" id="text-org000002e">
<p>
It's kind of an extension of the previous use case: again, often you want to send something straight into your <a href="https://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition</a> queue without having to remember to add that.
</p>
<p>
I've got two rules for that:
</p>
<ul class="org-ul">
<li>if something is annotated with a certain marker ('drill' for me, comes from <a href="https://orgmode.org/worg/org-contrib/org-drill.html">org-drill</a> package name)</li>
<li>if it's only got one word highlighted, which is useful for memorizing foreign words</li>
</ul>
<p>
<a href="https://github.com/karlicoss/orger/blob/350e76000e34db49cf6b574041b98bd813040851/krill.py#L13">Here's</a> how I'm using it for Kobo highlights.
</p>
</div>
</div>
<div class="outline-3" id="outline-container-org000002f">
<h3 id="org000002f"><a class="headerlink" href="#org000002f">¶</a>Life log</h3>
<div class="outline-text-3" id="text-org000002f">
<p>
I'm a big fan of <a class="post-tag" href="./tags.html#lifelogging">#lifelogging</a> and all the timestamped highlights, comments and <a href="#org000001e">reading progress</a> from Kobo are an effortless (no manual logging!) contribution to my personal timeline, which I render and sync on my devices every few hours.
</p>
<p>
I sometimes use it when conversation with other people comes to awkward silence, so I can recall something I was reading recently and spark off an interesting (well at least for me) topic.
</p>
</div>
</div>
</div>
<div class="outline-2" id="outline-container-org0000031">
<h2 id="org0000031"><a class="headerlink" href="#org0000031">¶</a><span class="section-number-2">8</span> --</h2>
<div class="outline-text-2" id="text-8">
<p>
I'd be interested to know what do you think, and how are you managing your annotations or if you need some help with your existing workflow. Please also let me know if I missed any tools or features!
</p>
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#annotation">#annotation</a> <a class="post-tag" href="./tags.html#sr">#sr</a> <a class="post-tag" href="./tags.html#tools">#tools</a></div>
        <!-- TODO post-date? -->
        <div class="date">05 July 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/opensource/comments/cazgsa/annotating_everything_overview_of_linuxandroid">reddit</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_pkm_annotating"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>How to cope with having fleshy human brain</title>
    <link href="https://beepb00p.xyz/pkm-setup.html" />
    <id>https://beepb00p.xyz/pkm-setup.html</id>
    <published>2019-05-13T00:00:00Z</published>
    <updated>2019-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm orgmode learning">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>How to cope with having fleshy human brain | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>How to cope with having fleshy human brain</h1>
    <div class="summary">My personal knowledge setup</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
So, what is <a href="https://en.wikipedia.org/wiki/Personal_knowledge_management">personal knowledge management</a>? TLDR, it's a name for the process of organizing your tasks, thoughts, information you know, so a fairly useful concept.
</p>
<p>
I guess almost everyone at least at some point of their life tried to bring more organization: used a calendar, checklists, notebook etc.
Perhaps you also were learning something and were wondering of more efficient ways of memorizing, organizing and acting on that information.
</p>
<p>
This is what I'm loosely going to refer as PKM further on.
</p>
<p>
Some of the reasons what I'm going to write about might be useful to you:
</p>
<ul class="org-ul">
<li>you generally want to be more organized in your life but not sure how</li>
<li>you are reading lots of stuff, but then you feel like you quickly forget it (especially on the Internet, where information is denser than in books)</li>
<li>you think that flesh is weak and want to offload remembering things to external persistent medium</li>
</ul>
<p>
I'm writing that because my 'system' has more or less settled and stabilized, and I feel that I could be useful by helping out other people and sharing the ideas.
</p>
<p>
At this point, it also starts getting hard to keep up with all the things and hacks I implemented and maintaining let alone improving them, so I need to spread my ideas to the community.
</p>
<p>
A bit of disclaimer: some of the things I am doing may seem excessive and tedious – but you don't have to use exactly the same setup, I'm merely sharing for you something to kick off!
My own setup has been molded throughout the years with many influences from different people (who I will try to credit as long as I recall). Often some things I'm trying seem like too much effort even for me, but if you never overshoot, you might never hit that sweet spot between efficiency and convenience.
</p>
<p>
I'm very happy to discuss if you have any questions/suggestions/etc.
</p>
<style>
/* TODO err... what if it's got less than 2 digits?... so far only matters for pkm-plan post */
.section-number-2 {
    display: inline-block;
    text-align: right;
    width: 2ch;
}

/* TODO remove it later */
.todo {
  width: 4ch;
}

.outline-2 h2 {
/* TODO make a bit more spacious */
   margin-top: 0.1em;
   margin-bottom: 0.1em;
}
</style>

So, this is the plan, which I will fill with links as I write.

<div class="outline-2" id="outline-container-org0000000">
<h2 id="org0000000"><a class="headerlink" href="#org0000000">¶</a><span class="section-number-2">1</span> <span class="todo STRT">STRT</span> task/todo management</h2>
<div class="outline-text-2" id="text-1">
</div>
</div>
<div class="outline-2" id="outline-container-org0000001">
<h2 id="org0000001"><a class="headerlink" href="#org0000001">¶</a><span class="section-number-2">2</span> <span class="todo TODO">TODO</span> personal wiki</h2>
</div>
<div class="outline-2" id="outline-container-org0000002">
<h2 id="org0000002"><a class="headerlink" href="#org0000002">¶</a><span class="section-number-2">3</span> <a href="./pkm-search.html">Searching information</a></h2>
<div class="outline-text-2" id="text-3">
</div>
</div>
<div class="outline-2" id="outline-container-org0000003">
<h2 id="org0000003"><a class="headerlink" href="#org0000003">¶</a><span class="section-number-2">4</span> <span class="todo TODO">TODO</span> logging and capturing</h2>
</div>
<div class="outline-2" id="outline-container-org0000004">
<h2 id="org0000004"><a class="headerlink" href="#org0000004">¶</a><span class="section-number-2">5</span> <span class="todo STRT">STRT</span> processing and organizing information</h2>
<div class="outline-text-2" id="text-5">
<ul class="org-ul">
<li>see posts about Orger (<a href="./orger.html">1</a>, <a href="./orger-todos.html">2</a>), in particular, <a href="./orger-todos.html#reddit">reddit processing workflow</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000005">
<h2 id="org0000005"><a class="headerlink" href="#org0000005">¶</a><span class="section-number-2">6</span> <a href="./annotating.html">Annotating information</a></h2>
<div class="outline-text-2" id="text-6">
</div>
</div>
<div class="outline-2" id="outline-container-org0000006">
<h2 id="org0000006"><a class="headerlink" href="#org0000006">¶</a><span class="section-number-2">7</span> <span class="todo TODO">TODO</span> discovering new information</h2>
</div>
<div class="outline-2" id="outline-container-org0000007">
<h2 id="org0000007"><a class="headerlink" href="#org0000007">¶</a><span class="section-number-2">8</span> <span class="todo STRT">STRT</span> spaced repetition and habits</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>example of using Orger <a href="./orger-todos.html#krill">to drill new words from my Kobo reader</a></li>
</ul>
</div>
</div>
<div class="outline-2" id="outline-container-org0000008">
<h2 id="org0000008"><a class="headerlink" href="#org0000008">¶</a><span class="section-number-2">9</span> <span class="todo TODO">TODO</span> syncing</h2>
</div>
<div class="outline-2" id="outline-container-org0000009">
<h2 id="org0000009"><a class="headerlink" href="#org0000009">¶</a><span class="section-number-2">10</span> <span class="todo STRT">STRT</span> regular backups</h2>
<div class="outline-text-2" id="text-10">
</div>
</div>
<div class="outline-2" id="outline-container-org000000a">
<h2 id="org000000a"><a class="headerlink" href="#org000000a">¶</a><span class="section-number-2">11</span> <span class="todo TODO">TODO</span> timeline</h2>
</div>
<div class="outline-2" id="outline-container-org000000b">
<h2 id="org000000b"><a class="headerlink" href="#org000000b">¶</a><span class="section-number-2">12</span> <span class="todo TODO">TODO</span> future</h2>
</div>
<div class="outline-2" id="outline-container-org000000c">
<h2 id="org000000c"><a class="headerlink" href="#org000000c">¶</a><span class="section-number-2">13</span> <span class="todo STRT">STRT</span> developing tools</h2>
<div class="outline-text-2" id="text-13">
</div>
</div>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#orgmode">#orgmode</a> <a class="post-tag" href="./tags.html#learning">#learning</a></div>
        <!-- TODO post-date? -->
        <div class="date">13 May 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_pkm_setup"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Don't shoot the artist</title>
    <link href="https://beepb00p.xyz/contemp-art.html" />
    <id>https://beepb00p.xyz/contemp-art.html</id>
    <published>2019-05-12T00:00:00Z</published>
    <updated>2019-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="art">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Don't shoot the artist | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            

<!-- <link rel="stylesheet" href="/css/org.css" /> -->

<link rel="stylesheet" href="./css/htmlize.css" />
<link rel="stylesheet" href="./css/org-default.css" />

<link rel="stylesheet" href="./css/org-extra.css?v=3" />



<article>
    
    <section class="post-title">
    <h1>Don't shoot the artist</h1>
    <div class="summary">How I visited a contemporary art museum and didn't get it</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>
Today I visited <a href="https://www.ludwigmuseum.hu/en">Ludwig Museum</a> in Budapest, which hosts a contemporary art gallery.
</p>
<p>
I don't think I generally 'get' contemporary art. However I don't get conventional either! I'm quite an unsophisticated person, some of art I like and appretiate, some don't. So I'm usually trying to expose myself to it just to keep up.
</p>
<p>
Anyway, by the time I got to the third floor of the exhibition I started to get irritated. Usually, I can appreciate at least some of art objects, but none of the ones I had seen so far made any sense. 
</p>
<p>
Some irritation was directed internally: "Ugh why am I doing this to myself, I should have gotten a coffee, sat on grass and enjoyed reading Penrose instead". But also a bit at the artists: "Ok, it's 2019, hasn't humanity seen enough white squares and various kinds of gradients?".
</p>
<p>
So as I walked among popart on the last floor my mind wandered and I remembered a post I read on <a href="https://slatestarcodex.com/2019/02/26/rule-genius-in-not-out/">SSC</a>. The idea that I had absorbed from it is that I shouldn't really judge people who are trying to come up with new ideas and things; they are already a minority and it's not worth wasting my mental resources as long as they are not harming anyone.
</p>
<p>
Perhaps it's similar with art? They are exploring new territory, new mediums, so they are quite likely to make mistakes, such as things very few people get, if not <a href="https://en.wikipedia.org/wiki/The_Shard">hated by many</a>.
But the 1% that does manage to push the boundary would result in something beautiful that no one else would otherwise make (I'm sure you fancy at least some contemporary <a href="https://www.huffpost.com/entry/2014-archdaily-building-of-the-year-awards_n_4645591">buildings</a> or <a href="https://www.tate.org.uk/visit/tate-modern">art works</a> unless you were born in 1830). 
</p>
<p>
Not sure what happens to the remaining 99%. Maybe they give up on trying to invent new art and just become decent designers/architects? Would be interesting to check if that's actually the case.
</p>
<p>
This realization made the irritation go and made the rest of exploration a bit more pleasurable.
</p>

    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#art">#art</a></div>
        <!-- TODO post-date? -->
        <div class="date">12 May 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_contemp_art"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>sufs</title>
    <link href="https://beepb00p.xyz/sufs.html" />
    <id>https://beepb00p.xyz/sufs.html</id>
    <published>2019-05-09T00:00:00Z</published>
    <updated>2019-05-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="tools setup">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>sufs | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>sufs</h1>
    <div class="summary">Tool to merge directories via symlinks</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p><a href="https://github.com/karlicoss/sufs">sufs</a> is a tool for ‘merging’ multiple directories into one via symlinks.</p>
<p>I’m syncing most of my stuff via syncthing, but some of it has to be locally (mainly for stupid reasons like massive <code>node_modules</code> directory etc.). But it’s nice to have a unified view of them so you don’t have to memorize what did you put where.</p>
<p>Usage example:</p>
<pre><code>   # initialize merged dir`
   mkdir /home/user/datas 

   # you might want to keep the following in cron
   sufs.py --to /home/user/datas /home/user/syncthing/data /home/user/dropbox/data /home/user/syncthing/data</code></pre>
<p>Before I wrote this script I tried FUSE based filesystems: <a href="https://en.wikipedia.org/wiki/UnionFS">Unionfs</a> and <a href="https://github.com/trapexit/mergerfs">Mergerfs</a>, but wasn’t really satisfied. Weirdly, couldn’t also find anythig existing on github, so had to write my own.</p>
<p>First, you don’t know where actually fuse mounted dirst reside. Second, for instance, mergerfs had some weird new file handling logic, so the directories would end up scattered across multiple sources. Overall I found it a bit confusing.</p>
<p>This script uses symlinks, so you always know the actual location; and also maintains the top level directory as read only, so you can’t end up with dangling directories.</p>
<p>The only disadvantage at the moment is that symlink updating can only happen once a minute if you run via cron, but should be easy to use inotify if that’s an issue.</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#tools">#tools</a> <a class="post-tag" href="./tags.html#setup">#setup</a></div>
        <!-- TODO post-date? -->
        <div class="date">09 May 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_sufs"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>On cognitive demand of recycling</title>
    <link href="https://beepb00p.xyz/recycling-is-hard.html" />
    <id>https://beepb00p.xyz/recycling-is-hard.html</id>
    <published>2019-04-18T00:00:00Z</published>
    <updated>2019-04-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="recycling environment">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>On cognitive demand of recycling | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>On cognitive demand of recycling</h1>
    <div class="summary">So many questions, so few answers</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>Even since I moved to the UK I’ve of course been separating waste. I wasn’t ever questioning the positive value of recycling or suspecting it could be a conspiracy designed to drain my time or anything along that line. In many ways it’s even easier since you can pile up plastic/cardboard/glass and just throw it away in bulk, and have a smaller food waste bin. I was never too crazy about it though, so I never bothered recycling every last bit of material that I possibly could.</p>
<p>Recently though I started wondering if I should be more efficient at recycling, so I googled for a bit, and … got nowhere.</p>
<p>For instance, one of my fluorescent light bulbs died. It’s not recycled by the council, so can’t be put in the recycling dumpster. Apparently it also contains mercury and shouldn’t be put in general waste either. The closest recycling facility that accepts energy efficient bulbs is 15 mins from me by tube. The question is — disregarding that I don’t feel like spending half an hour in transport to recycle couple of light bulbs: is it more efficient for the planet if instead of going there I just spend that time on my high paying job and donate the money. I seriously suspect that recycling a bulb is <a href="https://en.wikipedia.org/wiki/Effective_altruism">not the most environmentally efficient thing I can do with my skills</a>. <strong>How much environmental impact in terms of pure dollars of damage does a light bulb have anyway?</strong> Sadly, I didn’t manage to find any specific numbers.</p>
<p>Another thing that puzzled me: <strong>is it worth washing a soiled plastic container before recycling?</strong> You’re wasting hot water and detergents after all, which also has some environmental impact (also your time if you wash manually). The internet gives confusing answers, starting from people who put their greasy plastic in dishwasher to suggestions to only give a quick rinse. I can’t understand how rinsing without washing helps against attracting bacteria and greasing paper in mixed recycling. Couldn’t google anything meaningful either.</p>
<p>Interesting enough, while looking that up, I ran into many discussions of using paper plates vs washing ceramic plates — apparently it’s unclear which is more environmental! <a href="https://sustainability.stackexchange.com/a/6020">Here’s</a> an example calculation which gives <code>$0.78</code> vs <code>$0.63</code>, the difference I find pretty marginal. Generally all over the place the answer seems to be “it depends on your detergent, electricity source, etc”. <strong>How is an average person meant to figure that out?</strong></p>
<p>Lastly, it’s not even clear which <a href="https://www.pureplanetrecycling.co.uk/types-of-plastics/">types of plastic</a> materials you can recycle. For instance, my <a href="https://www.towerhamlets.gov.uk/lgnl/environment_and_waste/recycling_and_waste/a-z_recycling_guide.aspx">council’s website</a> has no mention of specific materials whatsoever, only ‘trays’, ‘yogurt pots’ and ‘bags’.</p>
<p><a href="https://www.cityoflondon.gov.uk/services/environment-and-planning/waste-and-recycling/household-waste-and-recycling/Pages/recycling-A-to-Z.aspx">City of London website</a> confuses me as well:</p>
<ul>
<li>It mentions PS (polystyrene, 6) as non-recyclable and it instructs to recycle yogurt pots. However some of yogurt pots are made of polystyrene!</li>
<li>“Plastic bags, including those used for salad, bread, rice/pasta should be placed in the household waste”. While most of salad packaging I seen here has no marking, some of it is made of PP (polypropylene, 5), which is same stuff that used to make yogurt pots. <strong>Surely there should be no difference in recycling as long as it’s the same material?</strong></li>
</ul>
<p>I find it very hard to remember every specific shape of plastic, surely it’s way easier to base your decision to recycle on a single number they but on plastic? At least there is a little I can do about that and I emailed my council asking to clarify.</p>
<p>Lastly, I can’t help feeling that I’m nitpicking and the 95% of obviously recyclable stuff I already recycle is enough; and that I should have spent time writing this post doing something more obviously useful. However, I’m already done and hopefully will gain more knowledge about recycling as a result.</p>
<p><strong>How can we make it easier to decide if something can or can’t be recycled and whether it has net positive cost with respect to time you spend doing it?</strong></p>
<p>If you know answers to any of the questions here, please let me know!</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#recycling">#recycling</a> <a class="post-tag" href="./tags.html#environment">#environment</a></div>
        <!-- TODO post-date? -->
        <div class="date">18 April 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_recycling_is_hard"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Forcing IPython to display multiple equations in single line</title>
    <link href="https://beepb00p.xyz/ipynb-singleline.html" />
    <id>https://beepb00p.xyz/ipynb-singleline.html</id>
    <published>2019-04-14T00:00:00Z</published>
    <updated>2019-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="ipython emacs">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Forcing IPython to display multiple equations in single line | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
        <script type="text/javascript">
 window.MathJax = {
     tex2jax: {
         // note that hakyll source has got double dollar signs due to special meaning in templates
         inlineMath: [ ['$','$'], ["\\(","\\)"] ],
         processEscapes: true
     }
 };
</script>
<script async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            
<link rel="stylesheet" href="./css/ipynb.css" />
<link rel="stylesheet" href="./css/ipynb-syntax.css" />




<article>
    
    <section class="post-title">
    <h1>Forcing IPython to display multiple equations in single line</h1>
    <div class="summary">How I sacrificed few hours of my life for aethetics</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    


   
   <details class="cell-collapsed">
   <summary>IPython imports <span class="cell-collapsed-expand">(click to expand)</span></summary>
       
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[1]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="kn">from</span> <span class="nn">sympy</span> <span class="k">import</span> <span class="n">symbols</span><span class="p">,</span> <span class="n">Derivative</span> <span class="k">as</span> <span class="n">D</span><span class="p">,</span> <span class="n">Function</span> <span class="k">as</span> <span class="n">F</span><span class="p">,</span> <span class="n">Eq</span><span class="p">,</span> <span class="n">init_printing</span><span class="p">,</span> <span class="n">latex</span>
<span class="kn">from</span> <span class="nn">IPython.display</span> <span class="k">import</span> <span class="n">Markdown</span>
<span class="n">init_printing</span><span class="p">()</span>
</pre></div>

    </div>
</div>
</div>

</div>
   </details>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>If you are working with numerical computations in an IPython notebook, you don't really have much choice but accompany your computations by Latex
formulas. However, with symbolic computations, you can massively save on repeating the same formulas which are already encoded in your
symbolic object. Here's a quick example how it typically looks in the notebooks I've seen on the internet:</p>
<hr>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[2]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">x</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s1">'x t'</span><span class="p">)</span>
<span class="n">U</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="s1">'U'</span><span class="p">)(</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
<span class="n">heat_eq</span> <span class="o">=</span> <span class="n">Eq</span><span class="p">(</span><span class="n">D</span><span class="p">(</span><span class="n">U</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span> <span class="n">D</span><span class="p">(</span><span class="n">U</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Solving heat type PDE:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[3]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">heat_eq</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_latex output_subarea ">
$\displaystyle \frac{\partial}{\partial t} U{\left(x,t \right)} = \frac{\partial^{2}}{\partial x^{2}} U{\left(x,t \right)}$
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[4]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">bc_left</span>  <span class="o">=</span> <span class="n">Eq</span><span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">bc_right</span> <span class="o">=</span> <span class="n">Eq</span><span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="n">subs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Subject to:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[5]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">bc_left</span><span class="p">)</span>
<span class="n">display</span><span class="p">(</span><span class="n">bc_right</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>




<div class="output_latex output_subarea ">
$\displaystyle U{\left(0,t \right)} = 0$
</div>

</div>

<div class="output_area">

    <div class="prompt"></div>




<div class="output_latex output_subarea ">
$\displaystyle U{\left(1,t \right)} = 0$
</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<hr>
<p>What I don't like about that style of presentation is that it's pretty scattered and reqires interleaving displayed formulas with random python cells.
That's bad since it either pollutes your notebook and takes up vertical space, or discourages you from producing useful outputs in favor of notebook aethetics. Here are couple of examples <a href="https://www.sympy.org/en/index.html">featured on Sympy</a> website:</p>
<ul>
<li><a href="https://digitalcommons.calpoly.edu/cgi/viewcontent.cgi?article=1072&amp;context=physsp/">Quantum Programming in Python</a>, suffers from the first problem</li>
<li><a href="https://github.com/bjodah/chempy/blob/d5371c7/examples/ammonical_cupric_solution.ipynb">chempy</a> suffers from the second problem</li>
</ul>
<p>What we want is to output whole bunch of things at once.
Sadly, <code>display</code> doesn't support even outputting two formulas on a single line without hacking CSS,
so this is the easiest way of doing it I came up with to so far:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[6]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">display</span><span class="p">(</span><span class="n">Markdown</span><span class="p">(</span><span class="s2">&quot;Solving heat type PDE $</span><span class="si">{}</span><span class="s2">$ subject to: $</span><span class="si">{}</span><span class="s2">$ and $</span><span class="si">{}</span><span class="s2">$&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">latex</span><span class="p">(</span><span class="n">heat_eq</span><span class="p">),</span> <span class="n">latex</span><span class="p">(</span><span class="n">bc_left</span><span class="p">),</span> <span class="n">latex</span><span class="p">(</span><span class="n">bc_right</span><span class="p">))))</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>



<div class="output_markdown rendered_html output_subarea ">
<p>Solving heat type PDE $\frac{\partial}{\partial t} U{\left(x,t \right)} = \frac{\partial^{2}}{\partial x^{2}} U{\left(x,t \right)}$ subject to: $U{\left(0,t \right)} = 0$ and $U{\left(1,t \right)} = 0$</p>

</div>

</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>It's quite tedious to do that every time, so I extracted it in a little helper method:
TODO inject function code here... perhaps templating engine??</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[7]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">ldisplay_md</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">display</span><span class="p">(</span><span class="n">Markdown</span><span class="p">(</span><span class="n">fmt</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
        <span class="o">*</span><span class="p">(</span><span class="n">f</span><span class="s1">'${latex(x)}$'</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">args</span><span class="p">),</span>
        <span class="o">**</span><span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">f</span><span class="s1">'${latex(v)}$'</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()})</span>
    <span class="p">))</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>So far so good, I just define <code>ldisplay = ldisplay_md</code> on top of my notebook and use <code>ldisplay</code> instead of display for singleline outputs.</p>
<p>However while trying to use it with <a href="https://github.com/millejoh/emacs-ipython-notebook">EIN</a> (emacs frontent for jupiter),
I ran into an issue: EIN doesn't support Markdown outputs!
Same thing happens if you run it in terminal: you're just gonna get <code>&lt;IPython.core.display.Markdown object&gt;</code>.
Nevertheless, it is capable of outputing formulas as ASCII art, kinda like this:</p>

<pre><code>                2
∂              ∂
──(U(x, t)) = ───(U(x, t))
∂t              2
              ∂x

</code></pre>
<p>, so we can achieve a similar effect by formatting manually via <code>str.format</code>.</p>
<p>Without further ado, here's the bit of code which does that:</p>

</div>
</div>
</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[8]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="k">def</span> <span class="nf">as_text</span><span class="p">(</span><span class="n">thing</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">IPython.core.interactiveshell</span> <span class="k">import</span> <span class="n">InteractiveShell</span> <span class="c1"># type: ignore</span>
    <span class="n">plain_formatter</span> <span class="o">=</span> <span class="n">InteractiveShell</span><span class="o">.</span><span class="n">instance</span><span class="p">()</span><span class="o">.</span><span class="n">display_formatter</span><span class="o">.</span><span class="n">formatters</span><span class="p">[</span><span class="s1">'text/plain'</span><span class="p">]</span>
    <span class="n">pp</span> <span class="o">=</span> <span class="n">plain_formatter</span><span class="p">(</span><span class="n">thing</span><span class="p">)</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">pp</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">lines</span>

<span class="k">def</span> <span class="nf">vcpad</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
    <span class="n">width</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">missing</span> <span class="o">=</span> <span class="n">height</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
    <span class="n">above</span> <span class="o">=</span> <span class="n">missing</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">below</span> <span class="o">=</span> <span class="n">missing</span> <span class="o">-</span> <span class="n">above</span>
    <span class="k">return</span> <span class="p">[</span><span class="s1">' '</span> <span class="o">*</span> <span class="n">width</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">above</span><span class="p">)]</span> <span class="o">+</span> <span class="n">lines</span> <span class="o">+</span> <span class="p">[</span><span class="s1">' '</span> <span class="o">*</span> <span class="n">width</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">below</span><span class="p">)]</span>

<span class="c1"># terminal and emacs can't display markdown, so we have to use that as a workaround</span>
<span class="k">def</span> <span class="nf">mdisplay_plain</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">re</span>
    <span class="kn">from</span> <span class="nn">itertools</span> <span class="k">import</span> <span class="n">chain</span>
    <span class="n">fargs</span>   <span class="o">=</span> <span class="p">[</span><span class="n">as_text</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span>
    <span class="n">fkwargs</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">as_text</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>

    <span class="n">height</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">chain</span><span class="p">(</span><span class="n">fargs</span><span class="p">,</span> <span class="n">fkwargs</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>

    <span class="n">pargs</span>   <span class="o">=</span> <span class="p">[</span><span class="n">vcpad</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">fargs</span><span class="p">]</span>
    <span class="n">pkwargs</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">vcpad</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">fkwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>

    <span class="n">textpos</span> <span class="o">=</span> <span class="n">height</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
        <span class="n">largs</span>   <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">pargs</span><span class="p">]</span>
        <span class="n">lkwargs</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">pkwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
        <span class="k">if</span> <span class="n">h</span> <span class="o">==</span> <span class="n">textpos</span><span class="p">:</span>
            <span class="n">fstr</span> <span class="o">=</span> <span class="n">fmt</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># we want to keep the formatting specifiers (stuff in curly braces and empty everything else)</span>
            <span class="n">fstr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="sa">r</span><span class="s1">'{.*?}'</span><span class="p">,</span> <span class="n">fmt</span><span class="p">):</span>
                <span class="n">fstr</span> <span class="o">=</span> <span class="n">fstr</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">fstr</span><span class="p">))</span>
                <span class="n">fstr</span> <span class="o">+=</span> <span class="n">e</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
        <span class="n">lines</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fstr</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">largs</span><span class="p">,</span> <span class="o">**</span><span class="n">lkwargs</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">())</span>
</pre></div>

    </div>
</div>
</div>

</div>





    
<div class="cell border-box-sizing code_cell rendered">
<div class="input">
<div class="prompt input_prompt">In&nbsp;[9]:</div>
<div class="inner_cell">
    <div class="input_area">
<div class=" highlight hl-ipython3"><pre><span></span><span class="n">mdisplay_plain</span><span class="p">(</span><span class="s2">&quot;Solving heat type PDE  </span><span class="si">{}</span><span class="s2"> subject to: </span><span class="si">{bl}</span><span class="s2"> and </span><span class="si">{br}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">heat_eq</span><span class="p">,</span> <span class="n">bl</span><span class="o">=</span><span class="n">bc_left</span><span class="p">,</span> <span class="n">br</span><span class="o">=</span><span class="n">bc_right</span><span class="p">)</span>
</pre></div>

    </div>
</div>
</div>

<div class="output_wrapper">
<div class="output">


<div class="output_area">

    <div class="prompt"></div>


<div class="output_subarea output_stream output_stdout output_text">
<pre>                                       2
                       ∂              ∂
Solving heat type PDE  ──(U(x, t)) = ───(U(x, t)) subject to: U(0, t) = 0 and U(1, t) = 0
                       ∂t              2
                                     ∂x
</pre>
</div>
</div>

</div>
</div>

</div>





    
<div class="cell border-box-sizing text_cell rendered"><div class="prompt input_prompt">
</div><div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
<p>Neat? I think so!</p>
<p>The sad thing is that figuring out the <code>as_text</code> bit took me about an hour of intense debugging, 
including setting explicit pdb breakpoints in IPython source code. I'm not sure how normal people are meant to figure that out. 
One could argue that desire to work with IPython notebooks in Emacs is not very normal either though.
Hopefully that saves someone else a bit of time.</p>

</div>
</div>
</div>



 


    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#ipython">#ipython</a> <a class="post-tag" href="./tags.html#emacs">#emacs</a></div>
        <!-- TODO post-date? -->
        <div class="date">14 April 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_ipynb_singleline"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>I've found Google Takeouts to silently remove old data</title>
    <link href="https://beepb00p.xyz/takeout-data-gone.html" />
    <id>https://beepb00p.xyz/takeout-data-gone.html</id>
    <published>2019-03-08T00:00:00Z</published>
    <updated>2019-03-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="backup">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>I've found Google Takeouts to silently remove old data | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>I've found Google Takeouts to silently remove old data</h1>
    <div class="summary">Crosspost from /r/DataHoarder</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>This is a <a href="https://www.reddit.com/r/DataHoarder/comments/ayt5cu/ive_found_out_google_takeout_archives_are_not/">crosspost</a> from Reddit.</p>
<p><strong>TLDR</strong>: keep/backup your old Google Takeout archives, turns out the data is not persisted across them.</p>
<p>So I am working on a personal project for which I am collecting all the URLs I even visited. I update them via cron from multiple sources, in particular my latest Google Takeout archive which I’m always storing on my desktop. I’ve been improving the resilience of the project in terms of making sure I don’t break URL extracion so I wrote a script to diff the extracted urls and check if any of them disappear. What I found out was that urls from takeout were in fact mysteriously disappearing.</p>
<p>After a bit of WTF and investigation, turned out that takeout data is not cumulative (at least for some of sources), and seems to have some sort of retention period.</p>
<p>Here are some of my findings:</p>
<ul>
<li><p>archive from 20181227</p>
<pre><code>  grep time_usec BrowserHistory.json | sort | head -n 3
            &quot;time_usec&quot;: 1513604826000563
            &quot;time_usec&quot;: 1513606272469876
            &quot;time_usec&quot;: 1513606362996796
  oldest entry is 18 Dec 2017

  tidy -q -i Chrome/MyActivity.html | grep -e 'PM' -e 'AM' | tail -n 3
            Dec 18, 2017, 2:12:42 PM UTC
            Dec 18, 2017, 2:11:12 PM UTC
            Dec 18, 2017, 1:47:06 PM UTC

  tidy -q -i Search/MyActivity.html | grep -e 'PM' -e 'AM' | tail -n 3
            Jan 23, 2015, 7:56:09 PM UTC
            Jan 23, 2015, 7:42:42 PM UTC
            Jan 23, 2015, 7:42:41 PM UTC</code></pre></li>
<li><p>archive from 20180623</p>
<pre><code>  grep time_usec BrowserHistory.json | sort | head -n 3
            &quot;time_usec&quot;: 1496659157550587
            &quot;time_usec&quot;: 1496660371451340
            &quot;time_usec&quot;: 1496661577902967
  oldest entry is 05 Jun 2017

  tidy -q -i Chrome/MyActivity.html | grep -e 'PM' -e 'AM' | tail -n 3 
            Jun 5, 2017, 2:43:58 PM
            Jun 5, 2017, 2:43:55 PM
            Jun 5, 2017, 2:40:28 PM

  tidy -q -i Search/MyActivity.html | grep -e 'PM' -e 'AM' | tail -n 3
            Aug 5, 2014, 6:19:32 PM
            Aug 5, 2014, 5:25:34 PM
            Aug 5, 2014, 5:25:32 PM</code></pre></li>
<li><p>archive from 20170410</p>
<pre><code>  grep time_usec BrowserHistory.json | sort | head -n 3
            &quot;time_usec&quot;: 1465298229733388
            &quot;time_usec&quot;: 1465298231949965
            &quot;time_usec&quot;: 1465298248753114
  oldest entry is 07 Jun 2016</code></pre>
<p>that takeout doesn’t have any of MyActivity.html (Google added it later in 2017) there is <code>Searches</code> directory which contains some jsons back to October 2010</p></li>
</ul>
<p>In summary: looks like <code>BrowserHistory.json</code> has got a retention of about 1 year, same for <code>Chrome/MyActivity.html</code>. <code>Search/MyActivity.html</code> has got a retention of about 3 years. It’s a mess.</p>
<p>Not sure if there is a similar issue with other takeout stuff (e.g. youtube watch history, shopping, location etc), so be careful if you rely on it!</p>
<p>I guess it was sort of a gut feeling that I was paranoid about that and was keeping some of the older archives.</p>
<p>Also I haven’t really found anything about this retention anywhere in google takeout FAQ. Does anyone know about it? Is it some sort of legal requirement, a bug or something else?</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#backup">#backup</a></div>
        <!-- TODO post-date? -->
        <div class="date">08 March 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/DataHoarder/comments/ayt5cu/ive_found_out_google_takeout_archives_are_not">/r/DataHoarder</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_takeout_data_gone"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Quantifying quantified-mind.com</title>
    <link href="https://beepb00p.xyz/quantified-mind.html" />
    <id>https://beepb00p.xyz/quantified-mind.html</id>
    <published>2019-03-06T00:00:00Z</published>
    <updated>2019-03-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="cognitive quantified-self selenium">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Quantifying quantified-mind.com | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>Quantifying quantified-mind.com</h1>
    <div class="summary">Exploiting javascript to reverse engineer cognitive score</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p><a href="http://www.quantified-mind.com/about">Quantified Mind</a> is a website which provides a handful of cognitive tests. It lets you choose a bunch of tests and you can run them whenever you wish, adding quantitative variables you are measuring alongside (e.g. hours of sleep, or cups of coffee you drank) or just arbitrary notes. <a href="http://quantifiedself.com/wp-content/uploads/2012/04/QM_collage.jpg">Here</a> is how it looks like.</p>
<p>Why is it interesting? If you are like me and don’t feel much obvious subjective effects of conventional stimulants, sleep or exercise, it would be great to have some objective measure in case the effects are subtle but present. For you it could be saving half an hour of sleep per night by using melatonin, or realizing coffee doesn’t have effect on your cognitive performance, or something else.</p>
<p>That sounded pretty interesting to me, and I started doing some tests (simple reaction time, visual matching, sorting and 1-back). However, given that effects are subtle in the first place, I wasn’t expecting to get any insights by gazing at collected data, so I needed to make sure I can export my experiments to run some sort of regression on them later.</p>
<p>To my disappointment, when I ran thirty or something sessions and downloaded the CSV, it didn’t have error rate/reaction time, but you are only getting some magical ‘score’. It was unclear what it meant from the FAQ so I emailed the authors and got a response:</p>
<pre><code>As for scores - it's a calculation that involves everything in a test, so for simple reaction time it involves both reaction times
and accuracy. 
The actual formulas aren't available, but the instructions are always simple: go for accuracy first, and try to be as fast as you can
without sacrificing accuracy.</code></pre>
<p>“Formulas aren’t available” was quite unsatisfactory to me. What are they actually measuring? So before carrying on and doing more tests I tried to reverse engineer the model.</p>
<h1 id="implementation">Implementation</h1>
<p>The idea was simple: choose couple of tests that are easy to automate. Luckily, the website is not using flash and not very heavy on javascript or obfuscation, so interacting with elements via javascript was fairly easy. In essence, I’m varying average reaction time (delay) and number of errors (which I make deliberately in the script), and inject the script into chrome via Selenium. Then I record the scores for further analysis.</p>
<p>If you wanna experiment by yourself, <a href="https://github.com/karlicoss/qm-reverse-engineering">here’s</a> the repository and if you don’t feel like running the scripts for a day to collect data, I uploaded it to <a href="https://github.com/karlicoss/qm-reverse-engineering/releases">releases</a>.</p>
<h1 id="tests">Tests</h1>
<p>I’ve chosen “Simple reaction time” and “Visual matching”. From the <a href="http://www.quantified-mind.com/science">“science”</a> section:</p>
<pre><code>The first is “Simple Reaction Time,” which assesses how quickly a person can respond to a single stimulus (a circle that turns 
from white to green) by pressing the space bar. 

“Visual Matching” places two highlighted grids next to one another and asks a person to judge, as quickly as possible, whether 
the two grids are identical.</code></pre>
<h1 id="results">Results</h1>
<p>TLDR: I find the models pretty weird.</p>
<p>Here is the demo of my script that extracted scores from the tests: <iframe width="560" height="315" src="https://www.youtube.com/embed/dolS7X7QrB0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p>
<p>Here is what I got after the simulations (clicking highly recommended):</p>
<p><a href="https://user-images.githubusercontent.com/291333/53916603-6a875880-405a-11e9-9447-90da86bf959a.png"> <img src="https://user-images.githubusercontent.com/291333/53916603-6a875880-405a-11e9-9447-90da86bf959a.png" width="auto" /> </a></p>
<p><a href="https://user-images.githubusercontent.com/291333/53916604-6a875880-405a-11e9-824a-ab2445cc4184.png"> <img src="https://user-images.githubusercontent.com/291333/53916604-6a875880-405a-11e9-824a-ab2445cc4184.png" width="auto" /> </a></p>
<h1 id="observations">Observations</h1>
<ul>
<li><p>Same score could mean different things; you can see it from the plots if you draw horizontal lines, they would intersect multiple curves corresponding to different delays.</p>
<p>So, for instance, if you get score 600 on visual matching, that could mean that you did the test with 880ms reaction and 0 errors, or with 840ms reaction and 2 errors or 760ms reaction and 4 errors. These are fairly different results and even though it’s good to have some sort of aggregate score, it’s also useful to distinguish. E.g. maybe caffeine makes you less patient so you press early and make more errors.</p></li>
<li><p>For low reaction time (&lt;300ms for simple reaction time &lt;600ms for visual matching), the plots don’t look continuous, there are some sudden drops. That’s pretty suspicious IMO.</p>
<p>Perhaps that could explained by the fact that such low times are impossible to get by average humans and they are out of the test domain.</p></li>
<li><p>If you keep number of error fixed, one would expect that score grows as the reaction time goes does. That is not the case on plots, probably related to the artifact above.</p></li>
<li><p>If you keep reaction time fixed, you would expect the score to decrease monotonically with the number of errors. You can see that for simple reaction time after 600ms, the score actually monotonically <strong>increases</strong> as you make more errors. Again, one could argue that reaction of 600 ms is too long for average human on this test (e.g. I score about 230), but I can easily imagine drugs (even such as alcohol) resulting in these scores, which could also be interesting to measure.</p></li>
<li><p>If you think about, 8 (out of 16) errors is what you would get on visual matching if you answer randomly (which you could do with almost arbitrary low reaction time). So if you do that, say, with 400ms delay, according to the plot you would score around 620 points. Which is what I get by doing the test myself with 800ms reaction and making 1 error. So what does the score represent then?</p></li>
</ul>
<h1 id="summary">Summary</h1>
<p>I can’t see how is that score meaningful and I’m glad I didn’t spend more time doing these tests. Perhaps one is better off measuring reaction time directly instead of some mystical ‘score’.</p>
<h1 id="whats-next">What’s next?</h1>
<p>Could be interesting to do similar reverse engineering on other cognitive testing platforms.</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#cognitive">#cognitive</a> <a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a> <a class="post-tag" href="./tags.html#selenium">#selenium</a></div>
        <!-- TODO post-date? -->
        <div class="date">06 March 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/QuantifiedSelf/comments/ayfieu/quantifying_quantifiedmindcom">reddit</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_quantified_mind"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Sleep tracking</title>
    <link href="https://beepb00p.xyz/sleep-tracking.html" />
    <id>https://beepb00p.xyz/sleep-tracking.html</id>
    <published>2019-02-21T00:00:00Z</published>
    <updated>2019-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="sleep quantified-self">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Sleep tracking | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>Sleep tracking</h1>
    <div class="summary">How not to do it</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>I’ve been tracking my sleep passively for a while. Not that I had any issues with sleep, but considering you spend massive chunk of your life sleeping, seems like a good idea to optimize it. After I bought <a href="https://www.emfit.com/sleep-sensing-solutions-with-hrv">Emfit</a> sleep tracker I figured it would be interesting to try correlating its stats with my subjective feelings.</p>
<p>Every morning, I log few things on the scale from 0 (bad) to 2 (good), one of which is something that I defined as “physical energy” (as opposed to mental energy). Well,</p>
<pre><code>| date         | physical |
|              | energy   |
|--------------|----------+
| [2018-07-10] |        1 |
| [2018-07-11] |        1 |
| [2018-07-13] |        0 |
| [2018-07-15] |        1 |
| [2018-07-16] |        1 |
| [2018-07-17] |        1 |
| [2018-07-18] |        1 |
| [2018-07-19] |        1 |
| [2018-07-20] |        1 |
| [2018-07-21] |        1 |
| [2018-07-22] |        1 |
| [2018-07-23] |        1 |
| [2018-07-24] |        1 |
| [2018-07-27] |        1 |
| [2018-07-28] |        1 |
| [2018-07-31] |        1 |
| [2018-08-01] |        1 |
| [2018-08-02] |        1 |
| [2018-08-05] |        1 |
| [2018-08-07] |        1 |
| [2018-08-08] |        1 |
| [2018-08-09] |        1 |
| [2018-08-10] |        1 |
| [2018-08-13] |        1 |
| [2018-08-14] |        1 |
... you get the idea ...
| [2019-02-10] |        1 |
| [2019-02-11] |        1 |
| [2019-02-12] |        1 |
| [2019-02-13] |        1 |
| [2019-02-14] |        1 |
| [2019-02-15] |        1 |
| [2019-02-16] |        1 |
| [2019-02-17] |        1 |
| [2019-02-18] |        1 |
| [2019-01-19] |        1 |
| [2019-02-20] |        1 |</code></pre>
<p>As you can see that’s not very fruitful (not sure what happened on 13 July 2018 lol). There are two possibilities here: my self introspection is really bad: many well being/mood tracking apps would let people estimate on the scale from 1 to 10, and I can’t even distinguish between three states.</p>
<p>Another one is that I’m just very stable and actually have no variation. For instance, I never had problems working out first thing in the morning, without having any food or stimulants. What bothers me a bit is that I don’t seem to experience any ‘high energy’ states either, which apparently people do.</p>
<p>I guess the lesson here is to reevaluate things I’m measuring after a short while and make sure I can actually track something meaningful or something I am capable of measuring.</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#sleep">#sleep</a> <a class="post-tag" href="./tags.html#quantified-self">#quantified-self</a></div>
        <!-- TODO post-date? -->
        <div class="date">21 February 2019</div>
    </section>
    

    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_sleep_tracking"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Grasp</title>
    <link href="https://beepb00p.xyz/grasp.html" />
    <id>https://beepb00p.xyz/grasp.html</id>
    <published>2019-02-09T00:00:00Z</published>
    <updated>2019-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <!-- Icon made by Twitter -->
        <!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html -->
        <link rel="icon" href="./robot-face.png">
        <link rel="apple-touch-icon" href="./robot-face.png">

        <meta name="generator" content="hakyll">
        <meta name="language" content="English">
        
        <meta name="keywords" content="pkm org-capture annotation">
        
        <!-- TODO concat with keywords tags; also need to make comma separated? -->

        <title>Grasp | Mildly entertainingᵝ</title>

        <link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css">
        <link rel="stylesheet" href="./css/default.css?v=3" />
        <link rel="stylesheet" href="./css/links.css?v=4" />

        
    </head>
    <body>
        <header>
            <nav>
                <span class="nav-left">
                    <a class="fat" href="./">Home</a>
                    <!-- TODO eh, not sure if this symbol is good for that... -->
                    ·
                    <a class="fat" href="./ideas.html">Ideas</a>
                    ·
                    <a class="fat" href="./notes.html">Notes</a>
                    ·
                    <a class="fat" href="./tags.html">Tags</a>
                </span>
                <span class="nav-right">
                    <a class="fat" href="./feed.html">Feed</a>
                    ·
                    <a class="fat" href="./site.html">Site</a>
                    ·
                    <a class="fat" href="./me.html">Me</a>
                </span>
            </nav>
        </header>

        <main>
            




<article>
    
    <section class="post-title">
    <h1>Grasp</h1>
    <div class="summary">How to capture information from your browser and stay sane</h2>
    </section>
    <!-- are sections appropriate for that? -->

    <section class="content">
    <p>This is not the post I was gonna start writing with. It was supposed to be something a bit more abstract and pure, but oh well.</p>
<p>Trigger warning: if you are a kind of person that doesn’t care about their browser bookmarks at all and happily loses them after switching to new computer, you might be shocked and perhaps repulsed by the level of elaboration I’m taking up here. Please sit tight, breathe and remember that I don’t judge you!</p>
<p>So, let’s talk about browser bookmarks.</p>
<h1 id="history">History</h1>
<p>I’ve always loved my bookmarks and been keeping, rereading and moving them around since high school. I also tend to be very organized in terms of meta information, so every bookmark would eventually end up in a category/folder. Of course there are obstacles.</p>
<p>First of all, Chromium bookmark adding menu was a bit shit and <a href="http://www.rawinfopages.com/tips/wp-content/uploads/2017/08/chrome-bookmarks1.png">still</a> is. You get to choose among the five most recently used folders only; if you want anything specific, you have to click all the way through (Tab with my 100+ folders was just not doable). You can’t search when you add bookmark either. Yes, I know, it’s not meant for geeks, it’s for normal people who love mouseclicks. I’m still puzzled by how people who develop that stuff use their own product though.</p>
<p>These days Chrome has got <code>chrome.bookmarks</code> api, which I’d imagine allows you to implement your own bookmark manager. Back in 2012, it didn’t exist though.</p>
<p>I was a bit less fussy back then so I was kind of okay with that. Until one day the disaster appended. I realized I couldn’t decide which folder did the bookmark belong to. That was pretty disturbing, so I started looking for alternatives. I realized I needed something like tags and turned out Firefox had that feature for ages. So I switched the browser.</p>
<p>Firefox was noticeably slower and greedier in terms of RAM (no Rust in Firefox in 2012!). And few months later I got my first Android phone and realized that Firefox didn’t support syncing tags with Android (it still <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=775672">doesn’t</a>).</p>
<p>Until I found out about <a href="https://pinboard.in">Pinboard</a>! If you wanna borrow one thing from this post, please try and use that, it’s really awesome. It has solved almost all of my issues:</p>
<ul>
<li>you can easily add new bookmarks, tag them and it would be synced across all your browsers and devices</li>
<li>you can mark them private and public, and search in other people’s bookmarks</li>
<li>what is more, you can add notes for some context about your bookmarks!</li>
</ul>
<p>I’ve had few happy years with Pinboard. Until I started getting more serious about information processing and my knowledge management. I’ll tell about that one day, but long story short, I found out that I spend a lot of time moving bookmarks scattered across pinboard into my personal plaintext wiki to give it a bit more structure, fulltext search and easier access. I’ve also started using Org mode and in particular, <a href="https://orgmode.org/manual/Capture-Refile-Archive.html#Capture-Refile-Archive">capture and refile</a>. Once you are used to that, moving information manually by copy-pasting is just plain torture. You know, life is too short for that shit.</p>
<h1 id="eh-capture-refile">Eh? Capture? Refile?</h1>
<p>It’s hard to explain, for me it took several iterations to adopt these. In essence, you can ‘capture’, that is, copy/create piece of information like a url, quote, your thought or anything else and store in a text file for further processing which you can do it later. It’s meant to be with as little interruptions as possible, merely to persist the information. Typically, in emacs it’s a matter of pressing a keystroke, making you note and pressing a keystroke to finalize. You can do it as fast as you think/type and then immediately get back to what you were working on.</p>
<p>You can look up quite a few different setups online: <a href="https://youtu.be/fgizHHd7nOo?t=207">typical demo (till 4:10)</a>. The concept doesn’t really have to be restricted to org mode, though. Funny enough, before I ran into org-capture, I had a keybinding to open Vim in the insert mode against my <code>notes.txt</code> file.</p>
<h2 id="it-sounds-really-abstract.">It sounds really abstract.</h2>
<p>Sure. Let me be a bit more specific. My typical scenario is doing some research in the broad sense, e.g. shopping or looking for a property to rent or learning.</p>
<p>Imagine you’ve got a bit of time during your lunch break at work and want to spend it learning some <a href="https://en.wikipedia.org/wiki/Representation_theory">representation theory</a>. For me (and I’d imagine for many people), it makes little sense doing that just for 20 minutes, your mind is diffused, and you need time to gain back some context before doing productive learning.</p>
<p>But you could at least skim through some articles and highlight things to think about later when you got more time which you can dedicate solely for learning. So you read through the different articles and blog posts, and you want to highlight things and potentially add todo items for further googling/thinking. You don’t have time to think about them now, you just want to make sure you think about them later, e.g. see <a href="https://user-images.githubusercontent.com/291333/51799721-a984eb80-221c-11e9-9612-8eb7f553dc01.png">screenshot</a>.</p>
<p>So you go through the article and annotate it/add points to think on. You want to do it as fast as you can read without distracting on copy-pasting the information and trying to organize it. Later, when you got time, you just search everything marked with the tag <code>reprtheory</code> and in your <code>capture.org</code> file you find an entry like that:</p>
<pre><code>* [2019-02-09 Sat 14:54] Special unitary group - Wikipedia   :reprtheory:physics:
https://en.wikipedia.org/wiki/Special_unitary_group
Selection:
here is a 2:1 homomorphism from SU(2) to SO(3).
Comment:
Why do they always mention that? Is that important?</code></pre>
<p>, which you can further action on. Perhaps you’ve figured it out already, so you can just discard it. Or you want to convert it into a TODO, give it a priority and refile somewhere more appropriate. What’s awesome is that at the time of capture it immediately becomes searchable and indexable as any plaintext would without any extra effort (unlike if you added it to browser bookmarks/pinboard).</p>
<h1 id="ok-im-sold.-how-do-i-do-it">Ok, I’m sold. How do I do it?</h1>
<p>So, you want to integrate your browser with your knowledge repository and capture things straight into your <code>capture.org</code> file. Sounds trivial, right?</p>
<p>For a while I used <a href="https://github.com/sprig/org-capture-extension">org-capture extension</a>, that was relying on setting up a special mime type handler (e.g. <code>emacs://</code>) and an always running emacs daemon. Until one day I got very sad when few days of captured link and selected text were gone because one of these things stopped working for some reason. People seem to have issues setting up all this to work, and of course, you can’t have feedback from OS mime handler, so you can never know whether it has succeeded at all.</p>
<p>I realized I didn’t want to rely on emacs running all the time, on its templates or anything like that. I just want to reliably append stuff (formatted as org-mode) to the text file, that’s not too much to ask. An obvious solution is to get rid of the mime type handler and just write to the file system from Chrome extension directly. This is, of course something you can’t do in modern browsers. There is an <a href="https://developer.chrome.com/apps/app_storage#write">API</a> in Chrome for that, and you’ve got two options:</p>
<ul>
<li>write a file to a sandbox within a browser. Not an option for my purposes.</li>
<li>select a path via ‘save as’ GUI dialog and write it. Disgusting, <em>definitely</em> not an option.</li>
</ul>
<p>So after a while I realized something else has to write to the file. And that something else could be a local http server. The extension sends the request, the local backend writes the entry and responds with success/error, which can be passed onto UI notification, so you will always know if something failed. After a bit of coding, <a href="https://github.com/karlicoss/grasp">Grasp</a> was born.</p>
<h1 id="what-makes-grasp-better">What makes Grasp better?</h1>
<p>Quite a few things actually!</p>
<ul>
<li><p>it’s reliable and you will get an error notification if you failed to capture</p></li>
<li><p>it supports capturing selected text, adding comment and tags</p></li>
<li><p>you can capture anywhere: it doesn’t care whether you have emacs installed at all, and doesn’t have to be org mode file</p></li>
<li><p>unlike <a href="https://orgmode.org/manual/capture-protocol.html">org-protocol</a> which only supports url, title and ‘everything else’, the capture template syntax can be extended to include anything you want, e.g. <a href="https://github.com/karlicoss/grasp/blob/247dd5856d34d05f4c2239f34a5d2904d0961326/server/org_tools.py#L91">currently</a> it also supports <code>tags</code>, <code>comment</code> and <code>selection</code>.</p></li>
<li><p>it can run anywhere, e.g. you can run it the server on your VPS and access remotely if you are browsing on a computer you can’t sync your capture file onto.</p>
<p>I might even try and see if it can be ported as <a href="https://addons.mozilla.org/en-GB/android/">Android Firefox addon</a>.</p></li>
</ul>
<h1 id="implementing">Implementing</h1>
<p>Few random things I learnt while implementing:</p>
<ul>
<li><p><a href="https://flow.org">flow</a> and <a href="https://eslint.org/">eslint</a> are good</p>
<p>Trivial to integrate and they make the dreaded JS programming pretty manageable and akin to Python.</p>
<p>Turns out Flow even it supports <a href="https://flow.org/en/docs/types/comments/">comment types</a>, kinda like <a href="https://www.python.org/dev/peps/pep-0484/#type-comments">python/mypy</a>. That must be very beneficial for people trying to integrate it. Just imagine that you can slowly convert your whole codebase into type safe code before your coworkers realize what’s happened!</p></li>
<li><p>Webpack is good</p>
<p>Used it mainly to strip off Flow annotations and convert code into something chrome would accept. However it’s also helpful for merging the extension manifest so you could build browser-specific versions.</p></li>
<li><p>fun fact: <code>node_modules</code> takes almost 200Mb of disk space, and I tried my best to use as less dependencies as possible. Almost all are dev dependencies, so the extension itself is still tiny.</p></li>
<li><p>Firefox and Chrome use more or less same browser APIs these days! The only thing I had to fix while porting to Firefox were notifications.</p></li>
<li>publishing to Chrome store is more tedious than I imagined, e.g.
<ul>
<li>they want screenshots exactly 1280x800 or 640x400. Do people have some sort of scripts to cut their screenshots automatically for them or what?</li>
<li>there are two interfaces (‘old’ and ‘new’), which are sometimes doing different things</li>
<li>it’s generally pretty flaky, sometimes when you update the extension, old meta about your extension disappears and you have to copy it manually. I find it pretty mean to developers.</li>
</ul>
<p>I guess I should just use the <a href="https://developer.chrome.com/webstore/using_webstore_api">API</a> for publishing.</p></li>
<li><p>publishing to <a href>addons.mozilla.org</a> is super fast and easy</p></li>
<li><p><a href="https://github.com/karlicoss/grasp/issues/7">firefox hotkeys are not configurable</a></p>
<p>I still find it very hard to believe. Has it always been like that? How do people cope with it?</p></li>
<li><p>CI is a bit tedious</p>
<a href="https://github.com/karlicoss/grasp/blob/master/.circleci/config.yml">My pretty minimal config</a>, is quite long. I’m quite used to to CIs, but I wonder how often are people discouraged by that, it’s got to be easier. Perhaps <a href="https://docs.gitlab.com/ee/topics/autodevops/">Auto DevOps</a> from gitlab solves it?</li>
<li><p>communicating with <code>localhost</code> made everything so much simpler. I’ve already converted another <a href="https://github.com/karlicoss/were-you-here">thing</a> I am working on to use that instead of trying to utilize local storage/internal database and it works flawlessly!</p></li>
</ul>
<h1 id="feedback">Feedback</h1>
<p>I actually think it’s the first thing I solely implemented and prepared something and <a href="https://www.reddit.com/r/orgmode/comments/akazos/orggrasp_browser_extension_for_orgcapture/">shared</a> for other people to use. As expected, it actually took more time than sketching a prototype that worked for me. But it feels so great when people DM you on reddit and say that they managed to run it even on Windows without any issues when no other existing methods could do that.</p>
<h1 id="whats-next">What’s next?</h1>
<p>I’m gonna look up what are Markdown people using for capturing information, add few templates and spread the good stuff. I’m excited!</p>
    </section>

    
    <section class="footer">
        <div class="post-tags"><a class="post-tag" href="./tags.html#pkm">#pkm</a> <a class="post-tag" href="./tags.html#org-capture">#org-capture</a> <a class="post-tag" href="./tags.html#annotation">#annotation</a></div>
        <!-- TODO post-date? -->
        <div class="date">09 February 2019</div>
    </section>
    

    
    <br>
    <div>Discussion:</div>
    <ul>
    
        <li><a href="https://www.reddit.com/r/orgmode/comments/akazos/orggrasp_browser_extension_for_orgcapture">reddit</a></li>
    
    </ul>
    

    <section class="comments">
    <script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js">
</script>

<section id="isso-thread" data-isso-id="isso_org_grasp"></section>

    </section>

</article>

        </main>

        <!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... -->
        
        <footer>
            <span style="float:left">
            <a href="https://twitter.com/karlicoss">🐦 me @twitter</a>
            ·
            <a href="https://github.com/karlicoss">💻 me @github</a>
            </span>
            
            
        </footer>
    </body>
</html>
]]></summary>
</entry>

</feed>
