<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://beepb00p.xyz/atom.xml</id>
  <title>beepb00p</title>
  <updated>2020-04-05T00:00:00+00:00</updated>
  <author>
    <name>karlicoss</name>
    <email>karlicoss@gmail.com</email>
  </author>
  <link href="https://beepb00p.xyz/atom.xml" rel="self"/>
  <link href="https://beepb00p.xyz"/>
  <generator uri="http://lkiesow.github.io/python-feedgen" version="0.8.0">python-feedgen</generator>
  <subtitle>feed</subtitle>
  <entry>
    <id>https://beepb00p.xyz/configs-suck.html</id>
    <title>Your configs suck? Try a real programming language.</title>
    <updated>2020-04-05T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="plt python" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Your configs suck? Try a real programming language. | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/configs-suck.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/configs-suck.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Your configs suck? Try a real programming language. | beepb00p" property="og:title"/&gt;
        &lt;meta content="Or yet another rant about YAML" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Your configs suck? Try a real programming language.&lt;/h1&gt;
    &lt;div class="summary"&gt;Or yet another rant about YAML
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
In this post, I'll try to explain why I find most config formats frustrating to use and
suggest that using a real programming language (i.e. general purpose one, like Python) is often (but &lt;a class="link-down" href="#cons"&gt;&lt;b&gt;not always&lt;/b&gt;&lt;/a&gt;) a feasible and more pleasant alternative for writing configs.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#configs_suck"&gt;1. Most modern config formats suck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#workarounds"&gt;2. Workarounds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#real_language"&gt;3. Use a real programming language&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cons"&gt;Downsides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_python"&gt;Why Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#who_else"&gt;Who else does it?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_if_i_have_to"&gt;4. What if you don't have a choice?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;5. Extra links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;6. --&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ps"&gt;7. &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-04-11]&lt;/span&gt;&lt;/span&gt; P.S.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="configs_suck"&gt;&lt;a class="headerlink" href="#configs_suck"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Most modern config formats suck&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-configs_suck"&gt;
&lt;p&gt;
In this section, I'm mostly referring to JSON/YAML/TOML/ini files, which are the most common config formats I encounter.
&lt;/p&gt;
&lt;p&gt;
I'll refer to such configs as &lt;b&gt;&lt;span style="color:green"&gt;plain configs&lt;/span&gt;&lt;/b&gt;. Not sure if there is a better name for it, please let me know!
&lt;/p&gt;
&lt;p&gt;
An incomplete list of my frustrations:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;JSON &lt;b&gt;doesn't have comments&lt;/b&gt;, &lt;a href="https://stackoverflow.com/a/33963845/706389"&gt;by design&lt;/a&gt; 🤯&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
bits of configs &lt;b&gt;can't be reused&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
For example, while YAML, in theory, supports reusing/including bits of the config (they call it &lt;a href="https://confluence.atlassian.com/bitbucket/yaml-anchors-960154027.html"&gt;anchors&lt;/a&gt;),
some software like &lt;a href="https://github.community/t5/GitHub-Actions/Support-for-YAML-anchors/td-p/30336/page/3"&gt;Github Actions&lt;/a&gt; doesn't support it
&lt;/p&gt;
&lt;p&gt;
Usually, you just don't have any means of reusing parts of your config and have to copy-paste.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code class="inline"&gt;.gitconfig&lt;/code&gt; uses a &lt;a href="https://git-scm.com/docs/git-config#_includes"&gt;custom syntax&lt;/a&gt; for merging the configs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
can't contain &lt;b&gt;any logic&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
This is considered as a positive by many, but I would argue that when you can't define temporary variables, helper functions, substitute strings or concatenate lists, it's a bit fucked up.
&lt;/p&gt;
&lt;p&gt;
The workarounds (if present) are usually pretty horrible and impose cognitive overhead. Programming language constructs are &lt;b&gt;reinvented from scratch&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;variables and string interpolation

&lt;ul class="org-ul"&gt;
&lt;li&gt;Ansible uses &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html"&gt;Jinja templates&lt;/a&gt; (!) for variable manipulations.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Github Actions use a &lt;a href="https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions"&gt;custom syntax&lt;/a&gt; for that
&lt;/p&gt;
&lt;p&gt;
In addition, they've got &lt;a href="https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#functions"&gt;their own&lt;/a&gt; set of functions to manipulate the variables.
Have fun learning a new language you never wanted to!
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
scoping
&lt;/p&gt;
&lt;p&gt;
I.e. there are several custom scopes for &lt;a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#env"&gt;&lt;samp class="inline"&gt;env&lt;/samp&gt; directive&lt;/a&gt; in Github Actions.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;control flow

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code class="inline"&gt;for&lt;/code&gt; loop: build matrices and 'excludes' always give me a headache&lt;/li&gt;
&lt;li&gt;&lt;code class="inline"&gt;if&lt;/code&gt; statement: e.g. &lt;a href="https://circleci.com/docs/2.0/configuration-reference/#the-when-step-requires-version-21"&gt;&lt;samp class="inline"&gt;when&lt;/samp&gt;&lt;/a&gt; in CircleCI&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
can't be validated
&lt;/p&gt;
&lt;p&gt;
You can validate the config syntax itself (i.e. check JSON for correctness), but you can't do semantic checks.
&lt;/p&gt;
&lt;p&gt;
This is kind of a consequence of not having logic in the config files.
Typically you'll have to write a supplementary program to check your configs and remember to call it before passing to a program.
&lt;/p&gt;
&lt;p&gt;
Very few programs bother with that and usually, your program crashes because of something that would be &lt;b&gt;trivial to catch with any simple type system&lt;/b&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
YAML simply stands out with its implicit conversions and portability issues
&lt;/p&gt;
&lt;p&gt;
There are enough rants about it, so I'll just leave a link to a good one: &lt;a href="https://www.arp242.net/yaml-config.html"&gt;"YAML: probably not so great after all"&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Summary: we spend time learning &lt;b&gt;useless syntax, instead of productive work&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="workarounds"&gt;&lt;a class="headerlink" href="#workarounds"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Workarounds&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-workarounds"&gt;
&lt;p&gt;
So what happens when people encounter these problems?
Often they end up using a 'real' (i.e. general purpose, Turing complete) programming language anyway:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you write a program to filter out custom comment syntax&lt;/li&gt;
&lt;li&gt;you write a program to merge configs or use a templating engine&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
you write a program that 'evaluates' the config
&lt;/p&gt;
&lt;p&gt;
Often, you &lt;b&gt;end up reimplementing an interpreter&lt;/b&gt; for a simple functional language in the process.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
you write a program to validate the config
&lt;/p&gt;
&lt;p&gt;
For the most part, it's boilerplate for type checking. You're not only working on a solved problem but in addition, end up with mediocre error messages as a result.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All this stuff is unpleasant and distracts you from your main objective.
&lt;/p&gt;
&lt;p&gt;
Perhaps you can see where I'm coming with this.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="real_language"&gt;&lt;a class="headerlink" href="#real_language"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Use a real programming language&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-real_language"&gt;
&lt;p&gt;
The idea is to write your config in your target programming language.
I'll have Python in mind here, but the same idea can be applied to &lt;b&gt;any dynamic enough language&lt;/b&gt; (e.g. Javascript/Ruby).
&lt;/p&gt;
&lt;p&gt;
Then, you simply import/evaluate your config file and voila – you're done. That's it.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Toy example:
&lt;/p&gt;
&lt;p&gt;
&lt;samp class="inline"&gt;config.py&lt;/samp&gt;
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;from&lt;/span&gt; typing &lt;span class="org-keyword"&gt;import&lt;/span&gt; NamedTuple

&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Person&lt;/span&gt;(NamedTuple):
    name: &lt;span class="org-builtin"&gt;str&lt;/span&gt;
    age: &lt;span class="org-builtin"&gt;int&lt;/span&gt;

&lt;span class="org-variable-name"&gt;PEOPLE&lt;/span&gt; = [
    Person(&lt;span class="org-string"&gt;'Ann'&lt;/span&gt;  , 22),
    Person(&lt;span class="org-string"&gt;'Roger'&lt;/span&gt;, 15),
    Person(&lt;span class="org-string"&gt;'Judy'&lt;/span&gt; , 49),
]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
Using the config: 
&lt;/span&gt;&lt;aside class="sidenote"&gt;see &lt;a href="https://lobste.rs/s/qyhvhc/your_configs_suck_try_real_programming#c_0btczk"&gt;this&lt;/a&gt; if you're wondering why I use &lt;code class="inline"&gt;exec&lt;/code&gt; , not &lt;code class="inline"&gt;import&lt;/code&gt;.&lt;/aside&gt;&lt;/div&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;from&lt;/span&gt; pathlib &lt;span class="org-keyword"&gt;import&lt;/span&gt; Path

&lt;span class="org-variable-name"&gt;config&lt;/span&gt; = {}
&lt;span class="org-keyword"&gt;exec&lt;/span&gt;(Path(&lt;span class="org-string"&gt;'config.py'&lt;/span&gt;).read_text(), config)
&lt;span class="org-variable-name"&gt;people&lt;/span&gt; = config[&lt;span class="org-string"&gt;'PEOPLE'&lt;/span&gt;]

&lt;span class="org-keyword"&gt;print&lt;/span&gt;(people)
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;[Person(name='Ann', age=22), Person(name='Roger', age=15), Person(name='Judy', age=49)]
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I find it pretty neat.
Let's see how it helps us with the problems I described:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;comments: duh&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
includes: trivial, use imports
&lt;/p&gt;
&lt;p&gt;
You can even import the very package you're configuring.
So you can define a DSL for configuration, which will be imported and used in the config file.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
logic
&lt;/p&gt;
&lt;p&gt;
You have your language's syntax and libraries available to use.
For example, something like &lt;a href="https://docs.python.org/3/library/pathlib.html"&gt;&lt;samp class="inline"&gt;pathlib&lt;/samp&gt;&lt;/a&gt; alone can save you massive amounts of config duplication.
&lt;/p&gt;
&lt;p&gt;
Of course, one could go crazy and make it incomprehensible.
But personally I'd rather accept potential for abusing the power of the language rather than being restricted.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
validation
&lt;/p&gt;
&lt;p&gt;
You can keep validation logic right in the config, so it would be checked at the time of loading.
Mature static analysis tools (i.e. JS flow/eslint/pylint/mypy) can be used to aid you.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="cons"&gt;&lt;a class="headerlink" href="#cons"&gt;¶&lt;/a&gt;Downsides&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-cons"&gt;
&lt;p&gt;
Are there any problems with that approach? Sure:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
interoperability
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Okay, maybe if your program is in Python it makes sense. But what if it isn't, or you'll rewrite it to another language (i.e. compiled, like c++) later.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If you'll be running your software somewhere without an interpreter, then sure, good point.
Modern &lt;a href="https://en.wikipedia.org/wiki/Foreign_function_interface"&gt;FFI&lt;/a&gt; is tedious and linking against your config is going to be pretty tricky.
&lt;/p&gt;
&lt;p&gt;
In case of Python specifically, it's present in most modern OS distributions. So you might get away with the following:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;make your Python config executable&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
in the &lt;samp class="inline"&gt;main()&lt;/samp&gt; function, build the config, convert to JSON and dump to the stdout
&lt;/p&gt;
&lt;p&gt;
This step is possible with no boilerplate due to Python's dynamic nature.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;in your c++ code, execute the Python config (i.e. use &lt;code class="inline"&gt;popen()&lt;/code&gt;), read the raw JSON and process&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Yep, you will still have to manually deserialize config in the c++ code. But I think that's at least &lt;b&gt;not worse&lt;/b&gt; than only using JSON and editing it manually.
&lt;/p&gt;
&lt;p&gt;
Obviously that has a performance hit (i.e. milliseconds taken to run the Python interpreter). Make your own judgment if it's acceptable for you.
If the tool you're configuring is running for hours, you're probably going to be fine.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
general-purpose programming languages are &lt;b&gt;harder to reason about&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
This is somewhat subjective. Personally, I'd be more likely overwhelmed by an overly verbose plain config. I'd always prefer a neat and compact DSL.
&lt;/p&gt;
&lt;p&gt;
A large factor here is code style: I'm sure you can make your config file readable in almost any programming language,
even for people not familiar with the language at all.
&lt;/p&gt;
&lt;p&gt;
However, I appreciate that my experience is different from other engineers (i.e. sysadmins) who would not trade off flexibility for the increase of configuration complexity.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a id="security"&gt;&lt;/a&gt;The most serious issues are probably security and termination checking:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
security
&lt;/p&gt;
&lt;p&gt;
I.e. if your config executes arbitrary code, then it may steal your passwords or format your hard drive.
&lt;/p&gt;
&lt;p&gt;
Whether security is actually something you need to think about &lt;b&gt;depends on your threat model&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;if your configs are supplied by third parties you don't trust, then I agree that plain configs are safer.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
however, often, especially for end-user software, it's not the case
&lt;/p&gt;
&lt;p&gt;
Often the user controls their own config, and the program runs under the same permissions.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In addition, this is something that can be potentially solved by sandboxing. Whether it's worth the effort depends on the nature of your project, but for something like CI executor &lt;b&gt;you need a sandbox anyway&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
Also, note that using a plain config format doesn't necessarily save you from trouble. See &lt;a href="https://www.arp242.net/yaml-config.html#insecure-by-default"&gt;"YAML: insecure by default"&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
termination checking
&lt;/p&gt;
&lt;p&gt;
Even if you don't care about security, you don't want your config to hang the program.
&lt;/p&gt;
&lt;p&gt;
Personally, I've never run into such issues, but here are some potential workarounds for that:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;explicit timeout for loading the config&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
using a subset of the language might help, for example, &lt;a href="https://docs.bazel.build/versions/master/skylark/language.html#differences-with-python"&gt;Skylark&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Anyone knows examples of /conservative/static analysis tools that check for termination in general purpose languages?
&lt;/p&gt;
&lt;p&gt;
Note this is not the same as the &lt;a href="https://en.wikipedia.org/wiki/Halting_problem"&gt;Halting problem&lt;/a&gt;. You don't want to determine whether &lt;b&gt;any&lt;/b&gt; program terminates, you want to figure out a
&lt;b&gt;reasonable subset of the language&lt;/b&gt; that terminates.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Even if your config language is Turing incomplete, you might have to resort to using timeouts anyway:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
your config can take &lt;b&gt;very&lt;/b&gt; long time to evaluate, while taking finite time to complete in theory
&lt;/p&gt;
&lt;p&gt;
See &lt;a href="http://www.haskellforall.com/2020/01/why-dhall-advertises-absence-of-turing.html"&gt;"Why Dhall advertises the absence of Turing-completeness"&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
While an &lt;a href="https://gist.github.com/Gabriel439/77f715350ecc0443eed5fa613ac6b78e"&gt;Ackermann&lt;/a&gt; function is a contrived example,
that means that if you truly care about malicious inputs, you want to sandbox anyway.
If your configs support some form of including, you can &lt;a href="https://lobste.rs/s/qyhvhc/your_configs_suck_try_real_programming#c_rtbmnp"&gt;very likely&lt;/a&gt; construct an input that will inflate it
exponentially.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Note that using a plain config doesn't mean it won't loop infinitely:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;See &lt;a href="https://www.gwern.net/Turing-complete#accidentally-turing-complete"&gt;"Accidentally Turing complete"&lt;/a&gt; for an excellent overview&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_python"&gt;&lt;a class="headerlink" href="#why_python"&gt;¶&lt;/a&gt;Why Python?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_python"&gt;
&lt;p&gt;
Some reasons I find Python specifically enjoyable for writing config files:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Python is present on almost all modern operating systems&lt;/li&gt;
&lt;li&gt;Python syntax is considered simple (not a bad thing!), so hopefully Python configs aren't much harder to understand than plain configs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;data classes&lt;/a&gt;, functions and generators form a basis for a compact DSL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/typing.html"&gt;typing annotations&lt;/a&gt; serve as documentation and validation at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
However, you can achieve a similarly pleasant experience in &lt;b&gt;most modern programming languages&lt;/b&gt; (provided they are dynamic enough).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="who_else"&gt;&lt;a class="headerlink" href="#who_else"&gt;¶&lt;/a&gt;Who else does it?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-who_else"&gt;
&lt;p&gt;
Some projects that allow for using code as configuration:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/configuration"&gt;Webpack&lt;/a&gt;, web asset bundler, uses a Javascript as a config&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#basic-use"&gt;setuptools&lt;/a&gt;, the standard way of installing Python packages
&lt;/p&gt;
&lt;p&gt;
Allows using &lt;b&gt;both&lt;/b&gt; &lt;samp class="inline"&gt;setup.cfg&lt;/samp&gt; and &lt;samp class="inline"&gt;setup.py&lt;/samp&gt; files.
That way if you can't achieve something solely with plain config, you can fix this in &lt;samp class="inline"&gt;setup.py&lt;/samp&gt;, which gives you a balance between declarative and flexible.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://jupyter.org"&gt;Jupiter&lt;/a&gt;, interactive computing tool
&lt;/p&gt;
&lt;p&gt;
Uses a &lt;a href="https://github.com/jupyter/jupyter_core/blob/master/jupyter_core/tests/dotipython_empty/profile_default/ipython_nbconvert_config.py"&gt;python file&lt;/a&gt; to configure the export.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://www.gnu.org/software/emacs"&gt;Emacs&lt;/a&gt;: famously uses Elisp for its configuration
&lt;/p&gt;
&lt;p&gt;
While I'm not a fan of Elisp at all, it does make Emacs very flexible and it's possible to achieve any configuration you want.
&lt;/p&gt;
&lt;p&gt;
On the other hand, if you've ever read other people's Emacs setups, you can see it also demonstrates how things can get out of hand when you allow
a general purpose language for configuration.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/brookhong/Surfingkeys#edit-your-own-settings"&gt;Surfingkeys&lt;/a&gt; browser extension: uses a Javascript DSL for configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_scripts_are_code"&gt;Gradle&lt;/a&gt; provides Groovy and Kotlin DSLs for writing build files&lt;/li&gt;
&lt;li&gt;&lt;a href="https://awesomewm.org"&gt;Awesome Window Manager&lt;/a&gt; uses Lua for configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guix.gnu.org"&gt;Guix&lt;/a&gt; package manager: uses &lt;a href="https://www.gnu.org/software/guile"&gt;Guile Scheme&lt;/a&gt; for configuration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; static site generator: uses &lt;a href="https://raw.githubusercontent.com/getpelican/pelican/master/samples/pelican.conf.py"&gt;Python&lt;/a&gt; for configuration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Some languages are designed specifically for configuration:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://docs.bazel.build/versions/master/skylark/language.html#differences-with-python"&gt;&lt;del&gt;Bazel&lt;/del&gt; Skylark&lt;/a&gt; uses a subset of Python for describing build rules
&lt;/p&gt;
&lt;p&gt;
While it's deliberately restricted to ensure termination checking and determinism, configuring Bazel is orders of magnitude more pleasant than any other build system I've used.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mesonbuild.com/Syntax.html"&gt;Meson build system&lt;/a&gt;: borrows the syntax from Python&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://nixos.wiki/wiki/Nix_Expression_Language"&gt;Nix&lt;/a&gt;: language designed specifically for the Nix package manager
&lt;/p&gt;
&lt;p&gt;
While a completely new language feels like an overkill, it's still nicer to work with than plain configs.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://dhall-lang.org"&gt;Dhall&lt;/a&gt;: language designed specifically for config files
&lt;/p&gt;
&lt;p&gt;
Dhall advertises itself as "JSON + functions + types + imports". And indeed, it looks great, and solves most of the issues I listed.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://jsonnet.org"&gt;Jsonnet&lt;/a&gt;: JSON + variables + control flow
&lt;/p&gt;
&lt;p&gt;
See &lt;a href="https://jsonnet.org/articles/comparisons.html"&gt;comparison&lt;/a&gt; with other configuration languages
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Downsides of such languages is that they aren't widespread yet. If you don't have bindings for your target language, you'd end up parsing JSON again.
However, at least it makes writing configs pleasant.
&lt;/p&gt;
&lt;p&gt;
But again, if your program is written in Javascript and doesn't interact with other languages, why don't you just make the config Javascript?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="what_if_i_have_to"&gt;&lt;a class="headerlink" href="#what_if_i_have_to"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; What if you don't have a choice?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-what_if_i_have_to"&gt;
&lt;p&gt;
Some ways I've found to minimize the frustration while using plain configs:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
write as little in config files as possible
&lt;/p&gt;
&lt;p&gt;
This typically applies to CI pipeline configs (i.e. Gitlab/Circle/Github Actions) or Dockerfiles.
&lt;/p&gt;
&lt;p&gt;
Often such configs are &lt;b&gt;bloated with shell commands&lt;/b&gt;, which makes it impossible to run locally without copying line by line.
And yeah, there &lt;a href="https://circleci.com/docs/2.0/local-cli"&gt;are&lt;/a&gt; &lt;a href="https://github.com/nektos/act"&gt;ways&lt;/a&gt; to debug, but they have a pretty slow feedback loop.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;use tools that are better suited to set up local virtual environments, like &lt;a href="https://github.com/tox-dev/tox"&gt;tox-dev/tox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
prefer helper shell scripts and call them from your pipeline
&lt;/p&gt;
&lt;p&gt;
It is a bit frustrating since it introduces indirection and scatters code around.
But, as an upside, you can lint (e.g. &lt;a href="https://www.shellcheck.net"&gt;shellcheck&lt;/a&gt;) your pipeline scripts, and make it easier to run locally.
&lt;/p&gt;
&lt;p&gt;
Sometimes you can get away if your pipeline is short, so use your own judgment.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Let the CI only handle setting up a VM/container for you, caching the dependencies, and publishing artifacts.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
generate the config instead of writing manually
&lt;/p&gt;
&lt;p&gt;
The downside is that the generated config may diverge if edited manually.
&lt;/p&gt;
&lt;p&gt;
You can add the warning comment that the config is autogenerated with the link to the generator, and make the config file read-only to discourage manual editing.
&lt;/p&gt;
&lt;p&gt;
In addition, if you're running CI, you can make the consistency check a part of the pipeline itself.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="links"&gt;&lt;a class="headerlink" href="#links"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Extra links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-links"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://www.arp242.net/flags-config.html"&gt;(commandline) flags are great for configuration&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Overall, I agree, but there are still cases when using flags isn't feasible.
&lt;/p&gt;
&lt;p&gt;
It's also prone to leaking secrets (keys/tokens/passwords) – both in your shell history and via &lt;samp class="inline"&gt;ps&lt;/samp&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://wiki.archlinux.org/index.php/Xmonad#Configuration"&gt;Xmonad&lt;/a&gt;: config &lt;b&gt;is&lt;/b&gt; the executable
&lt;/p&gt;
&lt;p&gt;
Interesting approach, but not always feasible, e.g. you might not have the compiler installed.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/magefile/mage#about"&gt;Mage&lt;/a&gt;: a tool for writing makefiles in Go&lt;/li&gt;
&lt;li&gt;Dhall wiki: &lt;a href="https://github.com/dhall-lang/dhall-lang/wiki/Programmable-configuration-files"&gt;Programmable configuration files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=19108787"&gt;Why are we templating YAML? (HN)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Updates&lt;/b&gt; from the comments (thanks everyone!):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://www.lua.org/history.html"&gt;The evolution of an extension language: a history of Lua&lt;/a&gt;: apparently Lua has started as a config language&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://news.ycombinator.com/item?id=20847943"&gt;Cue&lt;/a&gt;:  A language for defining, generating, and validating data
&lt;/p&gt;
&lt;p&gt;
I've &lt;b&gt;really&lt;/b&gt; struggled to find a code example on the website, so &lt;a href="https://github.com/cuelang/cue/blob/master/doc/tutorial/kubernetes/README.md"&gt;here you go&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=14298715"&gt;The configuration complexity clock&lt;/a&gt;: a case for hard-coding&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
A followup question, which I don't have an answer for: why is it that way?
I'm sure Ansible/CircleCI or Github Actions are developed by talented engineers who have considered pros and cons of using YAML.
Do the pros really outweigh the cons?
&lt;/p&gt;
&lt;p&gt;
Open to all feedback, and feel free to share your config pain and how are you solving it!
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Updates&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-04-11]&lt;/span&gt;&lt;/span&gt; Added P.S. section&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="ps"&gt;&lt;a class="headerlink" href="#ps"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-04-11]&lt;/span&gt;&lt;/span&gt; P.S.&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-ps"&gt;
&lt;p&gt;
Thanks everyone for the discussions and comments!
&lt;/p&gt;
&lt;p&gt;
There were some polar opinions involved, so I'd like to clarify the most common objections here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
"Programs as a config are a security nightmare"
&lt;/p&gt;
&lt;p&gt;
I admit that I have a programmer's mindset (as opposed to sysadmin's), and very likely underestimate the security risks.
&lt;/p&gt;
&lt;p&gt;
But again, &lt;a class="link-up" href="#security"&gt;I admin&lt;/a&gt; that executable configs are &lt;b&gt;not always&lt;/b&gt; a good idea.
You can still have the best of both worlds by providing a DSL for generating a plain config and consuming the plain config.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
"If your config is a program, it might end up arbitrarily complex and incomprehensible"
&lt;/p&gt;
&lt;p&gt;
Sure, but again, it largely depends on the discipline. You can also make a plain config incomprehensible and hard to modify.
&lt;/p&gt;
&lt;p&gt;
The best compromise here is probably configuration languages like Dhall.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
"What happens in 20 years, when there is no &amp;lt;insert programming language&amp;gt; around"
&lt;/p&gt;
&lt;p&gt;
That's a good point, but languages don't disappear in an eye blink. There will be plenty of time to adapt.
In addition, if your software and config are written in the same language, the software will need to be rewritten anyway, which is a bigger problem.
&lt;/p&gt;
&lt;p&gt;
Also even plain config formats come and go. 20 years ago XML was common for configuration; how many times you've seen it lately?
Does your programming language even include XML parser in the standard library?
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
"If your config is so complex you need a DSL, your design has gone wrong and your software sucks"
&lt;/p&gt;
&lt;p&gt;
Frankly, I've found many of such comments as very opinionated and not constructive, but I'll try to respond.
&lt;/p&gt;
&lt;p&gt;
Software comes in very different shapes and while having the simplest configuration possible is desirable (ideally, none!),
 sometimes it would change the very nature of the thing you're trying to develop. Sure, you can stop calling it 'software' and start calling a 'library'
 at this point, but I don't feel it changes the point of the discussion.
&lt;/p&gt;
&lt;p&gt;
Perhaps, my constructive takeaways from this argument would be:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
think how flexible your configuration might have to be, and whether you need to give up on plain configs early
&lt;/p&gt;
&lt;p&gt;
A good example of this would be some mail filtering systems, that started simple and ended as Turing complete.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
in the rapid development phase, resort to having a flexible config
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;When/if&lt;/b&gt; your software matures, think about supporting plain configs or/and using a special configuration language.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#plt"&gt;#plt&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#python"&gt;#python&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;05 April 2020&lt;/div&gt;
    &lt;/section&gt;
    

    
    &lt;br/&gt;
    &lt;div&gt;Discussion:&lt;/div&gt;
    &lt;ul&gt;
    
        &lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=22787332"&gt;hackernews&lt;/a&gt;&lt;/li&gt;
    
        &lt;li&gt;&lt;a href="https://lobste.rs/s/qyhvhc/your_configs_suck_try_real_programming"&gt;lobsters&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_python_configs" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/configs-suck.html" rel="alternate"/>
    <published>2020-04-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/hpi.html</id>
    <title>Human Programming Interface</title>
    <updated>2020-03-15T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra pkm quantifiedself hpi" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Human Programming Interface | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/hpi.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/hpi.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Human Programming Interface | beepb00p" property="og:title"/&gt;
        &lt;meta content="My life in a Python package" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Human Programming Interface&lt;/h1&gt;
    &lt;div class="summary"&gt;My life in a Python package
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
&lt;b&gt;TLDR&lt;/b&gt;: I'm using &lt;a href="https://github.com/karlicoss/HPI"&gt;HPI&lt;/a&gt; (Human Programming Interface) package as a means of unifying, accessing and interacting with all of my personal data.
&lt;/p&gt;
&lt;p&gt;
It's a Python library (named &lt;code class="inline"&gt;my&lt;/code&gt;), a collection of modules for:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;social networks: posts, comments, favorites&lt;/li&gt;
&lt;li&gt;reading: e-books and pdfs&lt;/li&gt;
&lt;li&gt;annotations: highlights and comments&lt;/li&gt;
&lt;li&gt;todos and notes&lt;/li&gt;
&lt;li&gt;health data: sleep, exercise, weight, heart rate, and other body metrics&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;photos &amp;amp; videos&lt;/li&gt;
&lt;li&gt;browser history&lt;/li&gt;
&lt;li&gt;instant messaging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The package hides the &lt;a href="sad-infra.html#exports_are_hard"&gt;gory details&lt;/a&gt; of locating data, parsing, error handling and caching.
You simply 'import' your data and get to work with familiar Python types and data structures.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Here's a short example to give you an idea: "which subreddits I find the most interesting?"
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;import&lt;/span&gt; my.reddit
&lt;span class="org-keyword"&gt;from&lt;/span&gt; collections &lt;span class="org-keyword"&gt;import&lt;/span&gt; Counter
&lt;span class="org-keyword"&gt;return&lt;/span&gt; Counter(s.subreddit &lt;span class="org-keyword"&gt;for&lt;/span&gt; s &lt;span class="org-keyword"&gt;in&lt;/span&gt; my.reddit.saved()).most_common(4)
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
I consider my digital trace an important part of my identity. 
The fact that the data is siloed, and accessing it is inconvenient and borderline frustrating feels very wrong.
&lt;/span&gt;&lt;aside class="sidenote"&gt;&lt;a class="post-tag" href="./tags.html#extendedmind"&gt;#extendedmind&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
Once the data is available as Python objects, I can easily plug it into existing tools, libraries and frameworks.
It makes building new tools considerably easier and allows creating new ways of interacting with the data.
&lt;/p&gt;
&lt;p&gt;
I tried different things over the years and I think I'm getting to the point where other people can also benefit from my code by 'just' plugging in their data,
and that's why I'm sharing this.
&lt;/p&gt;
&lt;p&gt;
Imagine if all your life was reflected digitally and available at your fingertips.
This library is my attempt to achieve this vision.
&lt;/p&gt;
&lt;p&gt;
If you're in a hurry, feel free to jump straight to the &lt;a class="link-down" href="#usecases"&gt;demos&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
For &lt;b&gt;installation/configuration/development guide&lt;/b&gt;, see &lt;a href="https://github.com/karlicoss/HPI/tree/master/doc/SETUP.org"&gt;SETUP.org&lt;/a&gt;.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;1. Why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#package"&gt;2. How does a Python package help?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#database"&gt;Why don't you just put everything in a massive database?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#modules"&gt;3. What's inside?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usecases"&gt;4. How do you use it?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#search"&gt;Instant search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#promnesia"&gt;promnesia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timeline"&gt;timeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#interactive"&gt;5. Ad-hoc and interactive&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#lastfm"&gt;What were my music listening stats for 2018?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hypothesis_stats"&gt;What are the most interesting Slate Star Codex posts I've read?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exercise"&gt;Accessing exercise data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kobo_progress"&gt;Book reading progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#messenger_stats"&gt;Messenger stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#input_data"&gt;6. How does it get input data?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q_and_a"&gt;7. Q &amp;amp; A&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why_python"&gt;Why Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#can_anyone_use_it"&gt;Can anyone use it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how_easy_to_use"&gt;How easy is it to use?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#privacy"&gt;What about privacy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#should_i_use_it"&gt;But &lt;i&gt;should&lt;/i&gt; I use it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#would_it_suit_me"&gt;Would it suit &lt;i&gt;me&lt;/i&gt;?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_it_isnt"&gt;What it isn't?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;8. Related links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;9. --&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="motivation"&gt;&lt;a class="headerlink" href="#motivation"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Why?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-motivation"&gt;
&lt;p&gt;
The main reason that led me to develop this is the dissatisfaction of the current situation:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Our personal data is siloed and trapped across cloud services and various devices
&lt;/p&gt;
&lt;p&gt;
Even when it's possible to access it via the API, it's hardly useful, unless you're an experienced programmer, willing to invest your time and infrastructure.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
We have insane amounts of data scattered across the cloud, yet we're left at the mercy of those who collect it to provide something useful based on it
&lt;/p&gt;
&lt;p&gt;
Integrations of data across silo boundaries are almost non-existent. There is so much potential and it's all wasted.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I'm not willing to wait till some vaporwave project reinvents the whole computing model from scratch
&lt;/p&gt;
&lt;p&gt;
As a programmer, I am in capacity to do something &lt;b&gt;right now&lt;/b&gt;, even though it's not necessarily perfect and consistent.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I've written a lot about it &lt;a href="sad-infra.html#why"&gt;here&lt;/a&gt;, so allow me to simply quote:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;search and information access
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why can't I search over all of my personal chat history with a friend, whether it's ICQ logs from 2005 or Whatsapp logs from 2019?&lt;/li&gt;
&lt;li&gt;Why can't I have incremental search over my tweets? Or browser bookmarks? Or over everything I've ever typed/read on the Internet?&lt;/li&gt;
&lt;li&gt;Why can't I search across my watched youtube videos, even though most of them have subtitles hence allowing for full text search?&lt;/li&gt;
&lt;li&gt;Why can't I see the places my friends recommended me on Google maps (or any other maps app)?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;productivity
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why can't my Google Home add shopping list items to Google Keep? Let alone other todo-list apps.&lt;/li&gt;
&lt;li&gt;Why can't I create a task in my todo list or calendar from a conversation on Facebook Messenger/Whatsapp/VK.com/Telegram?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;journaling and history
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why do I have to lose all my browser history if I decide to switch browsers?&lt;/li&gt;
&lt;li&gt;Why can't I see all the places I traveled to on a single map and photos alongside?&lt;/li&gt;
&lt;li&gt;Why can't I see what my heart rate (i.e. excitement) and speed were side by side with the video I recorded on GoPro while skiing?&lt;/li&gt;
&lt;li&gt;Why can't I easily transfer all my books and metadata if I decide to switch from Kindle to PocketBook or vice versa?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;consuming digital content
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why can't I see stuff I highlighted on Instapaper as an overlay on top of web page?&lt;/li&gt;
&lt;li&gt;Why can't I have single 'read it later' list, unifying all things saved on Reddit/Hackernews/Pocket?&lt;/li&gt;
&lt;li&gt;Why can't I use my todo app instead of 'Watch later' playlist on youtube?&lt;/li&gt;
&lt;li&gt;Why can't I 'follow' some user on Hackernews?&lt;/li&gt;
&lt;li&gt;Why can't I see if I've run across a Youtube video because my friend sent me a link months ago?&lt;/li&gt;
&lt;li&gt;Why can't I have uniform music listening stats based on my Last.fm/iTunes/Bandcamp/Spotify/Youtube?&lt;/li&gt;
&lt;li&gt;Why am I forced to use Spotify's music recommendation algorithm and don't have an option to try something else?&lt;/li&gt;
&lt;li&gt;Why can't I easily see what were the books/music/art recommended by my friends or some specific Twitter/Reddit/Hackernews users?&lt;/li&gt;
&lt;li&gt;Why my otherwise perfect hackernews &lt;a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic"&gt;app for Android&lt;/a&gt; doesn't share saved posts/comments with the website?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;health and body maintenance
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why can't I tell if I was more sedentary than usual during the past week and whether I need to compensate by doing a bit more exercise?&lt;/li&gt;
&lt;li&gt;Why can't I see what's the impact of aerobic exercise on my resting HR?&lt;/li&gt;
&lt;li&gt;Why can't I have a dashboard for all of my health: food, exercise and sleep to see baselines and trends?&lt;/li&gt;
&lt;li&gt;Why can't I see the impact of temperature or CO2 concentration in room on my sleep?&lt;/li&gt;
&lt;li&gt;Why can't I see how holidays (as in, not going to work) impact my stress levels?&lt;/li&gt;
&lt;li&gt;Why can't I take my Headspace app data and see how/if meditation impacts my sleep?&lt;/li&gt;
&lt;li&gt;Why can't I run a short snippet of code and check some random health advice on the Internet against &lt;b&gt;my&lt;/b&gt; health data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;personal finance
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why am I forced to manually copy transactions from different banking apps into a spreadsheet?&lt;/li&gt;
&lt;li&gt;Why can't I easily match my Amazon/Ebay orders with my bank transactions?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;why I can't do anything when I'm offline or have a wonky connection?&lt;/li&gt;
&lt;li&gt;tools for thinking and learning
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why when something like &lt;a href="https://en.wikipedia.org/wiki/Method_of_loci"&gt;'mind palace'&lt;/a&gt; is &lt;b&gt;literally possible&lt;/b&gt; with VR technology, we don't see any in use?&lt;/li&gt;
&lt;li&gt;Why can't I easily convert select Instapaper highlights or new foreign words I encountered on my Kindle into Anki flashcards?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;mediocre interfaces
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why do I have to suffer from poor management and design decisions in UI changes, even if the interface is not the main reason I'm using the product?&lt;/li&gt;
&lt;li&gt;Why can't I leave priorities and notes on my saved Reddit/Hackernews items?&lt;/li&gt;
&lt;li&gt;Why can't I leave private notes on Deliveroo restaurants/dishes, so I'd remember what to order/not to order next time?&lt;/li&gt;
&lt;li&gt;Why do people have to suffer from Google Inbox shutdown?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;communication and collaboration
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why can't I easily share my web or book highlights with a friend? Or just make highlights in select books public?&lt;/li&gt;
&lt;li&gt;Why can't I easily find out other person's expertise without interrogating them, just by looking what they read instead?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;backups
&lt;ul class="org-ul"&gt;
&lt;li&gt;Why do I have to think about it and actively invest time and effort?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I'm tired of having to use multiple different messengers and social networks&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I'm tired of shitty bloated interfaces
&lt;/p&gt;
&lt;p&gt;
Why do we have to be at mercy of their developers, designers and product managers? If we had our data at hand, we could fine-tune interfaces for our needs.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I'm tired of mediocre search experience
&lt;/p&gt;
&lt;p&gt;
Text search is something computers do &lt;b&gt;exceptionally&lt;/b&gt; well.
Yet, often it's not available offline, it's not incremental, everyone reinvents their own query language, and so on.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I'm frustrated by poor information exploring and processing experience
&lt;/p&gt;
&lt;p&gt;
While for many people, services like Reddit or Twitter are simply time killers (and I don't judge), some want to use them efficiently, as a source of information/research.
Modern bookmarking experience makes it far from perfect.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
You can dismiss this as a list of first-world problems, and you would be right, they are.
But the major reason I want to solve these problems is to be better at learning and working with knowledge,
so I could be better at solving the real problems.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="package"&gt;&lt;a class="headerlink" href="#package"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; How does a Python package help?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-package"&gt;
&lt;p&gt;
When I started solving some of these problems for myself, I've noticed a common pattern: the &lt;a href="sad-infra.html#exports_are_hard"&gt;hardest bit&lt;/a&gt; is actually getting your data in the first place.
It's inherently error-prone and frustrating.
&lt;/p&gt;
&lt;p&gt;
But once you have the data in a convenient representation, working with it is pleasant – you get to explore and build instead of fighting with yet another stupid REST API.
&lt;/p&gt;
&lt;p&gt;
This python package knows how to find data, deserialize it and normalize it to the convenient representation.
You have the full power of the programming language to transform the data and do whatever comes to your mind.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="database"&gt;&lt;a class="headerlink" href="#database"&gt;¶&lt;/a&gt;Why don't you just put everything in a massive database?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-database"&gt;
&lt;p&gt;
Glad you've asked! I wrote a whole &lt;a href="unnecessary-db.html"&gt;post&lt;/a&gt; about it.
&lt;/p&gt;
&lt;p&gt;
In short: while databases are efficient and easy to read from, often they aren't flexible enough to fit your data.
You're probably going to end up writing code anyway.
&lt;/p&gt;
&lt;p&gt;
While working with your data, you'll inevitably notice common patterns and code repetition, which you'll probably want to extract somewhere.
That's where a Python package comes in.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="modules"&gt;&lt;a class="headerlink" href="#modules"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; What's inside?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-modules"&gt;
&lt;p&gt;
Here's an (incomplete) list of the modules in the public package:
&lt;/p&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/bluemaestro"&gt;my.bluemaestro&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;a href="https://bluemaestro.com/products/product-details/bluetooth-environmental-monitor-and-logger"&gt;Bluemaestro&lt;/a&gt; temperature/humidity/pressure monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/body/blood.py"&gt;my.body.blood&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Blood tracking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/body/weight.py"&gt;my.body.weight&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Weight data (manually logged)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/books/kobo.py"&gt;my.books.kobo&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Kobo e-ink reader: annotations and reading stats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/calendar/holidays.py"&gt;my.calendar.holidays&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Provides data on days off work (based on public holidays + manual inputs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/coding/commits.py"&gt;my.coding.commits&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Git commits data: crawls filesystem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/coding/github.py"&gt;my.coding.github&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Github events and their metadata: comments/issues/pull requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/emfit"&gt;my.emfit&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;a href="https://shop-eu.emfit.com/products/emfit-qs"&gt;Emfit QS&lt;/a&gt; sleep tracker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/fbmessenger.py"&gt;my.fbmessenger&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Facebook Messenger messages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/feedbin.py"&gt;my.feedbin&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Feedbin RSS reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/feedly.py"&gt;my.feedly&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Fedly RSS reader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/foursquare.py"&gt;my.foursquare&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Foursquare/Swarm checkins&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/hypothesis.py"&gt;my.hypothesis&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Hypothes.is highlights and annotations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/init.py"&gt;my.init&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;A hook to insert user's config directory into Python's search path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/instapaper.py"&gt;my.instapaper&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Instapaper bookmarks, highlights and annotations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/lastfm"&gt;my.lastfm&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Last.fm scrobbles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/location/takeout.py"&gt;my.location.takeout&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Google Takeout data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/materialistic.py"&gt;my.materialistic&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic"&gt;Materialistic&lt;/a&gt; app for Hackernews&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/notes/orgmode.py"&gt;my.notes.orgmode&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Programmatic access and queries to org-mode files on the filesystem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/pdfs.py"&gt;my.pdfs&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;PDF annotations on your filesystem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/photos"&gt;my.photos&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for accessing photos and videos, with their GPS and timestamps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/pinboard.py"&gt;my.pinboard&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;pinboard.in bookmarks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/reading/polar.py"&gt;my.reading.polar&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/burtonator/polar-books"&gt;Polar&lt;/a&gt; articles and highlights&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/reddit.py"&gt;my.reddit&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Reddit data: saved items/comments/upvotes etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/rescuetime.py"&gt;my.rescuetime&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Rescuetime (activity tracking) data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/rtm.py"&gt;my.rtm&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;a href="https://rememberthemilk.com"&gt;Remember The Milk&lt;/a&gt; tasks and notes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/smscalls.py"&gt;my.smscalls&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Phone calls and SMS messages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/stackexchange.py"&gt;my.stackexchange&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Stackexchange data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://github.com/karlicoss/my/tree/master/my/twitter.py"&gt;my.twitter&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;Module for Twitter (uses official twitter archive export)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Some modules are private, and need a bit of cleanup before merging:
&lt;/p&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;my.workouts&lt;/td&gt;
&lt;td class="org-left"&gt;Exercise activity, from Endomondo and manual logs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;my.sleep.manual&lt;/td&gt;
&lt;td class="org-left"&gt;Subjective sleep data, manually logged&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;my.nutrition&lt;/td&gt;
&lt;td class="org-left"&gt;Food and drink consumption data, logged manually from different sources&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;my.money&lt;/td&gt;
&lt;td class="org-left"&gt;Expenses and shopping data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;my.webhistory&lt;/td&gt;
&lt;td class="org-left"&gt;Browsing history (part of &lt;a href="https://github.com/karlicoss/promnesia"&gt;promnesia&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id="usecases"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="usecases"&gt;&lt;a class="headerlink" href="#usecases"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; How do you use it?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-usecases"&gt;
&lt;p&gt;
Mainly I use it as a data provider for my scripts, tools, and dashboards.
&lt;/p&gt;
&lt;p&gt;
Also, check out &lt;a href="myinfra.html#mypkg"&gt;my infrastructure map&lt;/a&gt;.
It's a draft at the moment, but it might be helpful for understanding what's my vision on HPI.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="search"&gt;&lt;a class="headerlink" href="#search"&gt;¶&lt;/a&gt;Instant search&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-search"&gt;
&lt;p&gt;
Typical search interfaces make me unhappy as they are &lt;b&gt;siloed, slow, awkward to use and don't work offline&lt;/b&gt;.
So I built my own ways around it! I write about it in detail &lt;a href="../../blog/content/pkm-search.html#personal_information"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
In essence, I'm mirroring most of my online data like chat logs, comments, etc., as plaintext.
I can overview it in any text editor, and incrementally search over &lt;b&gt;all of it&lt;/b&gt; in a single keypress.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="orger"&gt;&lt;a class="headerlink" href="#orger"&gt;¶&lt;/a&gt;orger&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orger"&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/orger"&gt;orger&lt;/a&gt; is a tool and set of modules for accessing data via org-mode.
It allows searching and overviewing, and in addition, I'm using it for creating tasks straight from native app interfaces (e.g. Reddit/Telegram) and spaced repetition via &lt;a href="https://orgmode.org/worg/org-contrib/org-drill.html"&gt;org-drill&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I write about it in detail &lt;a href="../../blog/content/orger.html"&gt;here&lt;/a&gt; and &lt;a href="../../blog/content/orger-todos.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="promnesia"&gt;&lt;a class="headerlink" href="#promnesia"&gt;¶&lt;/a&gt;promnesia&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-promnesia"&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/promnesia#demo"&gt;promnesia&lt;/a&gt; is a browser extension I'm working on to escape silos by &lt;b&gt;unifying annotations and browsing history&lt;/b&gt; from different data sources.
&lt;/p&gt;
&lt;p&gt;
I've been using it for more than a year now and working on final touches to properly release it for other people.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="dashboard"&gt;&lt;a class="headerlink" href="#dashboard"&gt;¶&lt;/a&gt;dashboard&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-dashboard"&gt;
&lt;p&gt;
As a big fan of &lt;a class="post-tag" href="./tags.html#quantified-self"&gt;#quantified-self&lt;/a&gt;, I'm working on personal health, sleep and exercise dashboard, built from various data sources.
&lt;/p&gt;
&lt;p&gt;
I'm working on making it public, you can see some screenshots &lt;a href="https://www.reddit.com/r/QuantifiedSelf/comments/cokt4f/what_do_you_all_do_with_your_data/ewmucgk"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="timeline"&gt;&lt;a class="headerlink" href="#timeline"&gt;¶&lt;/a&gt;timeline&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-timeline"&gt;
&lt;p&gt;
Timeline is a &lt;a class="post-tag" href="./tags.html#lifelogging"&gt;#lifelogging&lt;/a&gt; project I'm working on.
&lt;/p&gt;
&lt;p&gt;
I want to see all my digital history, search in it, filter, easily jump at a specific point in time and see the context when it happened.
That way it works as a sort of external memory.
&lt;/p&gt;
&lt;p&gt;
Ideally, it would look similar to Andrew Louis's &lt;a href="https://hyfen.net/memex"&gt;Memex&lt;/a&gt;, or might even reuse his interface if
he open sources it. I highly recommend watching his talk for inspiration.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="interactive"&gt;&lt;a class="headerlink" href="#interactive"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Ad-hoc and interactive&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-interactive"&gt;
&lt;p&gt;
&lt;span id="examples" style="visibility:hidden"&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="lastfm"&gt;&lt;a class="headerlink" href="#lastfm"&gt;¶&lt;/a&gt;What were my music listening stats for 2018?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-lastfm"&gt;
&lt;p&gt;
Single import away from getting tracks you listened to:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;from&lt;/span&gt; my.lastfm &lt;span class="org-keyword"&gt;import&lt;/span&gt; get_scrobbles
&lt;span class="org-variable-name"&gt;scrobbles&lt;/span&gt; = get_scrobbles()
scrobbles[200: 205]
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;[Scrobble(raw={'album': 'Nevermind', 'artist': 'Nirvana', 'date': '1282488504', 'name': 'Drain You'}),
 Scrobble(raw={'album': 'Dirt', 'artist': 'Alice in Chains', 'date': '1282489764', 'name': 'Would?'}),
 Scrobble(raw={'album': 'Bob Dylan: The Collection', 'artist': 'Bob Dylan', 'date': '1282493517', 'name': 'Like a Rolling Stone'}),
 Scrobble(raw={'album': 'Dark Passion Play', 'artist': 'Nightwish', 'date': '1282493819', 'name': 'Amaranth'}),
 Scrobble(raw={'album': 'Rolled Gold +', 'artist': 'The Rolling Stones', 'date': '1282494161', 'name': "You Can't Always Get What You Want"})]
&lt;/pre&gt;
&lt;p&gt;
Or, as a pandas frame to make it pretty:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;import&lt;/span&gt; pandas &lt;span class="org-keyword"&gt;as&lt;/span&gt; pd
&lt;span class="org-variable-name"&gt;df&lt;/span&gt; = pd.DataFrame([{
    &lt;span class="org-string"&gt;'dt'&lt;/span&gt;: s.dt,
    &lt;span class="org-string"&gt;'track'&lt;/span&gt;: s.track,
} &lt;span class="org-keyword"&gt;for&lt;/span&gt; s &lt;span class="org-keyword"&gt;in&lt;/span&gt; scrobbles])
&lt;span class="org-variable-name"&gt;cdf&lt;/span&gt; = df.set_index(&lt;span class="org-string"&gt;'dt'&lt;/span&gt;)
cdf[200: 205]
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;                                                                       track
dt                                                                          
2010-08-22 14:48:24+00:00                                Nirvana — Drain You
2010-08-22 15:09:24+00:00                           Alice in Chains — Would?
2010-08-22 16:11:57+00:00                   Bob Dylan — Like a Rolling Stone
2010-08-22 16:16:59+00:00                               Nightwish — Amaranth
2010-08-22 16:22:41+00:00  The Rolling Stones — You Can't Always Get What...
&lt;/pre&gt;
&lt;p&gt;
We can use &lt;a href="https://github.com/martijnvermaat/calmap"&gt;calmap&lt;/a&gt; library to plot a github-style music listening activity heatmap:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="org-keyword"&gt;as&lt;/span&gt; plt
plt.figure(figsize=(10, 2.3))

&lt;span class="org-keyword"&gt;import&lt;/span&gt; calmap
&lt;span class="org-variable-name"&gt;cdf&lt;/span&gt; = cdf.set_index(cdf.index.tz_localize(&lt;span class="org-constant"&gt;None&lt;/span&gt;)) &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;calmap expects tz-unaware dates&lt;/span&gt;
calmap.yearplot(cdf[&lt;span class="org-string"&gt;'track'&lt;/span&gt;], how=&lt;span class="org-string"&gt;'count'&lt;/span&gt;, year=2018)

plt.tight_layout()
plt.title(&lt;span class="org-string"&gt;'My music listening activity for 2018'&lt;/span&gt;)
&lt;span class="org-variable-name"&gt;plot_file&lt;/span&gt; = &lt;span class="org-string"&gt;'lastfm_2018.png'&lt;/span&gt;
plt.savefig(plot_file)
plot_file
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;img alt="lastfm_2018.png" src="lastfm_2018.png"/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
This isn't necessarily very insightful data, but fun to look at now and then!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="hypothesis_stats"&gt;&lt;a class="headerlink" href="#hypothesis_stats"&gt;¶&lt;/a&gt;What are the most interesting Slate Star Codex posts I've read?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-hypothesis_stats"&gt;
&lt;p&gt;
My friend asked me if I could recommend them posts I found interesting on &lt;a href="https://slatestarcodex.com"&gt;Slate Star Codex&lt;/a&gt;.
With few lines of Python I can quickly recommend them posts I engaged most with, i.e. the ones I annotated most on &lt;a href="https://hypothes.is"&gt;Hypothesis&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;from&lt;/span&gt; my.hypothesis &lt;span class="org-keyword"&gt;import&lt;/span&gt; get_pages
&lt;span class="org-keyword"&gt;from&lt;/span&gt; collections &lt;span class="org-keyword"&gt;import&lt;/span&gt; Counter
&lt;span class="org-variable-name"&gt;cc&lt;/span&gt; = Counter({p.url: &lt;span class="org-builtin"&gt;len&lt;/span&gt;(p.highlights) &lt;span class="org-keyword"&gt;for&lt;/span&gt; p &lt;span class="org-keyword"&gt;in&lt;/span&gt; get_pages() &lt;span class="org-keyword"&gt;if&lt;/span&gt; &lt;span class="org-string"&gt;'slatestarcodex'&lt;/span&gt; &lt;span class="org-keyword"&gt;in&lt;/span&gt; p.url})
&lt;span class="org-keyword"&gt;return&lt;/span&gt; cc.most_common(10)
&lt;/pre&gt;
&lt;/div&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-right"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2013/10/20/the-anti-reactionary-faq/"&gt;http://slatestarcodex.com/2013/10/20/the-anti-reactionary-faq/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://slatestarcodex.com/2013/03/03/reactionary-philosophy-in-an-enormous-planet-sized-nutshell/"&gt;https://slatestarcodex.com/2013/03/03/reactionary-philosophy-in-an-enormous-planet-sized-nutshell/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2014/12/17/the-toxoplasma-of-rage/"&gt;http://slatestarcodex.com/2014/12/17/the-toxoplasma-of-rage/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://slatestarcodex.com/2014/03/17/what-universal-human-experiences-are-you-missing-without-realizing-it/"&gt;https://slatestarcodex.com/2014/03/17/what-universal-human-experiences-are-you-missing-without-realizing-it/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2014/07/30/meditations-on-moloch/"&gt;http://slatestarcodex.com/2014/07/30/meditations-on-moloch/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2015/04/21/universal-love-said-the-cactus-person/"&gt;http://slatestarcodex.com/2015/04/21/universal-love-said-the-cactus-person/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2015/01/01/untitled/"&gt;http://slatestarcodex.com/2015/01/01/untitled/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://slatestarcodex.com/2017/02/09/considerations-on-cost-disease/"&gt;https://slatestarcodex.com/2017/02/09/considerations-on-cost-disease/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="http://slatestarcodex.com/2013/04/25/in-defense-of-psych-treatment-for-attempted-suicide/"&gt;http://slatestarcodex.com/2013/04/25/in-defense-of-psych-treatment-for-attempted-suicide/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;&lt;a href="https://slatestarcodex.com/2014/09/30/i-can-tolerate-anything-except-the-outgroup/"&gt;https://slatestarcodex.com/2014/09/30/i-can-tolerate-anything-except-the-outgroup/&lt;/a&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="exercise"&gt;&lt;a class="headerlink" href="#exercise"&gt;¶&lt;/a&gt;Accessing exercise data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-exercise"&gt;
&lt;p&gt;
&lt;span id="workouts" style="visibility:hidden"&gt;&lt;/span&gt; E.g. see use of &lt;code class="inline"&gt;my.workouts&lt;/code&gt; &lt;a href="./heartbeats_vs_kcals.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="kobo_progress"&gt;&lt;a class="headerlink" href="#kobo_progress"&gt;¶&lt;/a&gt;Book reading progress&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-kobo_progress"&gt;
&lt;p&gt;
I publish my reading stats on &lt;a href="https://www.goodreads.com/user/show/22191391-dima-gerasimov"&gt;Goodreads&lt;/a&gt; so other people can see what I'm reading/have read, but Kobo &lt;a href="https://beepb00p.xyz/ideas.html#kobo2goodreads"&gt;lacks integration&lt;/a&gt; with Goodreads.
I'm using &lt;a href="https://github.com/karlicoss/kobuddy"&gt;kobuddy&lt;/a&gt; to access my my Kobo data, and I've got a regular task that reminds me to sync my progress once a month.
&lt;/p&gt;
&lt;p&gt;
The task looks like this:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-org"&gt;&lt;span class="org-org-level-1"&gt;* &lt;/span&gt;&lt;span class="org-org-todo"&gt;TODO&lt;/span&gt;&lt;span class="org-org-level-1"&gt; &lt;/span&gt;&lt;span class="org-org-priority"&gt;[#C] &lt;/span&gt;&lt;span class="org-org-level-1"&gt;sync &lt;/span&gt;&lt;span class="org-org-link"&gt;&lt;a href="https://goodreads.com"&gt;reading progress&lt;/a&gt;&lt;/span&gt;&lt;span class="org-org-level-1"&gt; with kobo&lt;/span&gt;
  &lt;span class="org-org-special-keyword"&gt;DEADLINE:&lt;/span&gt; &lt;span class="org-org-date"&gt;&amp;lt;2019-11-24 Sun .+4w -0d&amp;gt;&lt;/span&gt;
&lt;span class="org-org-link"&gt;&lt;a href="eshell: with_my python3 -c 'import my.books.kobo as kobo; kobo.print_progress()'"&gt;eshell: with_my python3 -c 'import my.books.kobo as kobo; kobo.print_progress()'&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
With a single Enter keypress on the inlined &lt;samp class="inline"&gt;eshell:&lt;/samp&gt; command I can print the progress and fill in the completed books on Goodreads, e.g.:
&lt;/p&gt;
&lt;pre class="example"&gt;
A_Mathematician's_Apology by G. H. Hardy
Started : 21 Aug 2018 11:44
Finished: 22 Aug 2018 12:32

Fear and Loathing in Las Vegas: A Savage Journey to the Heart of the American Dream (Vintage) by Thompson, Hunter S.
Started : 06 Sep 2018 05:54
Finished: 09 Sep 2018 12:21

Sapiens: A Brief History of Humankind by Yuval Noah Harari
Started : 09 Sep 2018 12:22
Finished: 16 Sep 2018 07:25

Inadequate Equilibria: Where and How Civilizations Get Stuck by Eliezer Yudkowsky
Started : 31 Jul 2018 22:54
Finished: 16 Sep 2018 07:25

Albion Dreaming by Andy Roberts
Started : 20 Aug 2018 21:16
Finished: 16 Sep 2018 07:26
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="messenger_stats"&gt;&lt;a class="headerlink" href="#messenger_stats"&gt;¶&lt;/a&gt;Messenger stats&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-messenger_stats"&gt;
&lt;p&gt;
How much do I chat on Facebook Messenger?
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;from&lt;/span&gt; my.fbmessenger &lt;span class="org-keyword"&gt;import&lt;/span&gt; messages

&lt;span class="org-keyword"&gt;import&lt;/span&gt; pandas &lt;span class="org-keyword"&gt;as&lt;/span&gt; pd
&lt;span class="org-keyword"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class="org-keyword"&gt;as&lt;/span&gt; plt

&lt;span class="org-variable-name"&gt;df&lt;/span&gt; = pd.DataFrame({&lt;span class="org-string"&gt;'dt'&lt;/span&gt;: m.dt, &lt;span class="org-string"&gt;'messages'&lt;/span&gt;: 1} &lt;span class="org-keyword"&gt;for&lt;/span&gt; m &lt;span class="org-keyword"&gt;in&lt;/span&gt; messages())
df.set_index(&lt;span class="org-string"&gt;'dt'&lt;/span&gt;, inplace=&lt;span class="org-constant"&gt;True&lt;/span&gt;)

&lt;span class="org-variable-name"&gt;df&lt;/span&gt; = df.resample(&lt;span class="org-string"&gt;'M'&lt;/span&gt;).&lt;span class="org-builtin"&gt;sum&lt;/span&gt;() &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;by month&lt;/span&gt;
&lt;span class="org-variable-name"&gt;df&lt;/span&gt; = df.loc[&lt;span class="org-string"&gt;'2016-01-01'&lt;/span&gt;:&lt;span class="org-string"&gt;'2019-01-01'&lt;/span&gt;] &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;past subset for determinism&lt;/span&gt;

&lt;span class="org-variable-name"&gt;fig&lt;/span&gt;, &lt;span class="org-variable-name"&gt;ax&lt;/span&gt; = plt.subplots(figsize=(15, 5))
df.plot(kind=&lt;span class="org-string"&gt;'bar'&lt;/span&gt;, ax=ax)

&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;todo wonder if that vvv can be less verbose...&lt;/span&gt;
&lt;span class="org-variable-name"&gt;x_labels&lt;/span&gt; = df.index.strftime(&lt;span class="org-string"&gt;'%Y %b'&lt;/span&gt;)
ax.set_xticklabels(x_labels)

&lt;span class="org-variable-name"&gt;plot_file&lt;/span&gt; = &lt;span class="org-string"&gt;'messenger_2016_to_2019.png'&lt;/span&gt;
plt.tight_layout()
plt.savefig(plot_file)
&lt;span class="org-keyword"&gt;return&lt;/span&gt; plot_file
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;img alt="messenger_2016_to_2019.png" src="messenger_2016_to_2019.png"/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="input_data"&gt;&lt;a class="headerlink" href="#input_data"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; How does it get input data?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-input_data"&gt;
&lt;p&gt;
If you're curious about any specific data sources I'm using, I've written it up &lt;a href="https://beepb00p.xyz/my-data.html"&gt;in detail&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
In short:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
The data is &lt;a href="myinfra.html#exports"&gt;periodically synchronized&lt;/a&gt; from the services (cloud or not) locally, on the filesystem
&lt;/p&gt;
&lt;p&gt;
As a result, you get &lt;a href="myinfra.html#fs"&gt;JSONs/sqlite&lt;/a&gt; (or other formats, depending on the service) on your disk.
&lt;/p&gt;
&lt;p&gt;
Once you have it, it's trivial to back it up and synchronize to other computers/phones, if necessary.
&lt;/p&gt;
&lt;p&gt;
To schedule periodic sync, I'm using &lt;a href="scheduler.html#cron"&gt;cron&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;samp class="inline"&gt;my.&lt;/samp&gt; package only accesses the data on the filesystem
&lt;/p&gt;
&lt;p&gt;
That makes it extremely fast, reliable, and fully offline capable.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As you can see, in such a setup, the data is lagging behind the 'realtime'.
I consider it a necessary sacrifice to make everything fast and resilient.
&lt;/p&gt;
&lt;p&gt;
In theory, it's possible to make the system almost realtime by having a service that sucks in data continuously (rather than periodically), but it's harder as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="q_and_a"&gt;&lt;a class="headerlink" href="#q_and_a"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Q &amp;amp; A&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-q_and_a"&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_python"&gt;&lt;a class="headerlink" href="#why_python"&gt;¶&lt;/a&gt;Why Python?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_python"&gt;
&lt;p&gt;
I don't consider Python unique as a language suitable for such a project.
It just happens to be the one I'm most comfortable with.
I do have some reasons that I think make it &lt;i&gt;specifically&lt;/i&gt; good, but explaining them is out of this post's scope.
&lt;/p&gt;
&lt;p&gt;
In addition, Python offers a &lt;a href="https://github.com/karlicoss/awesome-python#data-analysis"&gt;very rich ecosystem&lt;/a&gt; for data analysis, which we can use to our benefit.
&lt;/p&gt;
&lt;p&gt;
That said, I've never seen anything similar in other programming languages, and I would be really interested in, so please send me links if you know some.
I've heard LISPs are great for data? ;)
&lt;/p&gt;
&lt;p&gt;
Overall, I wish &lt;a href="https://en.wikipedia.org/wiki/Foreign_function_interface"&gt;FFIs&lt;/a&gt; were a bit more mature, so we didn't have to think about specific programming languages at all.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="can_anyone_use_it"&gt;&lt;a class="headerlink" href="#can_anyone_use_it"&gt;¶&lt;/a&gt;Can anyone use it?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-can_anyone_use_it"&gt;
&lt;p&gt;
Yes!
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you can plug in your own data&lt;/li&gt;
&lt;li&gt;most modules are isolated, so you can only use the ones that you want to&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
everything is easily extensible
&lt;/p&gt;
&lt;p&gt;
Starting from simply adding new modules to any dynamic hackery you can possibly imagine within Python.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="how_easy_to_use"&gt;&lt;a class="headerlink" href="#how_easy_to_use"&gt;¶&lt;/a&gt;How easy is it to use?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-how_easy_to_use"&gt;
&lt;p&gt;
The whole setup requires some basic programmer literacy:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;installing/running and potentially modifying Python code&lt;/li&gt;
&lt;li&gt;using symlinks&lt;/li&gt;
&lt;li&gt;potentially running Cron jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you have any ideas on making the setup simpler, please let me know!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="privacy"&gt;&lt;a class="headerlink" href="#privacy"&gt;¶&lt;/a&gt;What about privacy?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-privacy"&gt;
&lt;p&gt;
The modules contain no data, only code to operate on the data.
&lt;/p&gt;
&lt;p&gt;
Everything is &lt;a href="./tags.html#offline"&gt;local fist&lt;/a&gt;, the input data is on your filesystem.
If you're truly paranoid, you can even wrap it in a Docker container.
&lt;/p&gt;
&lt;p&gt;
There is still a question of whether you trust yourself at even keeping all the data on your disk, but it is out of the scope of this post.
&lt;/p&gt;
&lt;p&gt;
If you'd rather keep some code private too, it's also trivial to achieve with a private subpackage.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="should_i_use_it"&gt;&lt;a class="headerlink" href="#should_i_use_it"&gt;¶&lt;/a&gt;But &lt;i&gt;should&lt;/i&gt; I use it?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-should_i_use_it"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Sure, maybe you can achieve a perfect system where you can instantly find and recall anything that you've done. Do you really want it?
Wouldn't that, like, make you less human?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
I'm not a gatekeeper of what it means to be human, but I don't think that the shortcomings of the human brain are what makes us such.
&lt;/p&gt;
&lt;p&gt;
So I can't answer that for you. I certainly want it though.
I'm &lt;a href="./tags.html#pkm"&gt;quite open&lt;/a&gt; about my goals – I'd happily get merged/augmented with a computer to enhance my thinking and analytical abilities.
&lt;/p&gt;
&lt;p&gt;
While at the moment &lt;a href="https://en.wikipedia.org/wiki/Hard_problem_of_consciousness"&gt;we don't even remotely understand&lt;/a&gt; what would such merging or "mind uploading" entail exactly,
I can clearly delegate some tasks, like long term memory, information lookup, and data processing to a computer. They can already handle it really well.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
What about these people who have perfect recall and wish they hadn't.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Sure, maybe it sucks. At the moment though, I don't anything close to it and this only annoys me.
I want to have a choice at least, and digital tools give me this choice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="would_it_suit_me"&gt;&lt;a class="headerlink" href="#would_it_suit_me"&gt;¶&lt;/a&gt;Would it suit &lt;i&gt;me&lt;/i&gt;?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-would_it_suit_me"&gt;
&lt;p&gt;
Probably, at least to some extent.
&lt;/p&gt;
&lt;p&gt;
First, our lives are different, so our APIs might be different too.
This is more of a demonstration of what's I'm using, although I did spend effort towards making it as modular and extensible as possible, so other people could use it too.
It's easy to modify code, add extra methods and modules. You can even keep all your modifications private.
&lt;/p&gt;
&lt;p&gt;
But after all, we've all sharing many similar activities and using the same products, so there is a huge overlap.
I'm not sure how far we can stretch it and keep modules generic enough to be used by multiple people. But let's give it a try perhaps? :)
&lt;/p&gt;
&lt;p&gt;
Second, interacting with your data through the code is the central idea of the project.
That kind of cuts off people without technical skills, and even many people capable of coding,
who dislike the idea of writing code outside of work.
&lt;/p&gt;
&lt;p&gt;
It might be possible to expose some &lt;a href="https://en.wikipedia.org/wiki/No-code_development_platform"&gt;no-code&lt;/a&gt; interfaces,
but I still feel that wouldn't be enough.
&lt;/p&gt;
&lt;p&gt;
I'm not sure whether it's a solvable problem at this point, but happy to hear any suggestions!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="what_it_isnt"&gt;&lt;a class="headerlink" href="#what_it_isnt"&gt;¶&lt;/a&gt;What it isn't?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-what_it_isnt"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
It's not vaporwave
&lt;/p&gt;
&lt;p&gt;
The project is a little crude, but it's real and working. I've been using it for a long time now, and find it fairly sustainable to keep using for the foreseeable future.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
It's not going to be another silo
&lt;/p&gt;
&lt;p&gt;
While I don't have anything against commercial use (and I believe any work in this area will benefit all of us), I'm not planning to build a product out of it.
&lt;/p&gt;
&lt;p&gt;
I really hope it can grow into or inspire some mature open source system.
&lt;/p&gt;
&lt;p&gt;
Please take my ideas and code and build something cool from it!
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="links"&gt;&lt;a class="headerlink" href="#links"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Related links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-links"&gt;
&lt;p&gt;
Similar projects:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/novoid/Memacs"&gt;Memacs&lt;/a&gt; by Karl Voit&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=9615901"&gt;Me API - turn yourself into an open API (HN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/markwk/qs_ledger"&gt;QS ledger&lt;/a&gt; from Mark Koester&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/tehmantra/my"&gt;tehmantra/my&lt;/a&gt;: directly inspired by this package&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bcongdon/bolero"&gt;bcongdon/bolero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Solid_(web_decentralization_project)#Design"&gt;Solid project&lt;/a&gt;: personal data pod, which websites pull data from&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Other links:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;NetOpWibby: &lt;a href="https://news.ycombinator.com/item?id=21684949"&gt;A Personal API (HN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="sad-infra.html"&gt;The sad state of personal data and infrastructure&lt;/a&gt;: here I am going into motivation and difficulties arising in the implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
Open to any feedback and thoughts!
&lt;/p&gt;
&lt;p&gt;
Also, don't hesitate to raise an issue, or reach me personally if you want to try using it, and find the instructions confusing. Your questions would help me to make it simpler!
&lt;/p&gt;
&lt;p&gt;
In some near future I will write more about:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;specific technical decisions and patterns&lt;/li&gt;
&lt;li&gt;challenges I had so solve&lt;/li&gt;
&lt;li&gt;more use-cases and demos – it's impossible to fit everything in one post!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
, but happy to answer any questions on these topics now!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#pkm"&gt;#pkm&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#quantifiedself"&gt;#quantifiedself&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#hpi"&gt;#hpi&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;15 March 2020&lt;/div&gt;
    &lt;/section&gt;
    

    
    &lt;br/&gt;
    &lt;div&gt;Discussion:&lt;/div&gt;
    &lt;ul&gt;
    
        &lt;li&gt;&lt;a href="https://www.reddit.com/r/coolgithubprojects/comments/fo28ok/human_programming_interface_your_digital_life_in"&gt;/r/coolgithubprojects&lt;/a&gt;&lt;/li&gt;
    
        &lt;li&gt;&lt;a href="https://lobste.rs/s/vzkb7a/human_programming_interface_python"&gt;lobsters&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_mypkg" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/hpi.html" rel="alternate"/>
    <published>2020-03-15T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/exports.html</id>
    <title>Building data liberation infrastructure</title>
    <updated>2020-02-13T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra dataliberation" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Building data liberation infrastructure | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/exports.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/exports.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Building data liberation infrastructure | beepb00p" property="og:title"/&gt;
        &lt;meta content="How to export, access and own your personal data with minimal effort" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Building data liberation infrastructure&lt;/h1&gt;
    &lt;div class="summary"&gt;How to export, access and own your personal data with minimal effort
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
Our personal data is siloed, held hostage, and very hard to access for various technical and business reasons.
I wrote and vented a lot about it in the &lt;a href="sad-infra.html"&gt;previous post&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
People suggest a whole spectrum of possible solutions to these issues, starting from proposals on dismantling capitalism and ending with high tech vaporwavy stuff like &lt;a href="https://en.wikipedia.org/wiki/Urbit"&gt;urbit&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I, however, want my data &lt;b&gt;here and now&lt;/b&gt;. I'm also fortunate to be a software engineer so I can bring this closer to reality by myself.
&lt;/p&gt;
&lt;p&gt;
As a pragmatic intermediate solution, feasible with existing technology and infrastructure without reinventing everything from scratch, 
I suggested a &lt;a href="sad-infra.html#data_mirror"&gt;&lt;b&gt;'data mirror'&lt;/b&gt;&lt;/a&gt;, a piece of software that continuously syncs/mirrors user's personal data.
&lt;/p&gt;
&lt;p&gt;
So, as I promised, this post will be somewhat more &lt;del&gt;boring&lt;/del&gt; specific.
&lt;/p&gt;
&lt;p&gt;
You can treat this as a tutorial on liberating your data from any service. I'll be explaining some technical decisions and guidelines on:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;how to reliably export your data from the cloud (and other silos), locally&lt;/li&gt;
&lt;li&gt;how to organize it for easy and fast access&lt;/li&gt;
&lt;li&gt;how to keep it up to date without constant maintenance&lt;/li&gt;
&lt;li&gt;how to make the infrastructure modular, so other people could use only parts they find necessary and extend it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In hindsight, some things feel so obvious, they hardly deserve mention, but I hope they might be helpful anyway!
&lt;/p&gt;
&lt;p&gt;
I will be presenting and elaborating on different technical decisions, patterns and tricks I figured out while developing data mirrors by myself.
&lt;/p&gt;
&lt;p&gt;
I will &lt;a href="myinfra.html"&gt;link&lt;/a&gt; to my &lt;span style="color:darkgreen; font-weight: bolder"&gt;infrastructure map&lt;/span&gt; throughout the post, hopefully you'll enjoy exploring it. Links will point at specific clusters of the map and highlight them, so hopefully it will be helpful in communicating the design decisions.
&lt;/p&gt;
&lt;p&gt;
I'm also &lt;b&gt;very open&lt;/b&gt; for questions like "Why didn't you do Y instead of X?". 
It's quite possible that I'm slipping in extra complexity somewhere and I would be very happy to eliminate it.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#design"&gt;1. Design principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#retrieve"&gt;2. Retrieving data&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#api_public"&gt;public API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api_private"&gt;private API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_scrape"&gt;scraping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_manual"&gt;manual export (GDPR/takeout)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_phone"&gt;phone apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_devices"&gt;devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#types"&gt;3. Types of exports: a high-level view&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#full"&gt;full export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#incremental"&gt;incremental export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#synthetic"&gt;synthetic export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#export_layer"&gt;4. Export layer&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bindings"&gt;use existing bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep_raw"&gt;don't mess with the raw data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#defensive"&gt;don't  be too defensive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#credentials"&gt;allow reading credentials from a file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#storage"&gt;5. How to store it: organizing data&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#timestamps"&gt;naming and timestamping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backups"&gt;backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sync"&gt;synchronizing between computers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disk_space"&gt;disk space concerns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#dal"&gt;6. Data access layer (DAL)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dal_performance"&gt;performance concerns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dal_examples"&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatic_exports"&gt;7. Automating exports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#scheduling"&gt;scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arctee"&gt;arctee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;8. --&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="design"&gt;&lt;a class="headerlink" href="#design"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Design principles&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-design"&gt;
&lt;p&gt;
Just as a reminder: the idea of the data mirror is having personal data &lt;b&gt;continuously/periodically synchronized&lt;/b&gt; to the file system, and having &lt;b&gt;programmatic access&lt;/b&gt; to it.
&lt;/p&gt;
&lt;p&gt;
It might not be that hard to achieve for one particular data source, but when you want to use &lt;a href="my-data.html"&gt;ten or more&lt;/a&gt;,
each of which with its own quirks it becomes quite painful to implement and maintain over time.
While there are many reasons to make it simple, generic, reliable and flexible at the same time, it is not an easy goal.
&lt;/p&gt;
&lt;p&gt;
The main principles of my design are modularity, separation of concerns and keeping things as simple as possible.
This allows making it easy to hook onto any layer to allow for different ways of using the data.
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
Most of my pipelines for data liberation consist of the following layers

&lt;/span&gt;&lt;aside class="sidenote"&gt;please don't be terrified of the word 'layer', typically these are just single scripts&lt;/aside&gt;&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a class="link-down" href="#export_layer"&gt;export layer&lt;/a&gt;: knows how to get your data from the silos
&lt;/p&gt;
&lt;p&gt;
The purpose of the export layer is to reliably fetch and serialize raw data on your disk. It roughly corresponds to the concept of the &lt;a href="sad-infra.html#data_mirror"&gt;'data mirror app'&lt;/a&gt;. 
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
Export scripts deal with the tedious business of authorization, pagination, being tolerant of network errors, etc.

&lt;/span&gt;&lt;aside class="sidenote"&gt;&lt;span style="color:darkgreen;font-weight:bold"&gt;map&lt;/span&gt;: &lt;a href="myinfra.html#exports"&gt;exports&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
Example: the export layer for &lt;a href="https://github.com/karlicoss/endoexport/blob/e322b44ca1e6e5a779b4e7ea49564ba60d425bfe/export.py#L10-L15"&gt;Endomondo data&lt;/a&gt; 
is simply fetching exercise data from the API (using existing library bindings) and prints the JSON out. That's all it does.
&lt;/p&gt;
&lt;p&gt;
In theory, this layer is the only essential one; merely having raw data on your disk enables you to use other tools to explore and analyze your data.
However, long term you'll find yourself doing the same manipulations all over again, which is why we also need:
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a class="link-down" href="#dal"&gt;data access layer (DAL)&lt;/a&gt;: knows how to read your data
&lt;/p&gt;
&lt;p&gt;
For brevity, I'll refer to it as &lt;b&gt;DAL&lt;/b&gt; (Data Abstraction/Access Layer).
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
The purpose of DAL is simply to deserialize whatever the export script dumped and provide minimalistic data bindings.
It shouldn't worry about tokens, network errors, etc., once you have your data on the disk DAL should be able to handle it even when you're offline.

&lt;/span&gt;&lt;aside class="sidenote"&gt;&lt;span style="color:darkgreen;font-weight:bold"&gt;map&lt;/span&gt;: &lt;a href="myinfra.html#dal"&gt;data access layer&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
It's not meant to be too high level; otherwise, you might lose the generality and restrict the bindings in such ways that they leave some users out.
&lt;/p&gt;
&lt;p&gt;
I think it's very reasonable to keep both the export and DAL code close as you don't want serializing and deserializing to go out of sync, so that's what I'm doing in my export tools.
&lt;/p&gt;
&lt;div class="noop" id="dal_messenger"&gt;
&lt;p&gt;
Example: &lt;a href="https://github.com/karlicoss/fbmessengerexport/blob/a8f65a259dfa36ab6d175461994356947ded142a/model.py#L27-L47"&gt;DAL for Facebook Messenger&lt;/a&gt; knows how to read messages from the database on your disk, access certain fields (e.g. message body) and how to handle obscure details like converting timestamps to &lt;samp class="inline"&gt;datetime&lt;/samp&gt; objects. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it's &lt;b&gt;not&lt;/b&gt; trying to get messages from Facebook, which makes it way faster and more reliable to interact with data&lt;/li&gt;
&lt;li&gt;it's &lt;b&gt;not&lt;/b&gt; trying to do anything fancy beyond providing access to the data, which allows keeping it simple and resilient&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
downstream data consumers
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
You could also count it as the third layer, although the boundaries are not very well defined at this stage.

&lt;/span&gt;&lt;aside class="sidenote"&gt;&lt;span style="color:darkgreen;font-weight:bold"&gt;map&lt;/span&gt;: &lt;a href="myinfra.html#mypkg"&gt;my.&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
As an input it takes abstract (i.e. non-raw) data from the DAL and actually does interesting things with it: analysis, visualizations, interactions across different data sources, etc.
&lt;/p&gt;
&lt;p&gt;
For me, it's manifested as &lt;a href="sad-infra.html#mypkg"&gt;a Python package&lt;/a&gt;. I can simply import it in any Python script, and it knows how to read and access any of my data.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Next, I'm going to elaborate on implementing the export layer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="retrieve"&gt;&lt;a class="headerlink" href="#retrieve"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Retrieving data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-retrieve"&gt;
&lt;p&gt;
The first step in exporting and liberating your data is figuring out what and how are you actually supposed to fetch.
&lt;/p&gt;
&lt;p&gt;
I'll mostly refer to Python libraries (since that's what I'm using and most familiar with), but I'm quite sure there are analogs in other languages.
&lt;/p&gt;
&lt;p&gt;
Also remember, this is just to fetch the data! If you get a regular file on your disk as a result, you can use any other programming language you like to access it.
That's the beauty of decoupling.
&lt;/p&gt;
&lt;p&gt;
Here, I won't elaborate much on potential difficulties during exports, as I wrote about them &lt;a href="sad-infra.html#exports_are_hard"&gt;before&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="api_public"&gt;&lt;a class="headerlink" href="#api_public"&gt;¶&lt;/a&gt;public API&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-api_public"&gt;
&lt;p&gt;
You register your app, authorize it, get a token, and you are free to call various endpoints and fetch whatever you want.   
&lt;/p&gt;
&lt;p&gt;
I won't really elaborate on this as if you're reading this you probably have some idea how to use it.
Otherwise, I'm sure there are tutorials out there that would help you.
&lt;/p&gt;
&lt;p&gt;
&lt;span style="color:darkorange"&gt;&lt;strong&gt;if anyone knows of decent ones, please let me know and I'll add links!&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
Examples: thankfully, most services out there offer public API to some extent
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="api_private"&gt;&lt;a class="headerlink" href="#api_private"&gt;¶&lt;/a&gt;private API&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-api_private"&gt;
&lt;p&gt;
Sometimes a service doesn't offer an API. 
But from the service developer's perspective, it's still very reasonable to have one if you've got backend/frontend communication.
&lt;/p&gt;
&lt;p&gt;
So chances are the service just isn't exposing it, but you can spy on the token/cookies in your browser devtools and use them to access the API.
&lt;/p&gt;
&lt;p&gt;
You can read more about handling such data sources here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://willschenk.com/articles/2019/reverse_engineering_apis_using_chrome"&gt;Reverse engineering APIs using Chrome Developer Tools&lt;/a&gt;: an extremely comprehensive and beginner-friendly tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-i-used-python-to-find-interesting-people-on-medium-be9261b924b0"&gt;"How I used Python to find interesting people to follow on Medium"&lt;/a&gt;: an example of reverse engineering Medium API and using devtools&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.tendigi.com/starbucks-should-really-make-their-apis-public-6b64a1c2e923"&gt;Starbucks should really make their API public&lt;/a&gt;: demo of reverse engineering Starbucks Android app, featuring using proxy and forging the signature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Some examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;for &lt;a href="https://github.com/karlicoss/fbmessengerexport"&gt;exporting Messenger data&lt;/a&gt;, I'm using &lt;a href="https://fbchat.readthedocs.io/en/stable"&gt;fbchat&lt;/a&gt; library. It works by tricking Facebook into believing it's a browser and interacting with private API.&lt;/li&gt;
&lt;li&gt;even though Pocket has an API, to get highlights from it you need to &lt;a href="https://github.com/karlicoss/pockexport#setting-up"&gt;spy on the API key&lt;/a&gt; they use in the web app&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="export_scrape"&gt;&lt;a class="headerlink" href="#export_scrape"&gt;¶&lt;/a&gt;scraping&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-export_scrape"&gt;
&lt;p&gt;
Sometimes a service doesn't offer an API, doesn't use it even internally and serves HTML pages directly instead.
Or, reverse engineering the API is so painful scraping becomes a more attractive option.
&lt;/p&gt;
&lt;p&gt;
In addition to the same difficulties you would experience during API exports, there are some extra caveats here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;authorization is harder: you definitely need username/password and potentially even a 2FA token&lt;/li&gt;
&lt;li&gt;DDOS protection: captchas, Cloudflare, etc.&lt;/li&gt;
&lt;li&gt;or even deliberate anti-scraping measures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
For Python the holy grail of scraping is &lt;a href="https://scrapy.org"&gt;scrapy&lt;/a&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="http://sangaline.com/post/advanced-web-scraping-tutorial"&gt;Advanced Web Scraping Tutorial&lt;/a&gt;: bypassing "403 Forbidden", captchas, and more&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/alecxe/fc1527d6d9492b59c610"&gt;self-contained minimum example script to run scrapy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I'm pretty sure there are similar libraries for other languages, perhaps you could start with &lt;a href="https://github.com/lorien/awesome-web-scraping"&gt;awesome-web-scraping repo&lt;/a&gt; or &lt;a href="https://news.ycombinator.com/item?id=15694118"&gt;Ask HN: What are best tools for web scraping?&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
For dealing with authorization, my personal experience is that using a persistent &lt;a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.firefox.firefox_profile"&gt;profile directory&lt;/a&gt; in Selenium is sufficient in most cases: you can login once manually and, reuse the profile in your scripts.
&lt;/p&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;even though Hackernews has an &lt;a href="https://github.com/HackerNews/API"&gt;API for public data&lt;/a&gt;, there is no way of getting your upvotes/saves without scraping HTML.&lt;/li&gt;
&lt;li&gt;Amazon and Paypal have to be &lt;a href="https://github.com/jbms/finance-dl#supported-data-sources"&gt;scraped&lt;/a&gt; if you want your data.&lt;/li&gt;
&lt;li&gt;my bank, HSBC doesn't have an API. Not that I expected it from HSBC, I don't live in a fairy tale; but even their manual transactions exports are in PDF which I have to &lt;a href="https://github.com/karlicoss/hsbc-parser"&gt;parse&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="export_manual"&gt;&lt;a class="headerlink" href="#export_manual"&gt;¶&lt;/a&gt;manual export (GDPR/takeout)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-export_manual"&gt;
&lt;p&gt;
It's great they exist, and it is the easiest way to get your data if you just want a backup.
However it doesn't really help in the long run:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it's very manual: usually requires requesting and clicking on an email link&lt;/li&gt;
&lt;li&gt;it's slow and asynchronous: normally takes at least a few days&lt;/li&gt;
&lt;li&gt;the takeout format usually differs from the API format, &lt;a href="https://www.reddit.com/r/help/comments/8qr9hs/data_request_and_gdpr/e8acolt"&gt;sometimes&lt;/a&gt; ends up as something neither machine friendly nor human friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That said, with some effort it can potentially be automated as well.
&lt;/p&gt;
&lt;p&gt;
They can be useful to get the 'initial' bit of your data, past the &lt;a href="sad-infra.html#data_is_vanishing"&gt;API limits&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://takeout.google.com"&gt;Google Takeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.twitter.com/en/managing-your-account/how-to-download-your-twitter-archive"&gt;Twitter Archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.blog/2018-12-19-download-your-data"&gt;Github&lt;/a&gt; data export&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="export_phone"&gt;&lt;a class="headerlink" href="#export_phone"&gt;¶&lt;/a&gt;phone apps&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-export_phone"&gt;
&lt;p&gt;
I don't have an iPhone, so will only be referring to Android in this section, but I'd imagine the situation is similar.
&lt;/p&gt;
&lt;p&gt;
These days, a service might not even offer a desktop version at all and considering that scraping data off mobile apps is way harder getting it from the phone directly might be an easier option. The data is often kept as an sqlite database which in many ways is even more convenient than an API!
&lt;/p&gt;
&lt;p&gt;
On Android the story is simple: apps keep their data in &lt;samp class="inline"&gt;/data/data/&lt;/samp&gt; directory, which is not accessible unless you &lt;b&gt;root&lt;/b&gt; your phone.
These days, with &lt;a href="https://magiskmanager.com"&gt;magisk&lt;/a&gt; it's considerably easier; however, it's still definitely not something a typical Android user would be able to do. Rooting your phone can bring all sorts of trouble by triggering root detection (e.g. common in banking apps), so be careful. And of course, phones come unrooted for a reason, so do it at your own risk.
&lt;/p&gt;
&lt;p&gt;
Once you have root you can write a script to copy necessary files from &lt;samp class="inline"&gt;/data/data/&lt;/samp&gt; to your target directory, synchronized with your computer (e.g. via &lt;a href="https://play.google.com/store/apps/details?id=com.ttxapps.dropsync&amp;amp;hl=en_GB"&gt;Dropbox&lt;/a&gt; or &lt;a href="https://play.google.com/store/apps/details?id=com.github.catfriend1.syncthingandroid&amp;amp;hl=en_GB"&gt;Syncthing&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you can export Whatsapp data by copying &lt;samp class="inline"&gt;/data/data/com.whatsapp/databases/msgstore.db&lt;/samp&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/karlicoss/promnesia/blob/master/scripts/backup-phone-history.sh"&gt;scripts&lt;/a&gt; for exporting mobile Chrome/Firefox browsing history&lt;/li&gt;
&lt;li&gt;exporting &lt;a href="https://bluemaestro.com"&gt;Bluemaestro&lt;/a&gt; environment sensor data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="export_devices"&gt;&lt;a class="headerlink" href="#export_devices"&gt;¶&lt;/a&gt;devices&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-export_devices"&gt;
&lt;p&gt;
Here I am referring to standalone specific-purpose gadgets like sleep trackers, e-ink readers, etc. The distinguishing thing is the device doesn't have Internet access or doesn't talk to any API.
&lt;/p&gt;
&lt;p&gt;
You've got some options here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
the device is capable of synchronizing with your phone (e.g. via Bluetooth)
&lt;/p&gt;
&lt;p&gt;
It's probably easiest to rely on &lt;a class="link-up" href="#export_phone"&gt;phone app exports&lt;/a&gt; here.
If the sync has to be triggered manually, you can benefit from some &lt;a href="https://play.google.com/store/apps/details?id=com.llamalab.automate&amp;amp;hl=en"&gt;UI automation&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
the device is running Linux and has Internet access
&lt;/p&gt;
&lt;p&gt;
That's often the case with e-ink readers.
&lt;/p&gt;
&lt;p&gt;
You can potentially run the export script on the device itself and send the data somewhere else.
Another option is running an SSH server on the device and pulling data from it, but it's quite extreme.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
the device can mount to a computer
&lt;/p&gt;
&lt;p&gt;
Then, you can use &lt;a href="https://en.wikipedia.org/wiki/Udev"&gt;udev&lt;/a&gt; to trigger export when the device is plugged in.
If udev feels too complicated for you, even a cron script running every minute might be enough.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;using &lt;a href="https://github.com/karlicoss/kobuddy#as-a-backup-tool"&gt;kobuddy&lt;/a&gt; for semiautomatic exports from Kobo e-ink reader&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="types"&gt;&lt;a class="headerlink" href="#types"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Types of exports: a high-level view&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-types"&gt;
&lt;p&gt;
Hopefully, the previous section answered your questions about 'where do I get my data from'.
The next step is figuring out what you actually need to request and how to store it.
&lt;/p&gt;
&lt;p&gt;
Now, let's establish a bit of vocabulary here.
Since data exports by their nature are somewhat similar to &lt;a href="https://en.wikipedia.org/wiki/Backup#Backup_methods"&gt;backups&lt;/a&gt;, I'm borrowing some terminology.
&lt;/p&gt;
&lt;p&gt;
The way I see it, there are three styles of data exports:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="full"&gt;&lt;a class="headerlink" href="#full"&gt;¶&lt;/a&gt;full export&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-full"&gt;
&lt;p&gt;
Every time you want your data, go exhaustively through all the endpoints and fetch the data.
The result is some sort of JSON file (reflecting the complete state of your data) which you can save to disk.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000000"&gt;summary&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;advantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;very straightforward to implement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;disadvantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;might be impossible&lt;/b&gt; due to &lt;a href="sad-infra.html#data_is_vanishing"&gt;API restrictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;takes &lt;b&gt;more resources&lt;/b&gt;, i.e. time/bandwidth/CPU&lt;/li&gt;
&lt;li&gt;takes &lt;b&gt;more space&lt;/b&gt; if you're keeping old versions&lt;/li&gt;
&lt;li&gt;might be &lt;b&gt;flaky&lt;/b&gt; due to excessive network requests&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000001"&gt;examples&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
When would you use that kind of export?
When there isn't much data to retrieve and you can do it in one go.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://github.com/karlicoss/pockexport"&gt;Exporting Pocket data&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
There are no apparent API limitations preventing you from fetching everything, and it seems like a plausible option. Presumably, it's just a matter of transferring a few hundred kilobytes. YMMV though: if you are using it extremely heavily you might want to use a &lt;a class="link-down" href="#synthetic"&gt;synthetic export&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="incremental"&gt;&lt;a class="headerlink" href="#incremental"&gt;¶&lt;/a&gt;incremental export&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-incremental"&gt;
&lt;p&gt;
'Incremental' means that rerunning an export starts from the last persisted point and only fetches missing data.
&lt;/p&gt;
&lt;p&gt;
Implementation wise, it looks like this:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;query previously exported data to determine the point (e.g. timestamp/message id) to continue from&lt;/li&gt;
&lt;li&gt;fetch missing data starting from that point&lt;/li&gt;
&lt;li&gt;merge it back with previously exported data, persist on disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000002"&gt;summary&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;advantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;takes less resources&lt;/li&gt;
&lt;li&gt;more resilient (if done right) as it needs fewer network operations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;disadvantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;potentially very error-prone, harder to implement
&lt;ul class="org-ul"&gt;
&lt;li&gt;if you're not careful with &lt;a href="sad-infra.html#pagination"&gt;pagination&lt;/a&gt; and misinterpret documentation you might never request some data&lt;/li&gt;
&lt;li&gt;if you're not careful with &lt;a href="sad-infra.html#consistency"&gt;transactional logic&lt;/a&gt;, you might leave your export in an inconsistent and corrupt state&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
Incremental exports are &lt;b&gt;always&lt;/b&gt; harder to program. Indeed, &lt;a class="link-up" href="#full"&gt;full export&lt;/a&gt; is just an edge case of an incremental one.

&lt;/span&gt;&lt;aside class="sidenote"&gt;Fun fact: most of your phone apps already implement incremental sync. It's a shame the logic can't be reused.&lt;/aside&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000003"&gt;examples&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
If it's so tricky, why would you bother with exporting data incrementally?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
too much data
&lt;/p&gt;
&lt;p&gt;
This doesn't even mean too much in terms of bandwidth/storage, more of 'too many entities'.
&lt;/p&gt;
&lt;p&gt;
E.g. imagine you want to export your Twitter timeline of 10000 tweets, which is about 1Mb of raw text data.
Even if you account for extra garbage and assume 10 Mb or even 100 Mb of data it's basically nothing if you're running it once a day.
&lt;/p&gt;
&lt;p&gt;
However, APIs usually impose pagination (e.g. 200 tweets per call), so to get these 10000 tweets you might have to do &lt;code class="inline"&gt;10000 / 200 = 50&lt;/code&gt; API calls. 
Suddenly the whole thing feels much less reliable, so you might want to make it incremental in order to minimize the number of network calls.
&lt;/p&gt;
&lt;p&gt;
For example:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/fabianonline/telegram_backup"&gt;Telegram&lt;/a&gt;/&lt;a href="https://github.com/karlicoss/fbmessengerexport"&gt;Messenger&lt;/a&gt;/Whatsapp – basically IM always means there's too much data to be exported at once&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
flaky/slow API
&lt;/p&gt;
&lt;p&gt;
If it's the case you want to minimize network interaction.
&lt;/p&gt;
&lt;p&gt;
For example:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-up" href="#export_scrape"&gt;web scraping&lt;/a&gt; is always somewhat slow; in addition, you might have to rate limit yourself so you don't get banned by DDOS prevention.
Also, it's even flakier than using APIs, so you might want to avoid extra work if possible.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shop-eu.emfit.com/products/emfit-qs"&gt;Emfit QS&lt;/a&gt; sleep data: API is a bit flaky, so I minimize network interaction by only fetching missing data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="synthetic"&gt;&lt;a class="headerlink" href="#synthetic"&gt;¶&lt;/a&gt;synthetic export&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-synthetic"&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
This is a blend between full export and incremental export.   

&lt;/span&gt;&lt;aside class="sidenote"&gt;If someone thinks of a better term for describing this concept, please let me know!&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
It's similar to a full export in the sense that there isn't that much data to retrieve: if you could, you would just fetch it in one go.
&lt;/p&gt;
&lt;p&gt;
What makes it similar to the incremental export is that you don't have all the data available at once - only the latest chunk.
The main motivation for a synthetic export is that no single export file will give you all of the data.
&lt;/p&gt;
&lt;p&gt;
There are various reasons for that:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
API restrictions
&lt;/p&gt;
&lt;p&gt;
Many APIs restrict the number of items you can retrieve through each endpoint for caching and performance reasons.
&lt;/p&gt;
&lt;p&gt;
Example: &lt;a href="https://github.com/karlicoss/rexport#limitations"&gt;Reddit&lt;/a&gt; limits your API queries to 1000 entries.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Limited memory
&lt;/p&gt;
&lt;p&gt;
Example: autonomous devices like HR monitors or temperature monitors are embedded systems with limited memory.
&lt;/p&gt;
&lt;p&gt;
Typically, they use some kind of &lt;a href="https://en.wikipedia.org/wiki/Circular_buffer"&gt;ring buffer&lt;/a&gt; so when you export data, you only get, say, the latest 10000 measurements.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Disagreement on the 'state' of the system
&lt;/p&gt;
&lt;p&gt;
Example: Kobo reader uses an &lt;a href="https://github.com/karlicoss/kobuddy"&gt;sqlite database&lt;/a&gt; for keeping metadata like highlights, which is awesome!
However, when you delete the book from your reader, it removes your annotations and highlights from the database too.
&lt;/p&gt;
&lt;p&gt;
There is absolutely no reason to do this: I delete the book because I don't need it on my reader, not because I want to get rid of the annotations.
So in order to have all of them my only option is having regular database snapshots and assembling the full database from these pieces.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Security
&lt;/p&gt;
&lt;p&gt;
Example: &lt;a href="https://docs.monzo.com/#list-transactions"&gt;Monzo bank API&lt;/a&gt;. 
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
After a user has authenticated, your client can fetch all of their transactions, and after 5 minutes, it can only sync the last 90 days of transactions. If you need the user’s entire transaction history, you should consider fetching and storing it right after authentication. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
So that means that unless you're happy with manually authorizing every time you export, you will only have access to the last 90 days of transactions.
&lt;/p&gt;
&lt;p&gt;
Note: I feel kind of sorry complaining at Monzo, considering they are the nicest guys out there in terms of being dev friendly; and I understand the security concerns.
But that's the only example of such behavior I've seen so far, and it does complicate things.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
One important difference from other types of exports is that you &lt;b&gt;have to&lt;/b&gt; do them regularly/often enough.
Otherwise you inevitably miss some data and in the best case scenario have to get it &lt;a class="link-up" href="#export_manual"&gt;manually&lt;/a&gt;, or in the worst case &lt;a href="./takeout-data-gone.html"&gt;lose it forever&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Now, you could deal with these complications the same way you would with incremental exports by retrieving the missing data only.
The &lt;b&gt;crucial difference&lt;/b&gt; is that if you do make a mistake in the logic, it's not just a matter of waiting to re-download everything. 
Some of the data might be gone &lt;b&gt;forever&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
So I take a hybrid approach instead:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
at &lt;a class="link-down" href="#export_layer"&gt;export time&lt;/a&gt;, retrieve all the data I can and keep it along with a timestamp, like a &lt;a class="link-up" href="#full"&gt;full export&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Basically, it makes it an 'append-only system', so there is no opportunity for losing data.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
at &lt;a class="link-down" href="#dal"&gt;data access time&lt;/a&gt;, we dynamically build (synthesize) the full state of the data
&lt;/p&gt;
&lt;p&gt;
We go through all exported data chunks and reconstruct the full state, similarly to &lt;a class="link-up" href="#incremental"&gt;incremental export&lt;/a&gt;.
That's where 'synthetic' comes from.
&lt;/p&gt;
&lt;p&gt;
The 'full export' only exists at runtime, and errors in merging logic are not problematic as you never overwrite data.
If you do spot a problem you only have to change the code with no need for data migrations.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000004"&gt;illustrative example&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I feel like the explanations are a bit abstract, so let's consider a specific scenario.
&lt;/p&gt;
&lt;p&gt;
Say you've got a temperature sensor that takes a measurement every minute and keeps it in its internal database.
It's only got enough memory for 2000 datapoints so you have to grab data from it every day, otherwise the older measurements would be overwritten (it's implemented as a ring buffer).
&lt;/p&gt;
&lt;p&gt;
It seems like a perfect fit for synthetic export. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
export layer: every day you run a script that connects to the sensor and copies the database onto your computer
&lt;/p&gt;
&lt;p&gt;
That's it, it doesn't do anything more complicated than that.
The whole process is atomic, so if Bluetooth connection fails, we can simply retry until we succeed without having to worry about the details.
&lt;/p&gt;
&lt;p&gt;
As a result, we get a bunch of files like:
&lt;/p&gt;
&lt;pre class="example"&gt;# ls /data/temperature/*.db
...
20190715100026.db
20190716100138.db
20190717101651.db
20190718100118.db
20190719100701.db
...
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
data access layer: go through all chunks and construct the full temperature history
&lt;/p&gt;
&lt;p&gt;
E.g. it would look kind of like:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;def&lt;/span&gt; &lt;span class="org-function-name"&gt;measurements&lt;/span&gt;() -&amp;gt; Iterator[&lt;span class="org-builtin"&gt;float&lt;/span&gt;]:
    processed: &lt;span class="org-variable-name"&gt;Set&lt;/span&gt;[datetime] = &lt;span class="org-builtin"&gt;set&lt;/span&gt;()
    &lt;span class="org-keyword"&gt;for&lt;/span&gt; db &lt;span class="org-keyword"&gt;in&lt;/span&gt; &lt;span class="org-builtin"&gt;sorted&lt;/span&gt;(Path(&lt;span class="org-string"&gt;'/data/temperature'&lt;/span&gt;).glob(&lt;span class="org-string"&gt;'*.db'&lt;/span&gt;)):
        &lt;span class="org-keyword"&gt;for&lt;/span&gt; timestamp, value &lt;span class="org-keyword"&gt;in&lt;/span&gt; query(db, &lt;span class="org-string"&gt;'SELECT * FROM measurements'&lt;/span&gt;):
            &lt;span class="org-keyword"&gt;if&lt;/span&gt; timestamp &lt;span class="org-keyword"&gt;in&lt;/span&gt; processed:
                &lt;span class="org-keyword"&gt;continue&lt;/span&gt;
            processed.add(timestamp)
            &lt;span class="org-keyword"&gt;yield&lt;/span&gt; value
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
I hope it's clear how much easier this is compared with maintaining some sort of master sqlite database and updating it.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000005"&gt;summary&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;advantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;much easier way to achieve incremental exports without having to worry about introducing inconsistencies&lt;/li&gt;
&lt;li&gt;&lt;b&gt;very resilient&lt;/b&gt;, against pretty much everything: deleted content, data corruption, flaky APIs, programming errors&lt;/li&gt;
&lt;li&gt;&lt;b&gt;straightforward&lt;/b&gt; to normalize and unify – you are not overwriting anything&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;disadvantages
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
takes &lt;b&gt;extra space&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
That said, storage shouldn't be that much of a concern unless you export &lt;b&gt;very&lt;/b&gt; often.
I elaborate on this problem &lt;a class="link-down" href="#disk_space"&gt;later in the post&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;overhead&lt;/b&gt; at access time
&lt;/p&gt;
&lt;p&gt;
When we access the data we have to merge all snapshots every time. I'll elaborate on this &lt;a class="link-down" href="#dal_performance"&gt;later as well&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000006"&gt;more examples&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Github API is restricted to 300 latest events, so synthetic logic is used in &lt;a href="https://github.com/karlicoss/ghexport/blob/master/dal.py"&gt;ghexport&lt;/a&gt; tool&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Reddit API is restricted to 1000 items, so synthetic logic is used in &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/dal.py#L136"&gt;rexport&lt;/a&gt; tool
&lt;/p&gt;
&lt;p&gt;
I elaborate on Reddit &lt;a href="unnecessary-db.html#example_reddit"&gt;here&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Chrome only keeps 90 days of browsing history in its database
&lt;/p&gt;
&lt;p&gt;
&lt;a href="unnecessary-db.html#chrome_dal"&gt;Here&lt;/a&gt; I write in detail about why synthetic exports make a lot of sense for Chrome.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="export_layer"&gt;&lt;a class="headerlink" href="#export_layer"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Export layer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-export_layer"&gt;
&lt;p&gt;
&lt;span style="color:darkgreen; font-weight: bolder"&gt;Map:&lt;/span&gt; &lt;a href="myinfra.html#exports"&gt;export layer&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
No matter which &lt;a class="link-up" href="#types"&gt;of these&lt;/a&gt; ways you have to use to export your data, there are some common difficulties, hence patterns that I'm going to explore in this section.
&lt;/p&gt;
&lt;p&gt;
Just a quick reminder of &lt;a href="sad-infra.html#exports_are_hard"&gt;the problems&lt;/a&gt; that we're dealing with:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;authorization: how to log in?&lt;/li&gt;
&lt;li&gt;pagination: how to query the data correctly?&lt;/li&gt;
&lt;li&gt;consistency: how to make sure we assemble the full view of data correctly without running into concurrency issues?&lt;/li&gt;
&lt;li&gt;rate limits: how to respect the service's policies and avoid getting banned?&lt;/li&gt;
&lt;li&gt;error handling: how to be defensive enough without making the code too complicated?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My guiding principle is: during the export, do the &lt;b&gt;absolute minimum&lt;/b&gt; work required to reliably get raw data on your disk.
This is kind of vague (perhaps even obvious), so I will try to elaborate on what I mean by that.
&lt;/p&gt;
&lt;p&gt;
This section doesn't cover the exact details, it's more of a collection of tips for minimizing the work and boilerplate. If you are interested in reading the code, &lt;a href="https://github.com/search?type=Repositories&amp;amp;q=user%3Akarlicoss+++topic%3Aexport"&gt;here&lt;/a&gt; are some of the export scripts and tools I've implemented.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="bindings"&gt;&lt;a class="headerlink" href="#bindings"&gt;¶&lt;/a&gt;use existing bindings&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-bindings"&gt;
&lt;p&gt;
This may be obvious, but I still feel it has to be said.
Unless retrieving data is trivial (i.e. single GET request), chances that someone has already invested effort in dealing with various API quirks.
Bindings often deal with dirty details like rate limiting, retrying, pagination, etc. So if you're lucky you might end up spending very little effort on actually exporting data.
&lt;/p&gt;
&lt;p&gt;
If there is something in bindings you don't like or lack, it's still easier to &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;monkey patch&lt;/a&gt; or just fork and patch them up (don't forget to open a pull request later!).
&lt;/p&gt;
&lt;p&gt;
Also if you're the author of bindings, I have some requests. Please:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;don't print in stdout, it's a pain to filter out and suppress. Ideally use proper logging modules&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
don't be overly defensive, or allow to &lt;a href="mypy-error-handling.html#global_policy"&gt;configure&lt;/a&gt; non-defensive behavior
&lt;/p&gt;
&lt;p&gt;
It's quite sad when the library silently catches all exceptions and replaces them with empty strings/nulls/etc., without you even suspecting it.
It's especially problematic in Python, where "Ask forgiveness, not permission" is very common.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
expose raw underlying data (e.g. raw JSON/XML from the API)
&lt;/p&gt;
&lt;p&gt;
If you forget to handle something, or the user disagrees with the interpretation of data, they would still be able to benefit from the data bindings for retrieval and only alter the deserialization.
&lt;/p&gt;
&lt;p&gt;
Example of good data object:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/pawelad/pymonzo/blob/b5c8d4f46dcb3a2f475797a8b8ef1c15f6493fb9/src/pymonzo/api_objects.py#L38-L45"&gt;pymonzo&lt;/a&gt; exposes programmer-friendly fields and also keeps raw data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
expose generic methods for handling API calls to make it easy to add new endpoints
&lt;/p&gt;
&lt;p&gt;
Same argument: if you forgot to handle some API calls, it makes it much easier for consumers to quickly add them.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000007"&gt;examples&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
To export &lt;a href="https://github.com/karlicoss/hypexport"&gt;Hypothes.is&lt;/a&gt; data I'm using existing &lt;a href="https://github.com/judell/Hypothesis"&gt;judell/Hypothesis&lt;/a&gt; bindings.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the bindings handle &lt;a href="https://github.com/judell/Hypothesis/blob/91f881693546aaddc4096327a97f5cf342c3770a/hypothesis.py#L69"&gt;pagination and rate limits&lt;/a&gt; for you&lt;/li&gt;
&lt;li&gt;the bindings return raw JSONs, making it trivial to serialize the data on disk&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
the bindings expose generic &lt;a href="https://github.com/judell/Hypothesis/blob/91f881693546aaddc4096327a97f5cf342c3770a/hypothesis.py#L138"&gt;&lt;code class="inline"&gt;authenticated_api_query&lt;/code&gt;&lt;/a&gt; method
&lt;/p&gt;
&lt;p&gt;
For instance, profile data request was missing from the bindings; and it was &lt;a href="https://github.com/karlicoss/hypexport/blob/7a80b36aa55da8b541e2778141eb84ada384d734/hypexport.py#L14"&gt;trivial&lt;/a&gt; to get it anyway 
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Thanks to good bindings, the actual export is pretty &lt;a href="https://github.com/karlicoss/hypexport/blob/7a80b36aa55da8b541e2778141eb84ada384d734/hypexport.py#L6-L19"&gt;trivial&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Another example: to export &lt;a href="https://github.com/karlicoss/rexport/blob/master/export.py"&gt;Reddit data&lt;/a&gt;, I'm using &lt;a href="https://github.com/praw-dev/praw"&gt;praw&lt;/a&gt;, an excellent library for accessing Reddit from Python.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;praw handles rate limits and pagination&lt;/li&gt;
&lt;li&gt;praw exposes a logger, which makes it easy to &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/export.py#L107"&gt;control it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;praw supports all endpoints, so exporting data is just a matter of &lt;a href="https://github.com/karlicoss/rexport/blob/d001e2d07d716130106ebe07a021f98d84a5ed93/rexport.py#L73-L84"&gt;calling the right API methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
one shortcoming of praw though is that it won't give you access to raw JSON data for some reason, so we have to use some &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/export.py#L37-L60"&gt;hacky logic&lt;/a&gt; to serialize.
&lt;/p&gt;
&lt;p&gt;
If praw kept original data from the API, the &lt;a href="https://github.com/karlicoss/rexport/blob/master/export.py"&gt;code for export&lt;/a&gt; would be half as long.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="keep_raw"&gt;&lt;a class="headerlink" href="#keep_raw"&gt;¶&lt;/a&gt;don't mess with the raw data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-keep_raw"&gt;
&lt;p&gt;
Keep the data you retrieved &lt;b&gt;as intact as possible&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
That means:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;don't insert it in in a database, unless it's really necessary&lt;/li&gt;
&lt;li&gt;don't convert formats (e.g. JSON to XML)&lt;/li&gt;
&lt;li&gt;don't try to clean up and normalize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Instead, &lt;b&gt;keep the exporter code simple&lt;/b&gt; and don't try to interpret data in it.
Move data interpretation burden to the &lt;a class="link-down" href="#dal"&gt;data access layer&lt;/a&gt; instead.
&lt;/p&gt;
&lt;p&gt;
The rationale here is it's a potential source of inconsistencies. If you make a bug during data conversion, you might end corrupting your data forever.
&lt;/p&gt;
&lt;p&gt;
I'm elaborating on this point &lt;a href="unnecessary-db.html#asis"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="defensive"&gt;&lt;a class="headerlink" href="#defensive"&gt;¶&lt;/a&gt;don't  be too defensive&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-defensive"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;never silently fallback on default values in case of errors, unless you're really certain about what you're doing&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
don't add retry logic just in case
&lt;/p&gt;
&lt;p&gt;
In my experience, it's fair to assume that if the export failed, it's a random server-side glitch and not worth fine-tuning - it's easier to simply start the export all over again.
I'm not dealing with that in the individual export scripts at all, and using &lt;a class="link-down" href="#arctee"&gt;arctee&lt;/a&gt;, to retry exports automatically.
&lt;/p&gt;
&lt;p&gt;
If you know what you're doing (e.g. some endpoint is notoriously flaky) and do need retries, I recommend using an existing library that handles that like &lt;a href="https://github.com/litl/backoff#examples"&gt;backoff&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="credentials"&gt;&lt;a class="headerlink" href="#credentials"&gt;¶&lt;/a&gt;allow reading credentials from a file&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-credentials"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you don't want them in your shell history or in crontabs&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
keeping them in a file can potentially allow for fine access control
&lt;/p&gt;
&lt;p&gt;
E.g. with Unix permissions you could only allow certain scripts to read secrets.
Note that I'm not a security expert and would be interested to know if there are better solutions to that
&lt;/p&gt;
&lt;p&gt;
Personally, I found it so boilerplaty I extracted this logic to a separate &lt;a href="https://github.com/karlicoss/instapexport/blob/master/export_helper.py"&gt;helper module&lt;/a&gt;. You can find an example &lt;a href="https://github.com/karlicoss/instapexport#exporting"&gt;here&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="storage"&gt;&lt;a class="headerlink" href="#storage"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; How to store it: organizing data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-storage"&gt;
&lt;p&gt;
&lt;span style="color:darkgreen; font-weight: bolder"&gt;Map:&lt;/span&gt; &lt;a href="myinfra.html#fs"&gt;filesystem&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
As I mentioned, for the most part I'm just keeping the raw API data.
For storage I'm just using the filesystem; all exports are kept or symlinked in the same directory (&lt;code class="inline"&gt;/exports&lt;/code&gt;) for ease of access:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;find /exports/ | sort | head -n 20 | tail -n 7
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;/exports/feedbin
/exports/feedly
/exports/firefox-history
/exports/fitbit
/exports/github
/exports/github-events
/exports/goodreads
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="timestamps"&gt;&lt;a class="headerlink" href="#timestamps"&gt;¶&lt;/a&gt;naming and timestamping&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-timestamps"&gt;
&lt;p&gt;
I find that the only important bit is if you keep multiple export files (e.g. &lt;a class="link-up" href="#synthetic"&gt;synthetic&lt;/a&gt;), make sure their names include timestamps and the time order is consistent with lexicographic order.
&lt;/p&gt;
&lt;p&gt;
This means the only acceptable date/time format is some variation of &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;&lt;code class="inline"&gt;YYYY MM DD HH MM SS Z&lt;/code&gt;&lt;/a&gt;. 
Feel free to sprinkle in any separators you like, or use milliseconds if you are really serious. Any other date format, e.g. &lt;samp class="inline"&gt;MM/DD/YY&lt;/samp&gt;, using month names, or not using zero-padded numbers is going to bring you serious grief.
&lt;/p&gt;
&lt;p&gt;
E.g.:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;ls /exports/instapaper/ | tail -n 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;instapaper_20200101T000005Z.json
instapaper_20200101T040004Z.json
instapaper_20200101T080010Z.json
instapaper_20200101T120005Z.json
instapaper_20200101T160011Z.json
&lt;/pre&gt;
&lt;p&gt;
The reason is it's automatically sort/max friendly, which massively reduces the cognitive load when working with data.
&lt;/p&gt;
&lt;p&gt;
To make timestamping automatic and less boilerplaty, I'm using a &lt;a class="link-down" href="#arctee"&gt;wrapper script&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="backups"&gt;&lt;a class="headerlink" href="#backups"&gt;¶&lt;/a&gt;backups&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-backups"&gt;
&lt;p&gt;
Backups are trivial: I can just run &lt;a href="https://borgbackup.readthedocs.io/en/stable"&gt;borg&lt;/a&gt; against &lt;samp class="inline"&gt;/exports&lt;/samp&gt;.
What is more, borg is deduplicating, so it's very friendly to incremental and synthetic exports.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="sync"&gt;&lt;a class="headerlink" href="#sync"&gt;¶&lt;/a&gt;synchronizing between computers&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-sync"&gt;
&lt;p&gt;
I synchronize/replicate it across my computers with Syncthing, also used Dropbox in the past.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="disk_space"&gt;&lt;a class="headerlink" href="#disk_space"&gt;¶&lt;/a&gt;disk space concerns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-disk_space"&gt;
&lt;p&gt;
Some back of the envelope math arguing it shouldn't be a concern for you:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;the amount of data you generate grows linearly. That means that running exports periodically would take 'quadratic' space&lt;/li&gt;
&lt;li&gt;with time, your available storage grows exponentially (and only gets cheaper)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hopefully that's convincing, but if this is an issue it can also be addressed with compression or even using deduplicating backup software like &lt;a href="https://borgbackup.readthedocs.io/en/stable"&gt;borg&lt;/a&gt;. Keep in mind that would come at the cost of slowing down access, which may be helped with caching.
&lt;/p&gt;
&lt;p&gt;
I don't even bother compressing most of my exports, except for the few which &lt;a class="link-down" href="#arctee"&gt;arctee wrapper&lt;/a&gt; handles.
&lt;/p&gt;
&lt;p&gt;
There are also ways to benefit from compression without having to do it explicitly:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
keeping data under borg and using &lt;a href="https://borgbackup.readthedocs.io/en/stable/usage/mount.html"&gt;&lt;samp class="inline"&gt;borg mount&lt;/samp&gt;&lt;/a&gt; to access it.
&lt;/p&gt;
&lt;p&gt;
You get deduplication for free, however this makes exporting and accessing data much more obscure. In addition, &lt;samp class="inline"&gt;borg mount&lt;/samp&gt; locks the repository so it's going to be read-only while you access it.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
using a filesystem capable of compressing on the fly
&lt;/p&gt;
&lt;p&gt;
E.g. &lt;a href="https://serverfault.com/questions/740456/lightweight-transparent-compression-filesystem"&gt;ZFS/BTRFS&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It seems straightforward enough, thought non-standard file systems might be incompatible with some software, e.g. &lt;a href="https://www.linuxuprising.com/2018/11/how-to-use-dropbox-on-non-ext4.html"&gt;Dropbox&lt;/a&gt;.
I haven't personally tried it.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="dal"&gt;&lt;a class="headerlink" href="#dal"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Data access layer (DAL)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-dal"&gt;
&lt;p&gt;
&lt;span style="color:darkgreen; font-weight: bolder"&gt;Map:&lt;/span&gt; &lt;a href="myinfra.html#dal"&gt;data access layer&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
As I &lt;a class="link-up" href="#design"&gt;mentioned&lt;/a&gt;, all that DAL does is maps raw data (saved on the disk by the &lt;a class="link-up" href="#export_layer"&gt;export layer&lt;/a&gt;) onto abstract objects making it easier to work with in your programs. "Layer" sounds a bit intimidating and enterprisy but usually it's just a single short script.
&lt;/p&gt;
&lt;p&gt;
It's meant to deal with data cleanup, normalization, etc. Doing this at runtime rather than during the export makes it easier to work around data issues, allows experimentation, and is more forgiving if you make some bugs.
&lt;/p&gt;
&lt;p&gt;
  As I mentioned in the &lt;a class="link-up" href="#design"&gt;design principles&lt;/a&gt;, I'm trying to keep data retrieval code and data access code separate
since they serve very different purposes and deal with very different errors.
&lt;/p&gt;
&lt;p&gt;
Just as a reminder what we get as a result:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
resilience
&lt;/p&gt;
&lt;p&gt;
Accessing and working with data on your disk is considerably easier and faster than using APIs.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
offline
&lt;/p&gt;
&lt;p&gt;
You only access data on your disk, which makes you completely independent on the Internet.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
modularity and decoupling: you can use separate tools (even written in different programming languages) for retrieving and accessing data
&lt;/p&gt;
&lt;p&gt;
That's very important, so we all can benefit from existing code and reinventing less wheels.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
backups
&lt;/p&gt;
&lt;p&gt;
Keeping raw data makes them trivial
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="dal_performance"&gt;&lt;a class="headerlink" href="#dal_performance"&gt;¶&lt;/a&gt;performance concerns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-dal_performance"&gt;
&lt;p&gt;
A natural question is: if you run through all your data snapshots each time you access it, wouldn't it be too slow?
&lt;/p&gt;
&lt;p&gt;
First, it's somewhat similar to the worries about the &lt;a class="link-up" href="#disk_space"&gt;disk space&lt;/a&gt;. Data grows at the quadratic rate; and while processing power doesn't seem to follow Moore's law anymore there is still some potential to scale horizontally and use multiple threads. In practice, for most data sources that I use this process is almost instantaneous without parallelizing anyway.
&lt;/p&gt;
&lt;p&gt;
In addition:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;if you're using iterators/generators/coroutines (e.g. &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/dal.py#L130-L136"&gt;example&lt;/a&gt;), that overhead will be amortized and basically unnoticeable&lt;/li&gt;
&lt;li&gt;you can still use caching. Just make sure it doesn't involve boilerplate or cognitive overhead to use. E.g. &lt;a href="unnecessary-db.html#cachew_cachew"&gt;cachew&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="dal_examples"&gt;&lt;a class="headerlink" href="#dal_examples"&gt;¶&lt;/a&gt;examples&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-dal_examples"&gt;
&lt;div class="noop" id="dal_messenger"&gt;
&lt;p&gt;
Example: &lt;a href="https://github.com/karlicoss/fbmessengerexport/blob/a8f65a259dfa36ab6d175461994356947ded142a/model.py#L27-L47"&gt;DAL for Facebook Messenger&lt;/a&gt; knows how to read messages from the database on your disk, access certain fields (e.g. message body) and how to handle obscure details like converting timestamps to &lt;samp class="inline"&gt;datetime&lt;/samp&gt; objects. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;it's &lt;b&gt;not&lt;/b&gt; trying to get messages from Facebook, which makes it way faster and more reliable to interact with data&lt;/li&gt;
&lt;li&gt;it's &lt;b&gt;not&lt;/b&gt; trying to do anything fancy beyond providing access to the data, which allows keeping it simple and resilient&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;
You can find more specific examples along with the motivation and explanations here:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="unnecessary-db.html#example_reddit"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="unnecessary-db.html#relational"&gt;Instapaper/Endomondo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="unnecessary-db.html#maintaining"&gt;Pocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="unnecessary-db.html#example_chrome"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="automatic_exports"&gt;&lt;a class="headerlink" href="#automatic_exports"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Automating exports&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-automatic_exports"&gt;
&lt;p&gt;
In my opinion, it's absolutely essential to automate data exports when possible. 
You really don't want to think about it and having a recent version of your data motivates you to actually use it, otherwise there is much less utility.
&lt;/p&gt;
&lt;p&gt;
In addition, it serves as a means of backup, so you don't have to worry about what happens if the service ceases to exist.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="scheduling"&gt;&lt;a class="headerlink" href="#scheduling"&gt;¶&lt;/a&gt;scheduling&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-scheduling"&gt;
&lt;p&gt;
I run most of my data exports at least daily.
&lt;/p&gt;
&lt;p&gt;
I wrote a whole &lt;a href="scheduler.html"&gt;post&lt;/a&gt; on scheduling and job running with respect to the personal infrastructure. In short:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
on desktop: at the moment, I'm mostly using cron (to be more specific, &lt;a href="scheduler.html#fcron"&gt;fcron&lt;/a&gt;).
&lt;/p&gt;
&lt;p&gt;
I'm still &lt;a href="scheduler.html#solution"&gt;thinking&lt;/a&gt; of an alternative, but overall using cron is okay.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;on Android phone: &lt;a href="scheduler.html#phone"&gt;I'm using Automate app and cron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="arctee"&gt;&lt;a class="headerlink" href="#arctee"&gt;¶&lt;/a&gt;arctee&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-arctee"&gt;
&lt;p&gt;
This is a &lt;a href="https://github.com/karlicoss/arctee"&gt;wrapper script&lt;/a&gt; I'm using to run most of my data exports.
&lt;/p&gt;
&lt;p&gt;
Many things are very common to all data exports, regardless of the source.
In the vast majority of cases, you want to fetch some data, save it in a file (e.g. JSON) along with a timestamp and potentially compress it.
&lt;/p&gt;
&lt;p&gt;
This script aims to minimize the common boilerplate:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;samp class="inline"&gt;path&lt;/samp&gt; argument allows easy ISO8601 timestamping and guarantees atomic writing, so you'd never end up with corrupted exports.&lt;/li&gt;
&lt;li&gt;&lt;samp class="inline"&gt;--compression&lt;/samp&gt; allows to compress simply by passing the extension. No more &lt;samp class="inline"&gt;tar -zcvf&lt;/samp&gt;!&lt;/li&gt;
&lt;li&gt;&lt;samp class="inline"&gt;--retries&lt;/samp&gt; allows easy exponential backoff in case service you're querying is flaky.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Example:
&lt;/p&gt;
&lt;pre class="example"&gt;arctee '/exports/rtm/{utcnow}.ical.zstd' --compression zstd --retries 3 -- /soft/export/rememberthemilk.py
&lt;/pre&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
runs &lt;samp class="inline"&gt;/soft/export/rememberthemilk.py&lt;/samp&gt;, retrying it up to three times if it fails
&lt;/p&gt;
&lt;p&gt;
The script is expected to dump its result in stdout; stderr is simply passed through.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;once the data is fetched it's compressed as &lt;samp class="inline"&gt;zstd&lt;/samp&gt;&lt;/li&gt;
&lt;li&gt;timestamp is computed and compressed data is written to &lt;samp class="inline"&gt;/exports/rtm/20200102T170015Z.ical.zstd&lt;/samp&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The wrapper operates on regular files and is therefore, programming language agnostic as long as your export script simply outputs to stdout (or accepts a filename, so you can use &lt;samp class="inline"&gt;/dev/stdout&lt;/samp&gt;). It doesn't really matter how exactly (e.g. which programming language) it's implemented.
&lt;/p&gt;
&lt;p&gt;
That said, it feels kind of wrong having an extra script for all these things since they are not hard in principle, just tedious and boring to do all over again. If anyone has bright ideas on simplifying this, I'd be happy to know!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
Approaches that I described here have worked pretty well for me so far. It feels fairly composable, flexible and easy to maintain.
&lt;/p&gt;
&lt;p&gt;
I'm sharing this because I would &lt;b&gt;really&lt;/b&gt; like to make it accessible to more people, so they can also benefit from using their data.
&lt;/p&gt;
&lt;p&gt;
I'd be happy to hear any suggestions on simplifying and improving the system!
&lt;/p&gt;
&lt;p&gt;
Big thanks to &lt;a href="https://jborichevskiy.com"&gt;Jonathan&lt;/a&gt; for reading the draft and suggesting helpful edits.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#dataliberation"&gt;#dataliberation&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;13 February 2020&lt;/div&gt;
    &lt;/section&gt;
    

    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_exports" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/exports.html" rel="alternate"/>
    <published>2020-02-13T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/unnecessary-db.html</id>
    <title>Against unnecessary databases</title>
    <updated>2020-01-26T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra dataliberation databases cachew" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Against unnecessary databases | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/unnecessary-db.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/unnecessary-db.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Against unnecessary databases | beepb00p" property="og:title"/&gt;
        &lt;meta content="Parse, don't normalize" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Against unnecessary databases&lt;/h1&gt;
    &lt;div class="summary"&gt;Parse, don't normalize
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
In my previous post about the &lt;a href="my-data.html"&gt;data I collect&lt;/a&gt;, I mentioned numerous scripts I implemented, to export my personal data from the cloud, locally.
&lt;/p&gt;
&lt;p&gt;
In this post, I want to start sharing some of the design principles I discovered for making these scripts &lt;b&gt;robust, generic and flexible&lt;/b&gt;.
This is part of a series on building your own &lt;a href="sad-infra.html#data_mirror"&gt;'data mirror'&lt;/a&gt;, and there are also more posts to follow!
&lt;/p&gt;
&lt;p&gt;
Once you've managed to get through &lt;a href="sad-infra.html#exports_are_hard"&gt;various difficulties&lt;/a&gt; and retrieve your data from the cloud, you want to persist it on the disk.
&lt;/p&gt;
&lt;p&gt;
If the exported data is already in an sqlite database, that's great (lucky you!). Keep it and don't let go 🙃
&lt;/p&gt;
&lt;p&gt;
Typically though, you end up with some JSON/XML from the API, or HTML if you had to scrape. After that, you have a choice:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
keep it as is 
&lt;/p&gt;
&lt;p&gt;
This is the simplest thing to do and also the approach &lt;a class="link-down" href="#asis"&gt;I advocate for&lt;/a&gt;.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
during export, keep the data on disk as is
&lt;/p&gt;
&lt;p&gt;
No matter how you dislike the format; just store it.
E.g. if it was an XML, let it be XML. If you scraped an HTML, just keep it as is.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
to access the data, implement bindings on your favorite programming language that extract the necessary bits in runtime
&lt;/p&gt;
&lt;p&gt;
I elaborate more on it &lt;a class="link-down" href="#asis"&gt;later&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If this is obvious to you, then great, hope you will learn something useful from this post nevertheless!
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
keep it in a database
&lt;/p&gt;
&lt;p&gt;
This is what I see some projects doing; I also bruised myself with this approach when I started exporting my data.
&lt;/p&gt;
&lt;p&gt;
Come up with a database schema and create a &lt;b&gt;"master database"&lt;/b&gt;, holding all of your past data.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;during export, extract the necessary data from XML/JSON/whatever and put it in the database.&lt;/li&gt;
&lt;li&gt;to access the data, query the database directly or implement data bindings on your favorite programming language.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In this post, &lt;b&gt;I want to argue very strongly against forcing the data in the database, unless it's really inevitable&lt;/b&gt;.
More broadly, this also applies to any attempts of normalizing data before persisting it, even if it's not a database.
&lt;/p&gt;
&lt;p&gt;
Now before someone thinks I'm some sort of weirdo database hater, I want to make some things clear!
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
this article refers to storing &lt;b&gt;your own personal data and digital trace&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
In general, there absolutely are cases where using a database is the only feasible and reasonable way of keeping and accessing data.
However, the amounts of data involved are quite different too.  
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I want to argue about this not because I don't like databases/SQL or any other personal preferences
&lt;/p&gt;
&lt;p&gt;
Quite the opposite, &lt;b&gt;I wish I could run SQL queries against Instapaper's or Twitter's servers&lt;/b&gt;. Needless to say, it's &lt;a href="sad-infra.html#why"&gt;not quite the way things work&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I want to argue on this point because I feel like an unnecessary use of databases is a source of friction for implementing, and more importantly, maintaining your personal data exports, and &lt;a class="link-down" href="#api_extended"&gt;restricts you&lt;/a&gt; from using your data to the full capacity when you want it.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My main claim is that for personal data, databases have benefits as a means of &lt;b&gt;intermediate&lt;/b&gt; storage, for caching, and as &lt;b&gt;one of&lt;/b&gt; the interfaces to your data, but &lt;b&gt;not as the primary&lt;/b&gt; storage of exported data.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#asis"&gt;1. What do you suggest?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#example_reddit"&gt;example: Reddit export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#databases_good"&gt;2. Databases are good&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#space"&gt;take less space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#performance"&gt;efficient data access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sql"&gt;query language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rows"&gt;SQL rows are a better 'data interface' than JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#constraints"&gt;types and constraints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#easy_bindings"&gt;easy to map onto any language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#databases_hard"&gt;3. Databases are hard&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#relational"&gt;relational model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#schema"&gt;coming up with a schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#maintaining"&gt;maintaining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#append"&gt;4. Append, don't modify&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#example_chrome"&gt;Example: Chrome history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#cachew"&gt;5. Appendix: when you really really want a database&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cachew_cachew"&gt;cachew&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;6. --&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="asis"&gt;&lt;a class="headerlink" href="#asis"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; What do you suggest?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-asis"&gt;
&lt;p&gt;
Before I jump into explaining what's my problem with databases, let me summarize my current approach, so that it's clear what I'm suggesting as an alternative.
&lt;/p&gt;
&lt;p&gt;
Liberating your data involves fairly different, if not complementary, parts (or 'layers'):
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;"data export" part: knows how to get data from the cloud and saves it on the disk. Deals with APIs, network, etc.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
"data access" part: knows how to interpret whatever you exported on your disk and maps onto abstract entities/classes/objects
&lt;/p&gt;
&lt;p&gt;
I'll refer to it interchangeably as &lt;b&gt;"data access layer (DAL)"&lt;/b&gt; or &lt;b&gt;"data bindings"&lt;/b&gt; further in the article.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
My suggestions are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
during data export, &lt;b&gt;store data as is&lt;/b&gt;, don't try to clean it up or normalize
&lt;/p&gt;
&lt;p&gt;
This allows you to keep your data safe as soon as you managed to retrieve it, and more forgiving to bugs and inconsistencies.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
during data access, merge and &lt;b&gt;normalize your data in runtime&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
This makes the export part simpler, saves you time on maintaining data and allows for faster iterations while working with it.
&lt;/p&gt;
&lt;p&gt;
Normalizing on every access might cause some overhead, of course, which I'll discuss &lt;a class="link-down" href="#performance"&gt;later&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
if necessary use databases as an intermediate layer to speed access up and as an additional interface to your data
&lt;/p&gt;
&lt;p&gt;
Nothing wrong with using databases for &lt;a class="link-down" href="#cachew"&gt;caching&lt;/a&gt; if you need it!
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And as a specific example:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="example_reddit"&gt;&lt;a class="headerlink" href="#example_reddit"&gt;¶&lt;/a&gt;example: Reddit export&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-example_reddit"&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/rexport"&gt;rexport&lt;/a&gt; is a script to export user's Reddit data like saved post/comments/submissions and upvotes.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
export layer
&lt;/p&gt;
&lt;p&gt;
If you ignore the argparse boilerplate, the export &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/export.py#L69-L96"&gt;itself&lt;/a&gt; is very simple, just a matter of calling API methods (I'm using existing bindings) and combining the results into a JSON object.
After that, data is immediately persisted on a disk.
&lt;/p&gt;
&lt;p&gt;
Reddit API is restricted to the 1000 latest items, so to have a full view of my data, I need to 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;export it regularly (which I do)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
save each exported data slice in a new file, which I also do
&lt;/p&gt;
&lt;p&gt;
Using timestamp as a filename is a natural choice, I'm using &lt;a href="https://github.com/karlicoss/arctee"&gt;arctee&lt;/a&gt; tool to do this for all of my exports.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
data access layer
&lt;/p&gt;
&lt;p&gt;
The data access layer provides simple Python classes that make it pleasant to work with the data. 
&lt;/p&gt;
&lt;p&gt;
My bindings simply expose saved JSON data via Python's properties: e.g. &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/dal.py#L52-L65"&gt;&lt;code class="inline"&gt;Comment&lt;/code&gt;&lt;/a&gt;. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;if I ever need to extract something else from the raw JSON (e.g. upvotes), that would only be a matter of adding three lines of code into &lt;code class="inline"&gt;Comment&lt;/code&gt; class&lt;/li&gt;
&lt;li&gt;in contrast, had I kept the data in a database, that would have required a database migration for &lt;samp class="inline"&gt;Comments&lt;/samp&gt; table &lt;a class="link-down" href="#api_extended"&gt;at the very least&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Now, remember I mentioned that Reddit only gives you the latest 1000 items, so I end up with overlapping data slices? To get a full view of my data, I'm simply going through individual JSON files in chronological order and merging together in &lt;a href="https://github.com/karlicoss/rexport/blob/874e6116bfba8cbd63fa3b4d93810a1488cb8464/dal.py#L136-L153"&gt;&lt;code class="inline"&gt;accumulate&lt;/code&gt;&lt;/a&gt; method.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
[optional] caching layer
&lt;/p&gt;
&lt;p&gt;
I've got Reddit data way into past and export it every day, so merging together all these files during data access can indeed take a noticeable time.
&lt;/p&gt;
&lt;p&gt;
I'm overcoming this by using a &lt;a href="https://github.com/karlicoss/my/blob/12330dd6041b9a4ee66571dca845947988e6f474/my/reddit.py#L51"&gt;&lt;code class="inline"&gt;@cachew&lt;/code&gt;&lt;/a&gt; annotation on the &lt;code class="inline"&gt;comments()&lt;/code&gt; method.
&lt;/p&gt;
&lt;p&gt;
One annotation, that's it. Look ma, no SQL! Okay, okay, there is quite a bit of SQL involved, but it's all hidden inside &lt;a href="https://github.com/karlicoss/cachew#how-it-works"&gt;cachew&lt;/a&gt;. It would also work for any other source of personal data.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="databases_good"&gt;&lt;a class="headerlink" href="#databases_good"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Databases are good&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-databases_good"&gt;
&lt;p&gt;
In this section, I'll present typical arguments &lt;b&gt;for&lt;/b&gt; using databases, and will try to argue, that in most circumstances (for keeping personal data), the benefits are not pragmatic and not worth &lt;a class="link-down" href="#databases_hard"&gt;the tradeoffs&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Note that generally, databases have numerous other benefits, however, I'll emphasize again, here I'm only considering aspects that are relevant to &lt;b&gt;personal data storage&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
When I say 'database' here, I typically mean Sqlite, which is most commonly used for personal data, although specific database, relational or not, shouldn't matter.
&lt;/p&gt;
&lt;p&gt;
&lt;span style="color:darkorange"&gt;&lt;strong&gt;If you think I've missed out on something, please let me know!&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="space"&gt;&lt;a class="headerlink" href="#space"&gt;¶&lt;/a&gt;take less space&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-space"&gt;
&lt;p&gt;
Yes, however in most cases your data export will take few megabytes anyway. If you compress it, it's hundreds of kilobytes.
&lt;/p&gt;
&lt;p&gt;
Storage saved by using a database instead of plaintext is marginal and not worth the effort.
&lt;/p&gt;
&lt;p&gt;
Only exceptions I can think of are: 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;instant messaging apps: number of text messages approaches millions&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
continuous data like room temperature, CO2 levels, etc
&lt;/p&gt;
&lt;p&gt;
If you have a minute by minute stream of &lt;b&gt;uniform data&lt;/b&gt;, a database is probably the way to go.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="performance"&gt;&lt;a class="headerlink" href="#performance"&gt;¶&lt;/a&gt;efficient data access&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-performance"&gt;
&lt;p&gt;
The same point applies as in the &lt;a class="link-up" href="#space"&gt;previous section&lt;/a&gt;. If a your data export contains several thousand items, you won't notice the difference.
&lt;/p&gt;
&lt;p&gt;
In addition, there are &lt;a class="link-down" href="#cachew"&gt;ways&lt;/a&gt; of getting most of the database benefits without having to sacrifice simplicity and without writing SQL boilerplate.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="sql"&gt;&lt;a class="headerlink" href="#sql"&gt;¶&lt;/a&gt;query language&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-sql"&gt;
&lt;p&gt;
SQL is extremely powerful and helps you to interact with your data without distracting on low-level retrieval details.
&lt;/p&gt;
&lt;p&gt;
That's a very good point, but query language doesn't necessarily mean a database. 
E.g. see &lt;a href="https://pandas.pydata.org"&gt;pandas&lt;/a&gt; which is capable of what SQL is capable of, and even more convenient than SQL for our data exploration purposes.
&lt;/p&gt;
&lt;p&gt;
In addition, see &lt;a class="link-down" href="#relational"&gt;the counterargument&lt;/a&gt; about the restrictions of the relational model.
&lt;/p&gt;
&lt;p&gt;
And finally, nothing prevents you from providing a database as an &lt;a class="link-down" href="#cachew"&gt;additional interface&lt;/a&gt; to your data.   
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Example&lt;/b&gt;: exposing &lt;a href="https://github.com/karlicoss/my/blob/6787c9c0d6a6e0aff49565cf299464a7a9b40e9f/my/jawbone/__init__.py#L267-L280"&gt;jawbone sleep data&lt;/a&gt; as a dataframe.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="rows"&gt;&lt;a class="headerlink" href="#rows"&gt;¶&lt;/a&gt;SQL rows are a better 'data interface' than JSON&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-rows"&gt;
&lt;p&gt;
That's kind of a subjective point (although I'd rather agree).
&lt;/p&gt;
&lt;p&gt;
However, raw rows, while good enough for simple queries, can only get you so far.
&lt;/p&gt;
&lt;p&gt;
   While Sqlite is more pleasant to query than JSON (but still, do check out out &lt;a href="https://stedolan.github.io/jq"&gt;jq&lt;/a&gt;),
once you start using your data repeatedly, you want to abstract away from the low-level rows and encode with proper datatypes (in your favorite target programming language). E.g. you want to use strings that have the familiar methods, datetime types, data classes, etc.
&lt;/p&gt;
&lt;p&gt;
I want an &lt;a href="https://en.wikipedia.org/wiki/Data_access_layer"&gt;abstract interface&lt;/a&gt; to my data, and I'm not alone, &lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORMs&lt;/a&gt; exist for a reason.
&lt;/p&gt;
&lt;p&gt;
So, in either case, you need to write data bindings. Say, you want to export some data from an API.
&lt;/p&gt;
&lt;p&gt;
We're comparing two options:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
option 1
&lt;/p&gt;
&lt;p&gt;
during export:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;retrieve the JSON from the API&lt;/li&gt;
&lt;li&gt;keep it on the disk as is. Trivial step, just save in the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
during data access:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;parse JSON&lt;/li&gt;
&lt;li&gt;map data onto the abstract interface&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
option 2
&lt;/p&gt;
&lt;p&gt;
during export:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;retrieve the JSON from the API&lt;/li&gt;
&lt;li&gt;parse JSON, transform and normalize data &lt;a class="link-down" href="#relational"&gt;to conform to the database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;insert in the database. Often not a trivial step due to transactions and multiple insert/update statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
during data access:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;make a SQL query&lt;/li&gt;
&lt;li&gt;map data onto the abstract interface&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Note that you have fewer steps if you follow the first approach. And it's not only about the time saved on implementing: the less you transform the data, the less the chance you screw something up. I'll elaborate with a specific example of a royal screw up &lt;a class="link-down" href="#example_chrome"&gt;later&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="constraints"&gt;&lt;a class="headerlink" href="#constraints"&gt;¶&lt;/a&gt;types and constraints&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-constraints"&gt;
&lt;p&gt;
Even though schemas in Sqlite are annotated with types, that &lt;b&gt;doesn't give you strong typing guarantees in runtime&lt;/b&gt;, a concept that is gently called &lt;a href="https://www.sqlite.org/quirks.html#flexible_typing"&gt;&lt;b&gt;"flexible typing"&lt;/b&gt;&lt;/a&gt;. In other words, your data is implicitly coerced which may be convenient but might cause some unanticipated failures later.
&lt;/p&gt;
&lt;p&gt;
SQL &lt;a href="https://www.tutorialspoint.com/sql/sql-check.htm"&gt;constraints&lt;/a&gt; are a potentially great way to guarantee intrinsic consistency of your data.
If you encode consistency checks in your target SQL, you will be protected from corrupting the logical state, even if you try to mess with the database manually.
&lt;/p&gt;
&lt;p&gt;
This is great in theory, however, doesn't work so well on practice for personal data:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;when you use something like PostgreSQL, you've got &lt;a href="https://severalnines.com/database-blog/understanding-check-constraints-postgresql"&gt;PL/pgSQL&lt;/a&gt; at hand, a real programming language, to encode your constraints&lt;/li&gt;
&lt;li&gt;when you use Sqlite, it's a bit more tedious, there is a &lt;a href="https://www.sqlite.org/c3ref/create_function.html"&gt;C API&lt;/a&gt; to interface with custom functions. Otherwise, you're limited by native Sqlite functions, hence encoding constraints might be very awkward. Needless to say, very few people would (and do) bother using it unless it's absolutely vital to implement such checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In addition, with regards to personal data, it's easier to assume a "single writer" model and encode constraint checking in the programming language, during data access.
&lt;/p&gt;
&lt;p&gt;
My observation is: &lt;b&gt;if you don't own the schema, you won't get it right&lt;/b&gt;. The services break their APIs, underdocument, or return utter garbage all the time.
&lt;/p&gt;
&lt;p&gt;
The alternative I suggest, storing raw data as is, means that at least:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you won't make it any more inconsistent than it already is&lt;/li&gt;
&lt;li&gt;if you misinterpret the data, that's just a code change, data is not corrupted&lt;/li&gt;
&lt;li&gt;you will massively save on your time and mental resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="easy_bindings"&gt;&lt;a class="headerlink" href="#easy_bindings"&gt;¶&lt;/a&gt;easy to map onto any language&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-easy_bindings"&gt;
&lt;p&gt;
That's a good point, also somewhere along the lines of &lt;a class="link-up" href="#rows"&gt;'better data interfaces'&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Exporting data is one part, and it doesn't particularly matter who implemented it and how, as long as it works for you.
&lt;/p&gt;
&lt;p&gt;
Accessing is different, the realities of the modern &lt;a href="https://en.wikipedia.org/wiki/Foreign_function_interface"&gt;FFI&lt;/a&gt; are such that typically, it's easier to reimplement the data bindings from scratch on the programming language you prefer.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;if the data is kept as is (e.g. as unnormalized JSON), that means reimplementing the data extraction and parsing logic from scratch&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
if the data is kept in Sqlite, it's already to some extent structured and normalized
&lt;/p&gt;
&lt;p&gt;
That means that data bindings could be simply a matter of writing datatype definitions and using some database bindings, which is fairly straightforward.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I have to admit, I don't have much to counter this. This is a tradeoff I have accepted while writing tools for export.
&lt;/p&gt;
&lt;p&gt;
I want other people to use them, so we have a collective stake in maintaining them.
I write in Python, so hopefully, it's covering enough people.
&lt;/p&gt;
&lt;p&gt;
That said, I'll repeat my point that you can still use a database &lt;a class="link-down" href="#cachew"&gt;as an intermediate layer&lt;/a&gt;, without relying on it as a primary data storage. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="databases_hard"&gt;&lt;a class="headerlink" href="#databases_hard"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Databases are hard&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-databases_hard"&gt;
&lt;p&gt;
Now let's go through things that directly make databases hard.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="relational"&gt;&lt;a class="headerlink" href="#relational"&gt;¶&lt;/a&gt;relational model&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-relational"&gt;
&lt;p&gt;
These days we often just say 'database' when we mean &lt;a href="https://en.wikipedia.org/wiki/Relational_database"&gt;'relational database&lt;/a&gt;'. 
Relational databases can be vaguely thought of as "a set of tables, each table storing typed data tuples".
Such simplicity allows for query language expressiveness and enables the optimizer to reason about data retrieval.
&lt;/p&gt;
&lt;p&gt;
At the same time, this simplicity is a curse and imposes structure that might be incompatible with the format that you receive data in.
Often, the relational model requires you to rearrange data before inserting, which might break data consistency.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="relational_examples"&gt;Examples&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-relational_examples"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Imagine you want to export your Instapaper bookmarks.
&lt;/p&gt;
&lt;p&gt;
API offers you a &lt;a href="https://www.instapaper.com/api"&gt;&lt;samp class="inline"&gt;/bookmarks/list&lt;/samp&gt;&lt;/a&gt; method, that lists user's bookmarks.
The catch is it doesn't require all of them; it's got a required &lt;samp class="inline"&gt;folder_id&lt;/samp&gt; parameter.
&lt;/p&gt;
&lt;p&gt;
For your export, that means that you have to go through the folders (i.e. "unread", "archive", etc.), and export each list individually.
Instead of a nice and flat bookmark list, you've got a &lt;code class="inline"&gt;Folder → Bookmark&lt;/code&gt; hierarchy. To make it compatible with the &lt;code class="inline"&gt;Bookmarks&lt;/code&gt; table, you need to flatten it first.
&lt;/p&gt;
&lt;p&gt;
There are some potential caveats during that: you could end up with duplicates if folders are not mutually exclusive or just due to inherent data races between multiple API requests, so you have to uniquify the bookmarks, which is an extra thing to think about.
&lt;/p&gt;
&lt;p&gt;
While in theory, nothing prevents &lt;code class="inline"&gt;Bookmark ↔ Folder&lt;/code&gt; from fitting in a relational model, the nature of the API interactions makes it awkward to implement on the client side.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Imagine you want to export your Endomondo workouts.
&lt;/p&gt;
&lt;p&gt;
API offers you a list of workouts (represented as JSON) with various metadata (types of exercise/datetime/private notes) and in addition, heart rate data and location data.
&lt;/p&gt;
&lt;p&gt;
How do you keep heart rate and location?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;in a massive &lt;a href="https://www.sqlite.org/datatype3.html"&gt;&lt;code class="inline"&gt;BLOB&lt;/code&gt;&lt;/a&gt; or &lt;code class="inline"&gt;TEXT&lt;/code&gt; column? That's barely better than simply serializing everything as JSON.&lt;/li&gt;
&lt;li&gt;in separate tables, with timestamps as the primary keys? Then you'd need to refer to them as 'timestamp ranges' which would make it pretty tedious to insert and access.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="schema"&gt;&lt;a class="headerlink" href="#schema"&gt;¶&lt;/a&gt;coming up with a schema&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-schema"&gt;
&lt;p&gt;
Kind of similar to the points on &lt;a class="link-up" href="#constraints"&gt;types&lt;/a&gt; and the &lt;a class="link-up" href="#relational"&gt;relational model&lt;/a&gt;, often you need first-hand knowledge of the API to come up with a correct and reasonable schema.
&lt;/p&gt;
&lt;p&gt;
Schemas use a fixed number of fields, which requires you to scrupulously inspect the data and make sure you've covered everything by your schema.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="maintaining"&gt;&lt;a class="headerlink" href="#maintaining"&gt;¶&lt;/a&gt;maintaining&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-maintaining"&gt;
&lt;p&gt;
Inevitably, APIs change and extend, often without you knowing that (or not having time to follow the API news).
If the API starts returning more data, that means the database scheme needs to change.
&lt;/p&gt;
&lt;p&gt;
Depending on the way you implemented it, that means one of two things:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
best-case scenario: you implement checks for the API schema and fail your export script on a mismatch.
&lt;/p&gt;
&lt;p&gt;
Now you are aware of API changes, but your export script stopped working and requires attention and fixing
Depending on the specific service and on how much do you value your data, it might require a &lt;a class="link-down" href="#api_backward"&gt;fast fixing response&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
worst-case scenario: you had no checks for schema changes and you're not even aware of it.
&lt;/p&gt;
&lt;p&gt;
Sometimes it's fine, but sometimes that means &lt;a class="link-down" href="#incremental"&gt;losing data forever&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Consider the following scenarios and how we handle them:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="api_extended"&gt;API is extended, i.e. returns more data&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-api_extended"&gt;
&lt;p&gt;
Let's consider a specific example, Pocket API.      
&lt;/p&gt;
&lt;p&gt;
At the moment it only lets you access your 'articles', i.e. URLs you bookmarked to Pocket.
Imagine that you're using a database to export them, so your schema is: &lt;code class="inline"&gt;TABLE Article(STRING id, STRING url, STRING title, DATETIME added)&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
One day, the developers expose highlights (or annotations) from the &lt;a href="https://github.com/karlicoss/pockexport#setting-up"&gt;private API&lt;/a&gt; and your export script stats receiving it in the response JSON.
It's quite useful data to have!
&lt;/p&gt;
&lt;p&gt;
However, your database can't just magically change to conform to the new field. In addition, we've got the same issue with mapping onto the &lt;a class="link-up" href="#relational"&gt;relational model&lt;/a&gt; here: we've got an
&lt;code class="inline"&gt;Article → Highlight&lt;/code&gt; hierarchy, which we need to manually split up into separate tables. So you'd need to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
find out that there is a new JSON field in the first place
&lt;/p&gt;
&lt;p&gt;
That's, of course, regardless of what storage you're using, but in case of a master database, you really might want to &lt;a class="link-down" href="#incremental"&gt;find it out sooner than later&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
come up a schema and create a new table, &lt;code class="inline"&gt;Highlight&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Don't forget to use the correct primary key, &lt;samp class="inline"&gt;(highlight_id, bookmark_id)&lt;/samp&gt;. Who knows whether &lt;samp class="inline"&gt;highlight_id&lt;/samp&gt; is unique across bookmarks boundaries?
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
migrate old data
&lt;/p&gt;
&lt;p&gt;
Why can't I just create the database from scratch, you ask? Well, that may not always be an option.
&lt;/p&gt;
&lt;p&gt;
Sometimes you &lt;a class="link-down" href="#incremental"&gt;don't have access&lt;/a&gt; to older data anymore.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The alternative &lt;a class="link-up" href="#asis"&gt;I suggest&lt;/a&gt; is keeping raw data and dealing normalizing during data access. Let's see how that would work:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
when new &lt;samp class="inline"&gt;annotations&lt;/samp&gt; field is introduced, it's automatically kept on disk along with everything else
&lt;/p&gt;
&lt;p&gt;
When you find out about it later, you can still use annotations from the previously exported data.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
supporting this field is extremely easy
&lt;/p&gt;
&lt;p&gt;
If you keep raw data, it's just a matter of adding a &lt;a href="https://github.com/karlicoss/pockexport/blob/8e141e12663a611891622bfe57dc8b7babdf6526/dal.py#L48-L52"&gt;getter&lt;/a&gt; method to the &lt;code class="inline"&gt;Article&lt;/code&gt; class.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-type"&gt;@property&lt;/span&gt;
&lt;span class="org-keyword"&gt;def&lt;/span&gt; &lt;span class="org-function-name"&gt;highlights&lt;/span&gt;(&lt;span class="org-keyword"&gt;self&lt;/span&gt;) -&amp;gt; Sequence[Highlight]:
    &lt;span class="org-variable-name"&gt;default&lt;/span&gt; = [] &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;defensive to handle older export formats that had no annotations&lt;/span&gt;
    &lt;span class="org-variable-name"&gt;jsons&lt;/span&gt; = &lt;span class="org-keyword"&gt;self&lt;/span&gt;.json.get(&lt;span class="org-string"&gt;'annotations'&lt;/span&gt;, default)
    &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-builtin"&gt;list&lt;/span&gt;(&lt;span class="org-builtin"&gt;map&lt;/span&gt;(Highlight, jsons))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Modifying code is way easier than messing with databases and modifying the data.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="api_backward"&gt;API breaks backward compatibility&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-api_backward"&gt;
&lt;p&gt;
Imagine that for some reason &lt;a class="link-up" href="#example_reddit"&gt;Reddit API&lt;/a&gt; started returning &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;isoformatted&lt;/a&gt; date strings instead of epochs (i.e. &lt;samp class="inline"&gt;20200126T19:43:21Z&lt;/samp&gt; instead of &lt;samp class="inline"&gt;1580067801&lt;/samp&gt;).
&lt;/p&gt;
&lt;p&gt;
Your existing &lt;code class="inline"&gt;Comment&lt;/code&gt; table assumed &lt;code class="inline"&gt;INTEGER&lt;/code&gt; for the comment creation date. Suddenly you started receiving strings, which Sqlite can't handle anymore.
&lt;/p&gt;
&lt;p&gt;
You have similar issues to the previous section: you need to migrate your old data. But there is even a bigger issue: &lt;b&gt;your data exports are not advancing anymore&lt;/b&gt; until you perform the migration. That's problematic because you might lose data forever if you postpone the fix for too long.
&lt;/p&gt;
&lt;p&gt;
In contrast, if you &lt;a class="link-up" href="#asis"&gt;keep raw data&lt;/a&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
your downstream tools, consuming exported data, start choking over wrong type stored in the JSON
&lt;/p&gt;
&lt;p&gt;
The massive difference though is: there is &lt;b&gt;no time pressure to fix&lt;/b&gt;, you know that at least your data is getting exported locally
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
fixing this issue is really quick: two lines of defensive code
&lt;/p&gt;
&lt;p&gt;
Testing the fix is trivial, code changes are easy and &lt;b&gt;reversible&lt;/b&gt; thanks to version control.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Database migrations are very hard, and you want to avoid them at all costs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="append"&gt;&lt;a class="headerlink" href="#append"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Append, don't modify&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-append"&gt;
&lt;p&gt;
When it comes to exporting data, there are two very different cases:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
you can access all data at once
&lt;/p&gt;
&lt;p&gt;
This is an easy case, and you can just retrieve all over again every time.
&lt;/p&gt;
&lt;p&gt;
Example: Pinboard API, there are just a few megabytes of data you have on Pinboard and API doesn't prevent you from retrieving all of it at once.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a id="incremental"&gt;&lt;/a&gt;at any time you only have a slice of data available
&lt;/p&gt;
&lt;p&gt;
There are different reasons for this:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
many APIs restrict the number of latest items you can retrieve
&lt;/p&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/karlicoss/rexport#limitations"&gt;Reddit&lt;/a&gt; limits your API requests to 1000 results, due to some performance considerations&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.monzo.com/#list-transactions"&gt;Monzo bank API&lt;/a&gt; only gives you last 90 days of transactions, presumably for security reasons&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
data retention
&lt;/p&gt;
&lt;p&gt;
Example: chrome history is only retained for 90 days
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
limited memory
&lt;/p&gt;
&lt;p&gt;
Examples: temperature sensors, HR sensors, and other embedded devices
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That means the data exports are now &lt;b&gt;incremental&lt;/b&gt;. This case is tricky because:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you need to run your export scripts regularly, otherwise, you might miss some data&lt;/li&gt;
&lt;li&gt;you need some sort of 'merging' logic to combine a new slice of data with the data already exported&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In this section, we'll be dealing with this case, and this 'merging' logic is what we'll be discussing.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
How to deal with 'merging' data? Again, we have two alternatives here:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;p&gt;
keep everything in a single database
&lt;/p&gt;
&lt;p&gt;
Come up with a schema for the 'master database'.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;during export: normalize and insert new data into the master database.&lt;/li&gt;
&lt;li&gt;during data access: map data rows onto specific classes and datatypes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;keep exported slices intact

&lt;ul class="org-ul"&gt;
&lt;li&gt;during export: save each new data slice along with the timestamp&lt;/li&gt;
&lt;li&gt;during data access: go through the slices in the order of timestamp increase and assemble the full view of data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
As you might have guessed, I want to advocate against the first approach. Don't try to merge your data during exporting, unless it's really necessary.
&lt;/p&gt;
&lt;p&gt;
First of all, all the reasons from the &lt;a class="link-up" href="#databases_hard"&gt;previous section&lt;/a&gt; apply. In addition:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
you have to be &lt;b&gt;even more careful&lt;/b&gt; about transactional logic since you might corrupt your export for good
&lt;/p&gt;
&lt;p&gt;
Remember, you may not be able to retrieve older data anymore.  
&lt;/p&gt;
&lt;p&gt;
While it's not hard to use transactions, it's still harder than simply using atomic file write.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
slices of data separated in time are &lt;b&gt;even more likely to be inconsistent&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
As an example, imagine the API changes some internals, i.e. the way IDs are assigned, that doesn't matter when you export everything at once.
&lt;/p&gt;
&lt;p&gt;
However, for an incremental export, if old IDs were persisted in the database, it may cause issues.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That's where 'append' in the section title comes from, instead of merging data and modifying the master database, we 'append' data on the disk without modifying anything.
This is not a new approach and a common software engineering practice:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Persistent_data_structure#Examples_of_persistent_data_structures"&gt;Persistent data structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/ZFS#Copy-on-write_transactional_model"&gt;ZFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/eaaDev/EventSourcing.html"&gt;Event sourcing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I've already mentioned that regarding &lt;a class="link-up" href="#example_reddit"&gt;Reddit&lt;/a&gt; a few times, but let me illustrate the 'inconsistency' aspect with a more specific example:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="example_chrome"&gt;&lt;a class="headerlink" href="#example_chrome"&gt;¶&lt;/a&gt;Example: Chrome history&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-example_chrome"&gt;
&lt;p&gt;
As I mentioned, Chrome only keeps the history for the last 90 days.
Imagine you want to retain all your past browsing history. And no, you &lt;a href="./takeout-data-gone.html"&gt;can't rely on Takeout&lt;/a&gt; for that, or you might not be using Google at all.
&lt;/p&gt;
&lt;p&gt;
So you want a script that exports your history, say, every week and maintains full browsing history over the years.
&lt;/p&gt;
&lt;p&gt;
Chrome keeps the history in an sqlite file, and exporting it is trivial! It's just a matter of copying &lt;samp class="inline"&gt;~/.config/google-chrome/Profile/History&lt;/samp&gt;.
&lt;/p&gt;
&lt;p&gt;
Imagine you want to come up with a master database schema and merge together weekly history databases.
That requires some careful inspection of the database in order to find out how it keeps the data.
&lt;/p&gt;
&lt;p&gt;
So you do it and it seems that a subset of schema that &lt;samp class="inline"&gt;History&lt;/samp&gt; database is &lt;a href="https://www.lowmanio.co.uk/blog/entries/how-google-chrome-stores-web-history"&gt;already using&lt;/a&gt; would make sense:
&lt;/p&gt;
&lt;pre class="example"&gt;TABLE   urls(
    id    INTEGER PRIMARY KEY, 
    url   STRING,
    title STRING
)
TABLE visits(
    id         INTEGER PRIMARY KEY,
    url_id     INTEGER, // foreign key referring to urls.id
    visit_time STRING
)
&lt;/pre&gt;
&lt;p&gt;
Pseudocode for your export script would look like:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-variable-name"&gt;chunk_db&lt;/span&gt; = &lt;span class="org-string"&gt;"~/.config/google-chrome/Profile/History"&lt;/span&gt;
&lt;span class="org-variable-name"&gt;master_db&lt;/span&gt;  = &lt;span class="org-string"&gt;"/exports/chrome/full_history.db"&lt;/span&gt;

&lt;span class="org-keyword"&gt;for&lt;/span&gt; row &lt;span class="org-keyword"&gt;in&lt;/span&gt; query(chunk_db, &lt;span class="org-string"&gt;'SELECT id, url, title from urls'&lt;/span&gt;):
    insert_or_ignore(master_db, &lt;span class="org-string"&gt;'urls'&lt;/span&gt;, row)

&lt;span class="org-keyword"&gt;for&lt;/span&gt; row &lt;span class="org-keyword"&gt;in&lt;/span&gt; query(chunk_db, &lt;span class="org-string"&gt;'SELECT id, url_id, visit_tile from visits'&lt;/span&gt;):
    insert_or_ignore(master_db, &lt;span class="org-string"&gt;'visits'&lt;/span&gt;, row)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Note: this code already smells because:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;accessing an opened (by Chrome) sqlite database would fail – you need to copy the database file first and work with a copy&lt;/li&gt;
&lt;li&gt;it's also easiest to copy to ensure transactional reads: no one guarantees you Chrome updates the database in a transaction&lt;/li&gt;
&lt;li&gt;you need a write transaction on &lt;samp class="inline"&gt;master_db&lt;/samp&gt;, otherwise, someone who reads it might see inconsistent data&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
we have to use &lt;a href="https://sqlite.org/lang_conflict.html"&gt;&lt;samp class="inline"&gt;insert_or_ignore&lt;/samp&gt;&lt;/a&gt; (instead of simple &lt;samp class="inline"&gt;insert&lt;/samp&gt;), because the chunks are overlapping on data, hence primary keys will conflict
&lt;/p&gt;
&lt;p&gt;
It's kind of an arbitrary choice; the alternative could be using &lt;samp class="inline"&gt;insert_or_update&lt;/samp&gt;. Hopefully, they should be equivalent, although it's unclear which one is morally correct. E.g. what happens if URL's &lt;samp class="inline"&gt;title&lt;/samp&gt; change? But hopefully, that doesn't matter much anyway, right?
&lt;/p&gt;
&lt;p&gt;
As we'll see this very bit will turn out to be &lt;b&gt;very problematic&lt;/b&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
But anyway, let's carry on. Fast forward few exports and merges, your full history database looks like:
&lt;/p&gt;
&lt;style&gt; #urls_old   { display: inline-block; } &lt;/style&gt;
&lt;style&gt; #visits_old { display: inline-block; } &lt;/style&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" id="urls_old" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;url&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;title&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;reddit.com&lt;/td&gt;
&lt;td class="org-left"&gt;Reddit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;200&lt;/td&gt;
&lt;td class="org-left"&gt;google.com&lt;/td&gt;
&lt;td class="org-left"&gt;Google&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" id="visits_old" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;url_id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;visit_time&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;300&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2011-02-10 10:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;498&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2011-04-01 09:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;499&lt;/td&gt;
&lt;td class="org-right"&gt;200&lt;/td&gt;
&lt;td class="org-left"&gt;2011-04-02 05:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
&lt;samp class="inline"&gt;visit_time&lt;/samp&gt; is in epoch microseconds in the actual chrome history database, but it's easier to illustrate with strings here.
&lt;/p&gt;
&lt;p&gt;
Note that ids don't start with 0, we had already been using Chrome for more than 90 days at the time we started exporting, so sadly some data is gone forever.
&lt;/p&gt;
&lt;p&gt;
Now, imagine you've reinstalled your operating system. 
&lt;/p&gt;
&lt;p&gt;
What happens to the Chrome databases? They reset, no one guaranteed you that ids would persist. The &lt;b&gt;table ids start all over from 0 again&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;samp class="inline"&gt;~/.config/google-chrome/Profile/History&lt;/samp&gt; now looks like:
&lt;/p&gt;
&lt;style&gt; #urls_chunk_new   { display: inline-block; } &lt;/style&gt;
&lt;style&gt; #visits_chunk_new { display: inline-block; } &lt;/style&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" id="urls_chunk_new" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;url&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;title&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;wikipedia.org&lt;/td&gt;
&lt;td class="org-left"&gt;Wikipedia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;google.com&lt;/td&gt;
&lt;td class="org-left"&gt;Google&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;stackoverflow.com&lt;/td&gt;
&lt;td class="org-left"&gt;Stackoverflow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" id="visits_chunk_new" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;url_id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;visit_time&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;2012-04-20 19:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;900&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2012-06-03 12:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Let's see what it means for our full history database &lt;samp class="inline"&gt;/exports/chrome/full_history.db&lt;/samp&gt;. What happens after you merge the new chunk of history?
&lt;/p&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;url&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;title&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;wikipedia.org&lt;/td&gt;
&lt;td class="org-left"&gt;Wikipedia&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;google.com&lt;/td&gt;
&lt;td class="org-left"&gt;Google&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;reddit.com&lt;/td&gt;
&lt;td class="org-left"&gt;Reddit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;200&lt;/td&gt;
&lt;td class="org-left"&gt;google.com&lt;/td&gt;
&lt;td class="org-left"&gt;Google&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Hmm.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;samp class="inline"&gt;google.com&lt;/samp&gt; ended up twice with different ids, but okay, why not&lt;/li&gt;
&lt;li&gt;however, the real problem is that &lt;samp class="inline"&gt;stackoverflow.com&lt;/samp&gt; is gone due to the use of &lt;samp class="inline"&gt;insert_or_ignore&lt;/samp&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And it's actually worse. Let's look at the &lt;samp class="inline"&gt;visits&lt;/samp&gt; table in the &lt;samp class="inline"&gt;full_history.db&lt;/samp&gt;:
&lt;/p&gt;
&lt;table border="2" cellpadding="6" cellspacing="0" frame="hsides" rules="groups"&gt;
&lt;colgroup&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-right"/&gt;
&lt;col class="org-left"/&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-right"&gt;&lt;samp class="inline"&gt;url_id&lt;/samp&gt;&lt;/td&gt;
&lt;td class="org-left"&gt;&lt;samp class="inline"&gt;visit_time&lt;/samp&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;2012-04-20 19:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;300&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2011-02-10 10:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;498&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2011-04-01 09:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;499&lt;/td&gt;
&lt;td class="org-right"&gt;200&lt;/td&gt;
&lt;td class="org-left"&gt;2011-04-02 05:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-right"&gt;…&lt;/td&gt;
&lt;td class="org-left"&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;900&lt;/td&gt;
&lt;td class="org-right"&gt;100&lt;/td&gt;
&lt;td class="org-left"&gt;2012-06-03 12:00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
The visit with id 900, that should point at &lt;samp class="inline"&gt;stackoverflow.com&lt;/samp&gt;, now points at &lt;samp class="inline"&gt;google.com&lt;/samp&gt;, so we ended up with some &lt;b&gt;fake browsing history&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
How could we have avoided it? Note that using &lt;samp class="inline"&gt;insert_or_update&lt;/samp&gt; wouldn't have helped: that way we'd just overwrite history in the master database and make it inconsistent again
&lt;/p&gt;
&lt;p&gt;
Why did that happen? The schema was wrong. 
We shouldn't have relied on ids: they are kind of an artifact of the &lt;a class="link-up" href="#relational"&gt;relational model&lt;/a&gt;. One way of getting around it is &lt;a href="https://en.wikipedia.org/wiki/Unnormalized_form"&gt;"unnormalizing"&lt;/a&gt;:
&lt;/p&gt;
&lt;pre class="example"&gt;TABLE   visit_with_url(
    visit_time STRING
    url        STRING
    title      STRING
)
&lt;/pre&gt;
&lt;p&gt;
When we update the database, we use something like:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;for&lt;/span&gt; row &lt;span class="org-keyword"&gt;in&lt;/span&gt; query(chunk_db, &lt;span class="org-string"&gt;'SELECT visit_time, url, title FROM urls JOIN visits ON url.id = visits.url_id'&lt;/span&gt;):
    insert_or_ignore(master_db, row)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Note that by the time you do realize that and fix it, you may have already lost (and even worse, corrupted) older history.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="chrome_dal"&gt;An alternative&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-chrome_dal"&gt;
&lt;p&gt;
According to what I suggest:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
export script is a matter of copying &lt;samp class="inline"&gt;Profile/History&lt;/samp&gt; database along with a timestamp. E.g. if we do it weekly, we end up with:
&lt;/p&gt;
&lt;pre class="example"&gt;/exports/chrome/History-20110210.sqlite
/exports/chrome/History-20110217.sqlite
...
/exports/chrome/History-20120603.sqlite
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
to get full history, we can use the following code
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-keyword"&gt;def&lt;/span&gt; &lt;span class="org-function-name"&gt;get_history&lt;/span&gt;():
   &lt;span class="org-variable-name"&gt;handled&lt;/span&gt; = &lt;span class="org-builtin"&gt;set&lt;/span&gt;()
   &lt;span class="org-keyword"&gt;for&lt;/span&gt; db &lt;span class="org-keyword"&gt;in&lt;/span&gt; &lt;span class="org-builtin"&gt;sorted&lt;/span&gt;(Path(&lt;span class="org-string"&gt;'/exports/chrome/'&lt;/span&gt;).glob(&lt;span class="org-string"&gt;'*.sqlite'&lt;/span&gt;)):
      &lt;span class="org-keyword"&gt;for&lt;/span&gt; row &lt;span class="org-keyword"&gt;in&lt;/span&gt; query(db, &lt;span class="org-string"&gt;'SELECT visit_time, url, title FROM urls JOIN visits ON url.id = visits.url_id'&lt;/span&gt;):
          &lt;span class="org-keyword"&gt;if&lt;/span&gt; row &lt;span class="org-keyword"&gt;in&lt;/span&gt; handled:
              &lt;span class="org-keyword"&gt;continue&lt;/span&gt;
          &lt;span class="org-keyword"&gt;else&lt;/span&gt;:
              &lt;span class="org-keyword"&gt;yield&lt;/span&gt; row
              handled.insert(row)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
That way the full data view is a runtime concept and can never corrupt anything.
&lt;/p&gt;
&lt;p&gt;
If you ever find out that there are more interesting things in your browsing history, e.g. &lt;samp class="inline"&gt;time_spent&lt;/samp&gt; column (keeps time spent on each page), it's literally just a matter of inserting &lt;samp class="inline"&gt;time_spent&lt;/samp&gt; in the query.
&lt;/p&gt;
&lt;p&gt;
Again, an obvious downside is that in runtime, it might take several minutes to assemble the full history (although that may be acceptable, depending on your usecase). And that makes sense to try and use a database for &lt;a class="link-down" href="#cachew"&gt;intermediate caching&lt;/a&gt;; just don't rely on it for primary data storage.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="cachew"&gt;&lt;a class="headerlink" href="#cachew"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Appendix: when you really really want a database&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-cachew"&gt;
&lt;p&gt;
As I mentioned so many times, databases are actually great for caching, as they can persist data in between program's runs.  
&lt;/p&gt;
&lt;p&gt;
After noticing similar similar database access patterns used all over again, I realized that it's possible to isolate the complexity and boilerplate in a separate Python library, &lt;a href="https://github.com/karlicoss/cachew#motivation"&gt;cachew&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="cachew_cachew"&gt;&lt;a class="headerlink" href="#cachew_cachew"&gt;¶&lt;/a&gt;cachew&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-cachew_cachew"&gt;
&lt;p&gt;
TLDR: cachew lets you &lt;b&gt;cache function calls&lt;/b&gt; into an sqlite database on
your disk in a matter of &lt;b&gt;single decorator&lt;/b&gt; (similar to
&lt;a href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;&lt;samp class="inline"&gt;functools.lru_cache&lt;/samp&gt;&lt;/a&gt;).
The difference from &lt;samp class="inline"&gt;functools.lru_cache&lt;/samp&gt; is that cached data is
persisted between program runs, so next time you call your function, it
will only be a matter of reading from the cache. The cache is &lt;b&gt;invalidated
automatically&lt;/b&gt; if your function's arguments change, so you don't have to
think about maintaining it.
&lt;/p&gt;
&lt;p&gt;
In order to be cacheable, your function needs to return (an
&lt;a href="https://docs.python.org/3/library/typing.html#typing.Iterator"&gt;Iterator&lt;/a&gt;,
that is generator, tuple or list) of simple data types:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;primitive types: &lt;samp class="inline"&gt;str&lt;/samp&gt; / &lt;samp class="inline"&gt;int&lt;/samp&gt; / &lt;samp class="inline"&gt;float&lt;/samp&gt; / &lt;samp class="inline"&gt;datetime&lt;/samp&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple"&gt;NamedTuples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;dataclasses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That allows to &lt;b&gt;automatically infer the schema from type hints&lt;/b&gt;
(&lt;a href="https://www.python.org/dev/peps/pep-0526"&gt;PEP 526&lt;/a&gt;) and not think
about serializing/deserializing.
&lt;/p&gt;
&lt;p&gt;
The readme also contains &lt;a href="https://github.com/karlicoss/cachew#incremental-data-exports"&gt;an example&lt;/a&gt; of using cachew for exporting temperature sensor data.
&lt;/p&gt;
&lt;p&gt;
In essence, filenames along with their modification times are used as the key for caching:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;when the exported data is updated, files and their modification times change, which makes the cache invalidate. It's it's updated automatically on the next data access&lt;/li&gt;
&lt;li&gt;in between data updates, data is read straight from the cache and  the access is pretty much instantaneous: &lt;a class="link-up" href="#performance"&gt;databases are indeed fast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
The post subtitle refers to an excellent article &lt;a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate"&gt;"Parse, don't validate"&lt;/a&gt;.
It's on a different topic, but in a somewhat similar spirit: making our programs more robust while writing less code.
&lt;/p&gt;
&lt;p&gt;
Happy to hear your thoughts and suggestions! Thank you for making it through this pile of text :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#dataliberation"&gt;#dataliberation&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#databases"&gt;#databases&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#cachew"&gt;#cachew&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;26 January 2020&lt;/div&gt;
    &lt;/section&gt;
    

    
    &lt;br/&gt;
    &lt;div&gt;Discussion:&lt;/div&gt;
    &lt;ul&gt;
    
        &lt;li&gt;&lt;a href="https://lobste.rs/s/vzpjfj/against_unnecessary_databases"&gt;lobsters&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_against_db" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/unnecessary-db.html" rel="alternate"/>
    <published>2020-01-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/scheduler.html</id>
    <title>In search of a better job scheduler</title>
    <updated>2020-01-18T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;In search of a better job scheduler | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/scheduler.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/scheduler.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="In search of a better job scheduler | beepb00p" property="og:title"/&gt;
        &lt;meta content="What if cron and systemd had a baby? Wouldn't it be beautiful?" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;In search of a better job scheduler&lt;/h1&gt;
    &lt;div class="summary"&gt;What if cron and systemd had a baby? Wouldn't it be beautiful?
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
To support my &lt;a href="./tags.html#infra"&gt;personal infrastructure&lt;/a&gt;, I need a fair amount of regular automatic jobs:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;for exporting &lt;a href="my-data.html"&gt;my personal data&lt;/a&gt; from the cloud&lt;/li&gt;
&lt;li&gt;for generating &lt;a href="orger.html"&gt;plaintext&lt;/a&gt; views of my digital trace&lt;/li&gt;
&lt;li&gt;for updating my &lt;a href="orger-todos.html"&gt;todo lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;updating &lt;a href="https://github.com/karlicoss/promnesia#demo"&gt;promnesia&lt;/a&gt; index&lt;/li&gt;
&lt;li&gt;lots of other backups and supplementary scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Running all that manually (more than 100 scripts across all devices) is an awful job for a human.
I want to set them up once and more or less forget about it, only checking now and then.
&lt;/p&gt;
&lt;p&gt;
In addition, I am trying to share my knowledge with other people, and it turns out not many people (even programmers, let alone less technical people) are using scheduling software in a personal capacity. So in this post I'll be speculating why it's hard and how to make it easier.
&lt;/p&gt;
&lt;p&gt;
I'll be considering pros and cons of job scheduling software mostly with the &lt;b&gt;emphasis on the personal infrastructure&lt;/b&gt;. 
I'm sure there will be some aspects I'm missing out on, more specific to industrial-scale job management.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cron"&gt;1. cron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#systemd"&gt;2. systemd / launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_do_i_want"&gt;3. What do I need?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#other"&gt;4. Alternative schedulers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#solution"&gt;5. Solution?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#dron"&gt;dron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#phone"&gt;6. Phone jobs?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#android_cron"&gt;cron?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;7. --&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="cron"&gt;&lt;a class="headerlink" href="#cron"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-cron"&gt;
&lt;p&gt;
&lt;b&gt;Pros&lt;/b&gt;:  
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;once you get used to the cron scheduling syntax, it's very easy to actually add new jobs.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
easy to adjust
&lt;/p&gt;
&lt;p&gt;
You just type &lt;code class="inline"&gt;crontab -e&lt;/code&gt;, and you can insert/delete/comment jobs, overview when they are running, and space them out in time if necessary.
Once you saved the crontab and exited, it's applied immediately
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
even though systemd is present in most desktop Linux/Mac distributions, cron will &lt;b&gt;definitely&lt;/b&gt; be there
&lt;/p&gt;
&lt;p&gt;
This probably doesn't matter if you're using a general purpose Linux distribution.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Cons&lt;/b&gt;: anything else you can think of is extremely tedious and repetitive to achieve in cron.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
no periodic (i.e. 'once a day' scheduling), only supports specific time
&lt;/p&gt;
&lt;p&gt;
This is annoying when if you don't keep your computer always on.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;no job dependencies&lt;/li&gt;
&lt;li&gt;no timeouts and generally no means of resource management&lt;/li&gt;
&lt;li&gt;no restart policies&lt;/li&gt;
&lt;li&gt;no means of failure notifications apart from local email&lt;/li&gt;
&lt;li&gt;logs go to local mail by default and there are no other mechanisms of failure notification&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://habilis.net/cronic/#disease"&gt;some really bad defaults&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Fun fact: cron only emails you if the job has produced output. If your job failed with nonzero exit code, but produced no output you'd never find out. 
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Cron has some variations that help with some of these problems:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Anacron"&gt;anacron&lt;/a&gt; – allows running commands periodically (e.g. weekly), which helps if your computer is sometimes offline; but it can't run more frequently than once a day&lt;/li&gt;
&lt;li&gt;&lt;a id="fcron"&gt;&lt;/a&gt;&lt;a href="https://wiki.archlinux.org/index.php/cron#Fcron"&gt;fcron&lt;/a&gt;, which I'm &lt;b&gt;using at the moment&lt;/b&gt;. Pretty decent:

&lt;ul class="org-ul"&gt;
&lt;li&gt;unlike anacron, fully compatible with regular cron jobs and allows running periodically as well&lt;/li&gt;
&lt;li&gt;got lots of cool &lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html"&gt;options&lt;/a&gt;, e.g.:

&lt;ul class="org-ul"&gt;
&lt;li&gt;setting &lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.NICE"&gt;&lt;code class="inline"&gt;nice&lt;/code&gt;&lt;/a&gt; value&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.LAVG"&gt;&lt;code class="inline"&gt;lavg&lt;/code&gt;&lt;/a&gt;: conditional running depending on load balancing&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.JITTER"&gt;&lt;code class="inline"&gt;jitter&lt;/code&gt;&lt;/a&gt;, &lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.RANDOM"&gt;&lt;code class="inline"&gt;random&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.SERIAL"&gt;&lt;code class="inline"&gt;serial&lt;/code&gt;&lt;/a&gt; as a primitive way of specifying dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fcron.free.fr/doc/en/fcrontab.5.html#FCRONTAB.5.EXESEV"&gt;&lt;code class="inline"&gt;exesev&lt;/code&gt;&lt;/a&gt; to prevent multiple instances of the same job (although it doesn't treat it as error)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="systemd"&gt;&lt;a class="headerlink" href="#systemd"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; &lt;a href="https://en.wikipedia.org/wiki/Systemd"&gt;systemd&lt;/a&gt; / &lt;a href="https://en.wikipedia.org/wiki/Launchd"&gt;launchd&lt;/a&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-systemd"&gt;
&lt;p&gt;
Disclaimer: I'm not very familiar with Mac OS, but as far as I understand, launchd is very similar to systemd.
&lt;/p&gt;
&lt;p&gt;
Systemd is very powerful and flexible, supports timers, dependencies, restart policies, monitoring, logging, etc.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Pros&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;timers&lt;/li&gt;
&lt;li&gt;dependencies&lt;/li&gt;
&lt;li&gt;resource policies (restricting memory and CPU, timeouts)&lt;/li&gt;
&lt;li&gt;restart policies (although &lt;a href="https://github.com/systemd/systemd/issues/6129"&gt;no exponential backoff&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
shared &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#EnvironmentFile"&gt;environments&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
It can be particularly helpful if a set of scripts shares certain libraries (e.g. &lt;samp class="inline"&gt;PYTHONPATH&lt;/samp&gt;) or data.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;tooling and monitoring&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Cons&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
tedious to add new jobs
&lt;/p&gt;
&lt;p&gt;
If you want to add a job, you need to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
write a unit file
&lt;/p&gt;
&lt;p&gt;
Most of it is boilerplate, so good luck getting the syntax right.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;copy it to &lt;samp class="inline"&gt;~/.config/systemd/user&lt;/samp&gt;&lt;/li&gt;
&lt;li&gt;remember to enable the service&lt;/li&gt;
&lt;li&gt;remember to run &lt;code class="inline"&gt;systemctl --user reload-daemon&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That's a &lt;b&gt;massive overhead&lt;/b&gt; in comparison with &lt;code class="inline"&gt;crontab -e&lt;/code&gt;, edit, save.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;units are scattered&lt;/b&gt; across &lt;samp class="inline"&gt;~/.config/systemd/user&lt;/samp&gt;
&lt;/p&gt;
&lt;p&gt;
In cron if I have some boilerplate shared across several jobs (e.g. prefixed with &lt;samp class="inline"&gt;nice&lt;/samp&gt; or &lt;samp class="inline"&gt;timeout&lt;/samp&gt;), or multiple
very similar commands, I can align/tabulate them with spaces and use block editing in vim to add/remove/change it all at once, so if you keep the crontab tidy, there is little opportunity for error.
&lt;/p&gt;
&lt;p&gt;
In systemd I'd have two options:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;edit each unit file separately: boring and error-prone&lt;/li&gt;
&lt;li&gt;use a script to generate boilerplate for unit files and manage them&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;error notifications (even mailing) requires some &lt;a href="https://wiki.archlinux.org/index.php/Systemd/Timers#MAILTO"&gt;hacking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Systemd feels like something desirable when scheduling services is your full time job, but not for personal scripts when everything is a bit more chaotic.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="what_do_i_want"&gt;&lt;a class="headerlink" href="#what_do_i_want"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; What do I need?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-what_do_i_want"&gt;
&lt;p&gt;
I feel a serious lack of user-friendly job scheduling software for &lt;b&gt;personal&lt;/b&gt; needs. I want it to be:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;possible for regular people&lt;/b&gt; to use
&lt;/p&gt;
&lt;p&gt;
"Regular" has different meaning for different people, so imagine someone starting to learn to program. They are capable of writing and running scripts, committing and pushing to git, etc. Imagine they want to run their script periodically:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
with &lt;a class="link-up" href="#cron"&gt;cron&lt;/a&gt;: I'd say the difficulty for them is somewhere around 5/10
&lt;/p&gt;
&lt;p&gt;
They need to run &lt;samp class="inline"&gt;crontab -e&lt;/samp&gt;, google the syntax, paste the path to their script, save and exit. That's it.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
with &lt;a class="link-up" href="#systemd"&gt;systemd&lt;/a&gt;: I'd say the difficulty is 9/10
&lt;/p&gt;
&lt;p&gt;
Several steps, confusing syntax and boilerplate, multiple different commands. It's not trivial even for experienced programmers.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
In addition, both of these would behave in confusing ways with respect to environment, error reporting, and logging.
&lt;/p&gt;
&lt;p&gt;
It's understandable why these systems are so complex (they are very powerful and flexible!), but it's not impossible to have an alternative and user-friendlier interface for simple (cron-like) usecases.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
as &lt;b&gt;easy to configure&lt;/b&gt; as regular cron
&lt;/p&gt;
&lt;p&gt;
So you can edit the single plaintext configuration file, quickly adjust the jobs, check and apply configuration immediately.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;better specs&lt;/b&gt; for jobs
&lt;/p&gt;
&lt;p&gt;
dependencies, timeouts, resource policies and retries without hacky wrappers and boilerplate
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
keeping configuration under &lt;b&gt;version control&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
This is easy with systemd, and also possible with cron (with some extra hacks).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
better means of &lt;b&gt;monitoring&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
How often are the jobs running? Which ones are most flaky? How much resources are they using? 
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
simple way of running in &lt;b&gt;user's environment&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
It's understandable that cron/systemd shell environment is kept minimal, but for personal scripts, you want the same environment as in your interactive shell.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
means of &lt;b&gt;logging&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
E.g. easy logging to the filesystem for later inspection.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
means of &lt;b&gt;notification&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
E.g. alternative ways of failure notification (e.g. sending desktop/phone notification).
&lt;/p&gt;
&lt;p&gt;
Currently, I'm using &lt;a href="https://wiki.archlinux.org/index.php/Mutt"&gt;mutt&lt;/a&gt; for that which is fine, but TODO
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="other"&gt;&lt;a class="headerlink" href="#other"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Alternative schedulers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-other"&gt;
&lt;p&gt;
Some of the tools I tried, none of which really satisfied me:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/mesos/chronos"&gt;mesos/chronos&lt;/a&gt;: too heavyweight to use personally&lt;/li&gt;
&lt;li&gt;&lt;a href="https://habilis.net/cronic"&gt;cronic&lt;/a&gt;: simple wrapper that helps with emailing on non-zero exit code, but not much else.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://github.com/instacart/ohmycron"&gt;instacart/ohmycron&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Supports locks to prevent simultaneous jobs, loads user environment and PATH.
&lt;/p&gt;
&lt;p&gt;
The interesting idea is setting it as a &lt;a href="https://github.com/instacart/ohmycron#ohmycron-as-the-cron-shell"&gt;cron shell&lt;/a&gt;, which can enhance cron syntax.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a id="huginn"&gt;&lt;/a&gt;&lt;a href="https://github.com/huginn/huginn"&gt;huginn&lt;/a&gt;: great example of a &lt;b&gt;user-friendly&lt;/b&gt; tool
&lt;/p&gt;
&lt;p&gt;
One thing that makes it different is that it's reactive and mainly event/data driven, so dependencies are first class citizens to the workflow.
There are multiple ways of inspecting jobs, e.g. list with some stats on events and dependency diagram. I highly recommend checking out &lt;a href="https://github.com/huginn/huginn#examples"&gt;example&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It seems good for simple pipelines (e.g. scrape something/transform/send Telegram notification), but you're gonna need a real programming language to do something more complicated. It's possible to run &lt;a href="https://huginnio.herokuapp.com/agents#ShellCommandAgent"&gt;shell commands&lt;/a&gt; and &lt;a href="https://github.com/huginn/huginn/wiki/Creating-a-new-agent"&gt;write external agents&lt;/a&gt;, but the primary interface for editing is GUI. That makes it not very programmer friendly, and in addition it suffers from the same issues as &lt;a class="link-up" href="#systemd"&gt;systemd&lt;/a&gt; in that aspect (e.g. no bulk edit for jobs).
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://dshearer.github.io/jobber/doc/v1.4/#jobfile"&gt;jobber&lt;/a&gt;: looks the most promising so far
&lt;/p&gt;
&lt;p&gt;
Supported:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;plaintext configuration (yaml)&lt;/li&gt;
&lt;li&gt;job execution history&lt;/li&gt;
&lt;li&gt;quickly testing jobs&lt;/li&gt;
&lt;li&gt;pausing/resuming jobs&lt;/li&gt;
&lt;li&gt;success/failure notifications&lt;/li&gt;
&lt;li&gt;backoffs (although they weren't configurable last time I checked)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
However, still no timeouts, dependencies, and jobs can only run at the schedule, like &lt;a class="link-up" href="#cron"&gt;cron&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-26]&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; Thanks to everyone who suggested alternatives in the comments and linked discussions!
&lt;/p&gt;
&lt;p&gt;
Sadly, most of them are pretty heavy: often distributed, aiming at orchestrating clusters and grids, which is quite an overkill for my humble personal needs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="solution"&gt;&lt;a class="headerlink" href="#solution"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Solution?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-solution"&gt;
&lt;p&gt;
&lt;a class="link-up" href="#systemd"&gt;Systemd&lt;/a&gt; feels almost perfect except for its boilerplate and being somewhat user-unfriendly.
&lt;/p&gt;
&lt;p&gt;
What if we took the good bit that cron has (easy means of editing jobs), and tried to do the same within systemd?
&lt;/p&gt;
&lt;p&gt;
Imagine a frontend (let's name it &lt;code class="inline"&gt;systemdtab&lt;/code&gt;), that gave something similar to cron experience:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
you type &lt;code class="inline"&gt;systemdtab -e&lt;/code&gt;, and that opens the text editor with your configuration
&lt;/p&gt;
&lt;p&gt;
You can adjust your jobs as you wish, save the file and exit. It can check syntax the same way &lt;code class="inline"&gt;crontab -e&lt;/code&gt; checks it, and prompt to retry in case of typos.
&lt;/p&gt;
&lt;p&gt;
Once you exit, your changes are applied automatically: 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;samp class="inline"&gt;systemdtab&lt;/samp&gt; generates individual unit files from your output&lt;/li&gt;
&lt;li&gt;replaces the old unit files with the new ones and restarts the daemon&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
considering the boilerplate, it seems that the systemdtab config could be a script (e.g. &lt;samp class="inline"&gt;~/.systemdtab.py&lt;/samp&gt;), that generates the actual Systemd unit files
&lt;/p&gt;
&lt;p&gt;
It doesn't matter which language is used, it could be bash, python or anything. It would allow one to massively save on boilerplate if you're running sets of similar jobs.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;the configuration is kept in a plaintext file, which makes it trivial to inspect and version control.&lt;/li&gt;
&lt;li&gt;some means of simple visualization and monitoring, e.g. similar to &lt;a class="link-up" href="#huginn"&gt;huginn&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
This doesn't have to be a replacement or something, &lt;samp class="inline"&gt;systemdtab&lt;/samp&gt; can manage its own set of unit files, completely separate from the rest of the services.
&lt;/p&gt;
&lt;p&gt;
&lt;span style="color:darkorange"&gt;&lt;strong&gt;Does such a tool exist?&lt;/strong&gt;&lt;/span&gt; It feels like it's possible to hack together a rough implementation (at least satisfying to me) fairly quickly, but is there really nothing existing? Please let me know!
&lt;/p&gt;
&lt;p&gt;
One tool in a similar spirit is &lt;a href="https://github.com/systemd-cron/systemd-cron"&gt;systemd-cron/systemd-cron&lt;/a&gt;, but it simply maps existing cron job specs into systemd jobs. This seems very useful if you're trying to transition, but doesn't help with my &lt;a class="link-up" href="#what_do_i_want"&gt;needs&lt;/a&gt;..
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="dron"&gt;&lt;a class="headerlink" href="#dron"&gt;¶&lt;/a&gt;dron&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-dron"&gt;
&lt;p&gt;
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-26]&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
After writing this post, I realized that even if there are no existing tools, the shortcomings of systemd might be fairly easy to overcome. So I hacked together &lt;a href="https://github.com/karlicoss/dron"&gt;dron&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="phone"&gt;&lt;a class="headerlink" href="#phone"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Phone jobs?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-phone"&gt;
&lt;p&gt;
That's another problem I sort of solved for myself, but not fully satisfied.
&lt;/p&gt;
&lt;p&gt;
I need to export app data regularly from my (rooted) Android phone (e.g. see &lt;a href="my-data.html#bluemaestro"&gt;here&lt;/a&gt;). Export scripts themselves are trivial, it's just a matter of copying files from &lt;samp class="inline"&gt;/data/data/&lt;/samp&gt; directory. However, there is no software for Android to run these scripts regularly.
&lt;/p&gt;
&lt;p&gt;
At the moment, I'm using &lt;a href="https://llamalab.com/automate"&gt;Automate app&lt;/a&gt; to run them. Automate is great, but it feels a bit wrong running a shell script using a complex flowchart, so I'd be interested to know if there are simpler alternatives.
&lt;/p&gt;
&lt;p&gt;
Ideally, it would be a simple app that allows running shell scripts at regular intervals, keeping logs and notifying when they fail. 
&lt;/p&gt;
&lt;p&gt;
&lt;span style="color:darkorange"&gt;&lt;strong&gt;Is there such an app?&lt;/strong&gt;&lt;/span&gt; Please let me know if you know one!
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="android_cron"&gt;&lt;a class="headerlink" href="#android_cron"&gt;¶&lt;/a&gt;cron?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-android_cron"&gt;
&lt;p&gt;
Thanks to a commenter who &lt;a href="https://beepb00p.xyz/scheduler.html#isso-103"&gt;suggested&lt;/a&gt; that &lt;a href="https://play.google.com/store/apps/details?id=com.termux"&gt;Termux&lt;/a&gt; got cron daemon. I tried it out, and it works!
&lt;/p&gt;
&lt;p&gt;
The downsides are:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
something still needs to run cron daemon at startup
&lt;/p&gt;
&lt;p&gt;
On Linux, this is achieved by the init system, but it turns out &lt;a href="https://android.stackexchange.com/questions/6558/how-can-i-run-a-script-on-boot"&gt;a bit tricky&lt;/a&gt; to use even on rooted phone.
&lt;/p&gt;
&lt;p&gt;
So I'm just starting it on boot via Automate app at the moment.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;would be nice to have a GUI based tool as it's not very convenient to edit shell scripts on Android (I just used interactive &lt;a href="https://developer.android.com/studio/command-line/adb"&gt;adb shell&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;I'm not sure how it behaves with respect to the power saving mode, etc. Ideally you'd want it to integrate with &lt;a href="https://developer.android.com/reference/android/app/job/JobScheduler"&gt;JobScheduler&lt;/a&gt; Android APIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
Updates:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-19]&lt;/span&gt;&lt;/span&gt; added section on &lt;a class="link-up" href="#huginn"&gt;huginn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-26]&lt;/span&gt;&lt;/span&gt; added sections: &lt;a class="link-up" href="#dron"&gt;dron&lt;/a&gt; and &lt;a class="link-up" href="#android_cron"&gt;using cron on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;18 January 2020&lt;/div&gt;
    &lt;/section&gt;
    

    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_scheduler" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/scheduler.html" rel="alternate"/>
    <published>2020-01-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/my-data.html</id>
    <title>What data on myself I collect and why?</title>
    <updated>2020-01-12T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="dataliberation pkm quantifiedself" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;What data on myself I collect and why? | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/my-data.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/my-data.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="What data on myself I collect and why? | beepb00p" property="og:title"/&gt;
        &lt;meta content="How I am using 50+ sources of my personal data" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;What data on myself I collect and why?&lt;/h1&gt;
    &lt;div class="summary"&gt;How I am using 50+ sources of my personal data
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
This is the list of personal data sources I use or planning to use with rough guides on how to get your hands on that data if you want it as well.
&lt;/p&gt;
&lt;p&gt;
It's still incomplete and I'm going to update it regularly.
&lt;/p&gt;
&lt;p&gt;
My goal is &lt;b&gt;automating data collection to the maximum extent possible&lt;/b&gt; and making it work in the background, so one can set up pipelines once and hopefully never think about it again.
&lt;/p&gt;
&lt;p&gt;
This is kind of a follow-up on my previous post on the &lt;a href="sad-infra.html"&gt;sad state of personal data&lt;/a&gt;, and part of my personal way of getting around this sad state.
&lt;/p&gt;
&lt;p&gt;
If you're terrified by the long list, you can jump straight into &lt;a class="link-down" href="#consumers"&gt;"Data consumers"&lt;/a&gt; section to find out how I use it.
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why"&gt;1. Why do you collect X? How do you use your data?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#backup"&gt;backup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lifelogging"&gt;lifelogging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#qs"&gt;quantified self&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#what"&gt;2. What do I collect/want to collect?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#amazon"&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arbtt"&gt;Arbtt (desktop time tracker)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bitbucket"&gt;Bitbucket (repositories)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bluemaestro"&gt;Bluemaestro (environment sensor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blood"&gt;Blood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browser_history"&gt;Browser history (Firefox/Chrome)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emfit"&gt;Emfit QS (sleep tracker)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#endomondo"&gt;Endomondo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facebook"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#messenger"&gt;Facebook Messenger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feedbin"&gt;Feedbin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#feedly"&gt;Feedly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fitbit"&gt;Fitbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#foursquare"&gt;Foursquare/Swarm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github_repos"&gt;Github (repositories)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#github_events"&gt;Github (events)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gmail"&gt;Gmail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#goodreads"&gt;Goodreads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#takeout"&gt;Google takeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hackernews"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Hackernews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hsbc"&gt;HSBC bank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hypothesis"&gt;Hypothesis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instapaper"&gt;Instapaper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#jawbone"&gt;Jawbone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kindle"&gt;Kindle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kobo"&gt;Kobo reader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lastfm"&gt;Last.fm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#monzo"&gt;Monzo bank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nomie"&gt;Nomie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nutrition"&gt;Nutrition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#photos"&gt;Photos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pdfs"&gt;PDF annotations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pinboard"&gt;Pinboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Plaintext notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pocket"&gt;Pocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reddit"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rtm"&gt;Remember the Milk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rescuetime"&gt;Rescuetime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shell"&gt;Shell history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sleep"&gt;Sleep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sms_calls"&gt;Sms/calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spotify"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stackexchange"&gt;Stackexchange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#taplog"&gt;Taplog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#telegram"&gt;Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#twitter"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vk"&gt;VK.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#weight"&gt;Weight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whatsapp"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Whatsapp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#23andme"&gt;23andme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#consumers"&gt;3. Data consumers&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#search"&gt;Instant search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#promnesia"&gt;promnesia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timeline"&gt;timeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mypkg"&gt;&lt;code class="inline"&gt;HPI&lt;/code&gt; python package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;4. --&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="why"&gt;&lt;a class="headerlink" href="#why"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Why do you collect X? How do you use your data?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-why"&gt;
&lt;p&gt;
All things considered, I think it's a fair question!
Why bother with all this &lt;a href="./tags.html#infra"&gt;infrastructure&lt;/a&gt; and hoard the data if you never use it?
&lt;/p&gt;
&lt;p&gt;
In the next section, I will elaborate on each specific data source, but to start with I'll list the rationales that all of them share:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="backup"&gt;&lt;a class="headerlink" href="#backup"&gt;¶&lt;/a&gt;backup&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-backup"&gt;
&lt;p&gt;
It may feel unnecessary, but shit happens. What if your device dies, account gets suspended for some reason or the company goes bust?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="lifelogging"&gt;&lt;a class="headerlink" href="#lifelogging"&gt;¶&lt;/a&gt;&lt;a href="./tags.html#lifelogging"&gt;lifelogging&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-lifelogging"&gt;
&lt;p&gt;
Most data in digital form got timestamps, so automatically, without manual effort, constitutes data for your timeline.
&lt;/p&gt;
&lt;p&gt;
I want to remember more, be able to review my past and bring back and reflect on memories. Practicing lifelogging helps with that.
&lt;/p&gt;
&lt;p&gt;
It feels very wrong that things can be forgotten and lost forever.
It's understandable from the neuroscience point of view, i.e. the brain has limited capacity and it would be too distracting to remember everything all the time.
That said, I want to have a &lt;b&gt;choice&lt;/b&gt; whether to forget or remember events, and I'd like to be able to potentially access forgotten ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="qs"&gt;&lt;a class="headerlink" href="#qs"&gt;¶&lt;/a&gt;&lt;a href="./tags.html#quantifiedself"&gt;quantified self&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-qs"&gt;
&lt;p&gt;
Most collected digital data is somewhat quantitative and can be used to analyze your body or mind.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="what"&gt;&lt;a class="headerlink" href="#what"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; What do I collect/want to collect?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-what"&gt;
&lt;p&gt;
As I mentioned, most of the collected data serve as a means of backup/lifelogging/quantified self, so I won't mention them again in the 'Why' sections.
&lt;/p&gt;
&lt;p&gt;
All my data collection pipelines are &lt;b&gt;automatic unless mentioned otherwise&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
Some scripts are still private so if you want to know more, let me know so I can prioritize sharing them.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="amazon"&gt;&lt;a class="headerlink" href="#amazon"&gt;¶&lt;/a&gt;Amazon&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-amazon"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/jbms/finance-dl"&gt;jbms/finance-dl&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;was planning to correlate them with &lt;a class="link-down" href="#monzo"&gt;monzo&lt;/a&gt;/&lt;a class="link-down" href="#hsbc"&gt;HSBC&lt;/a&gt; transactions, but haven't got to it yet&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="arbtt"&gt;&lt;a class="headerlink" href="#arbtt"&gt;¶&lt;/a&gt;Arbtt (desktop time tracker)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-arbtt"&gt;
&lt;p&gt;
How: &lt;a href="https://arbtt.nomeata.de"&gt;arbtt-capture&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;haven't used it yet, but it could be a rich source of lifelogging context&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="bitbucket"&gt;&lt;a class="headerlink" href="#bitbucket"&gt;¶&lt;/a&gt;Bitbucket (repositories)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-bitbucket"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/samkuehn/bitbucket-backup"&gt;samkuehn/bitbucket-backup&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why: 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
proved especially useful considering Atlassian is going to &lt;a href="https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket"&gt;&lt;b&gt;wipe&lt;/b&gt;&lt;/a&gt; mercurial repositories
&lt;/p&gt;
&lt;p&gt;
I've got lots of private mercurial repositories with university homework and other early projects, and it's sad to think of people who will lose theirs during this wipe.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="bluemaestro"&gt;&lt;a class="headerlink" href="#bluemaestro"&gt;¶&lt;/a&gt;&lt;a href="https://bluemaestro.com/products/product-details/bluetooth-environmental-monitor-and-logger"&gt;Bluemaestro&lt;/a&gt; (environment sensor)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-bluemaestro"&gt;
&lt;p&gt;
How: sensor syncs with phone app via Bluetooth, &lt;samp class="inline"&gt;/data/data/com.bluemaestro.tempo_utility/databases/&lt;/samp&gt; is regularly copied to grab the data.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;temperature during sleep data for the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
lifelogging: capturing weather conditions information
&lt;/p&gt;
&lt;p&gt;
E.g. I can potentially see temperature/humidity readings along with my photos from hiking or skiing.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="blood"&gt;&lt;a class="headerlink" href="#blood"&gt;¶&lt;/a&gt;Blood&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-blood"&gt;
&lt;p&gt;
How: via &lt;a href="https://thriva.co"&gt;thriva&lt;/a&gt;, data imported manually into an org-mode table (not doing too frequently so wasn't worth automated scraping)
&lt;/p&gt;
&lt;p&gt;
Also tracked glucose and ketones (with &lt;a href="https://freestylediabetes.co.uk/freestyle-libre"&gt;freestyle libre&lt;/a&gt;) for a few days out of curiosity, also didn't bother automating it.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;contributes to the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;, could be a good way of establishing your baselines&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="browser_history"&gt;&lt;a class="headerlink" href="#browser_history"&gt;¶&lt;/a&gt;Browser history (Firefox/Chrome)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-browser_history"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/promnesia/tree/master/scripts"&gt;custom scripts&lt;/a&gt;, copying the underlying sqlite databases directly, running on my computers and phone.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="emfit"&gt;&lt;a class="headerlink" href="#emfit"&gt;¶&lt;/a&gt;&lt;a href="https://shop-eu.emfit.com/products/emfit-qs"&gt;Emfit QS&lt;/a&gt; (sleep tracker)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-emfit"&gt;
&lt;p&gt;
Emfit QS is kind of a medical grade sleep tracker. It's more expensive than wristband ones (e.g. &lt;a class="link-down" href="#fitbit"&gt;fitbit&lt;/a&gt;, &lt;a class="link-down" href="#jawbone"&gt;jawbone&lt;/a&gt;) but also more reliable and gives more data.
&lt;/p&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/backup-emfit"&gt;emfitexport&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;sleep data for the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="endomondo"&gt;&lt;a class="headerlink" href="#endomondo"&gt;¶&lt;/a&gt;Endomondo&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-endomondo"&gt;
&lt;p&gt;
How: Endomondo collects GPS data, and HR data (via &lt;a href="https://uk.wahoofitness.com/devices/heart-rate-monitors/wahoo-tickr-x-heart-rate-strap"&gt;Wahoo Tickr X strap&lt;/a&gt;). Then, &lt;a href="https://github.com/karlicoss/endoexport"&gt;karlicoss/endoexport&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;exercise data for the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="facebook"&gt;&lt;a class="headerlink" href="#facebook"&gt;¶&lt;/a&gt;Facebook&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-facebook"&gt;
&lt;p&gt;
How: manual archive export.
&lt;/p&gt;
&lt;p&gt;
I barely use Facebook, so don't even bother doing it regularly.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="messenger"&gt;&lt;a class="headerlink" href="#messenger"&gt;¶&lt;/a&gt;Facebook Messenger&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-messenger"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/fbmessengerexport"&gt;karlicoss/fbmessengerexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="feedbin"&gt;&lt;a class="headerlink" href="#feedbin"&gt;¶&lt;/a&gt;Feedbin&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-feedbin"&gt;
&lt;p&gt;
How: via API
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="feedly"&gt;&lt;a class="headerlink" href="#feedly"&gt;¶&lt;/a&gt;Feedly&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-feedly"&gt;
&lt;p&gt;
How: via API
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="fitbit"&gt;&lt;a class="headerlink" href="#fitbit"&gt;¶&lt;/a&gt;Fitbit&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-fitbit"&gt;
&lt;p&gt;
How: manual CSV export, as I only used it for few weeks. Then the sync stopped working and I had to return it.
However, it seems &lt;a href="https://dev.fitbit.com/build/reference/web-api/intraday-requests"&gt;possible&lt;/a&gt; via API.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;activity data for the &lt;a class="link-down" href="#dashboard"&gt;#dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="foursquare"&gt;&lt;a class="headerlink" href="#foursquare"&gt;¶&lt;/a&gt;Foursquare/Swarm&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-foursquare"&gt;
&lt;p&gt;
How: via API
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="github_repos"&gt;&lt;a class="headerlink" href="#github_repos"&gt;¶&lt;/a&gt;Github (repositories)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-github_repos"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/josegonzalez/python-github-backup"&gt;github-backup&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;capable of exporting starred repositories as well, so if the authors delete them I will still have them&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="github_events"&gt;&lt;a class="headerlink" href="#github_events"&gt;¶&lt;/a&gt;Github (events)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-github_events"&gt;
&lt;p&gt;
How: manually requested archive (once), after that automatic &lt;a href="https://github.com/karlicoss/ghexport"&gt;karlicoss/ghexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt; in comments/open issues, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="gmail"&gt;&lt;a class="headerlink" href="#gmail"&gt;¶&lt;/a&gt;Gmail&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-gmail"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/joeyates/imap-backup"&gt;imap-backup&lt;/a&gt;, &lt;a class="link-down" href="#takeout"&gt;Google Takeout&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;this is arguably &lt;b&gt;the most important&lt;/b&gt; thing you should export considering how heavily everything relies on email&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="goodreads"&gt;&lt;a class="headerlink" href="#goodreads"&gt;¶&lt;/a&gt;Goodreads&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-goodreads"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/goodrexport"&gt;karlicoss/goodrexport&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="takeout"&gt;&lt;a class="headerlink" href="#takeout"&gt;¶&lt;/a&gt;Google takeout&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-takeout"&gt;
&lt;p&gt;
How: semi-automatic. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;only manual step: enable scheduled exports (you can schedule 6 per year at a time), and choose to keep it on Google Drive in export settings&lt;/li&gt;
&lt;li&gt;mount your Google Drive (e.g. via &lt;a href="https://github.com/astrada/google-drive-ocamlfuse"&gt;google-drive-ocamlfuse&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;keep a script that checks mounted Google Drive for fresh takeout and moves it somewhere safe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Google collects lots of data, which you could put to some good use. However, old data is getting &lt;a href="./takeout-data-gone.html"&gt;wiped&lt;/a&gt;, so it's important to export Takeout regularly.&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(potentially) search history for &lt;a class="link-down" href="#promnesia"&gt;promnesia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;search&lt;/a&gt; in youtube watch history&lt;/li&gt;
&lt;li&gt;location data for lifelogging and the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt; (activity)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="hackernews"&gt;&lt;a class="headerlink" href="#hackernews"&gt;¶&lt;/a&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Hackernews&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-hackernews"&gt;
&lt;p&gt;
How: haven't got to it yet. It's going to require:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;extracting upvotes/saved items via web scraping since Hackernews doesn't offer an API for that. Hopefully, there is an existing library for that.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
I'm also using &lt;a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic"&gt;Materialistic&lt;/a&gt; app that has its own 'saved' posts and doesn't synchronize with Hackernews. 
&lt;/p&gt;
&lt;p&gt;
Exporting them is going to require copying the database directly from the app private storage.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Why: same reasons as &lt;a class="link-down" href="#reddit"&gt;Reddit&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="hsbc"&gt;&lt;a class="headerlink" href="#hsbc"&gt;¶&lt;/a&gt;HSBC bank&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-hsbc"&gt;
&lt;p&gt;
How: manual exports of monthly PDFs with transactions. They don't really offer API, so unless you want to web scrape and deal with 2FA, it seems it's the best you can do.
&lt;/p&gt;
&lt;p&gt;
Why
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;personal finance; used it with &lt;a href="https://github.com/karlicoss/hsbc-parser"&gt;karlicoss/hsbc-parser&lt;/a&gt; to feed into &lt;a href="https://hledger.org"&gt;hledger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="hypothesis"&gt;&lt;a class="headerlink" href="#hypothesis"&gt;¶&lt;/a&gt;&lt;a href="https://hypothes.is"&gt;Hypothesis&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-hypothesis"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/hypexport"&gt;karlicoss/hypexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;quick todos via &lt;a class="link-down" href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="instapaper"&gt;&lt;a class="headerlink" href="#instapaper"&gt;¶&lt;/a&gt;Instapaper&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-instapaper"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/instapexport"&gt;karlicoss/instapexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;, in particular implementing overlay with highlights&lt;/li&gt;
&lt;li&gt;quick todos via &lt;a class="link-down" href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="jawbone"&gt;&lt;a class="headerlink" href="#jawbone"&gt;¶&lt;/a&gt;Jawbone&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-jawbone"&gt;
&lt;p&gt;
How: via API.
Jawbone is dead now, so if you haven't exported it already, likely your data is lost forever.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;sleep data for the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="kindle"&gt;&lt;a class="headerlink" href="#kindle"&gt;¶&lt;/a&gt;Kindle&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-kindle"&gt;
&lt;p&gt;
How: manually exported &lt;samp class="inline"&gt;MyClippings.txt&lt;/samp&gt; from Kindle. Potentially can be automated similarly to &lt;a class="link-down" href="#kobo"&gt;Kobo&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="kobo"&gt;&lt;a class="headerlink" href="#kobo"&gt;¶&lt;/a&gt;&lt;a href="https://www.kobo.com"&gt;Kobo&lt;/a&gt; reader&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-kobo"&gt;
&lt;p&gt;
How: almost automatic via &lt;a href="https://github.com/karlicoss/kobuddy"&gt;karlicoss/kobuddy&lt;/a&gt;. Manual step: having to connect your reader via USB now and then.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="orger-todos.html#krill"&gt;spaced repetition&lt;/a&gt; for unfamiliar words/new concepts via &lt;a class="link-down" href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="lastfm"&gt;&lt;a class="headerlink" href="#lastfm"&gt;¶&lt;/a&gt;Last.fm&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-lastfm"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/lastfm-backup"&gt;karlicoss/lastfm-backup&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="monzo"&gt;&lt;a class="headerlink" href="#monzo"&gt;¶&lt;/a&gt;Monzo bank&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-monzo"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/monzoexport"&gt;karlicoss/monzoexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;automatic personal finance, fed into &lt;a href="https://hledger.org"&gt;hledger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="nomie"&gt;&lt;a class="headerlink" href="#nomie"&gt;¶&lt;/a&gt;&lt;a href="https://nomie.app"&gt;Nomie&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-nomie"&gt;
&lt;p&gt;
How: regular copies of &lt;samp class="inline"&gt;/data/data/io.nomie.pro/files/_pouch_events&lt;/samp&gt; and &lt;samp class="inline"&gt;/data/data/io.nomie.pro/files/_pouch_trackers&lt;/samp&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;could be a great tool for detailed lifelogging if you're into it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="nutrition"&gt;&lt;a class="headerlink" href="#nutrition"&gt;¶&lt;/a&gt;Nutrition&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-nutrition"&gt;
&lt;p&gt;
I tracked almost all nutrition data for stuff I ingested over the course of a year.
&lt;/p&gt;
&lt;p&gt;
How: I found most existing apps/projects clumsy and unsatisfactory, so I developed my own system.
Not even a proper app, something simpler, basically a domain-specific language in Python to track it.
&lt;/p&gt;
&lt;p&gt;
Tracking process was simply editing a python file and adding entries like:
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;file: food_2017.py&lt;/span&gt;
&lt;span class="org-variable-name"&gt;july_09&lt;/span&gt; = F(
  [  &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;lunch&lt;/span&gt;
       spinach * bag,
       tuna_spring_water * can,       &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;can size for this tuna is 120g&lt;/span&gt;
       beans_broad_wt    * can * 0.5, &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;half can. can size for broad beans is 200g&lt;/span&gt;
       onion_red_tsc     * gr(115)  , &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;grams, explicit&lt;/span&gt;
       cheese_salad_tsc  * 100,       &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;grams, implicit as it makes sense for cheese&lt;/span&gt;
       lime, &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;1 fruit, implicit&lt;/span&gt;
  ],
  [
     &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;dinner...&lt;/span&gt;
  ],
  tea_black * 10,     &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;cups, implicit&lt;/span&gt;
  wine_red * ml * 150, &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;ml, explicit&lt;/span&gt;
)

&lt;span class="org-variable-name"&gt;july_10&lt;/span&gt; = ... &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;more logs&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Comments added for clarity of course, so it'd be more compact normally.
&lt;/p&gt;
&lt;p&gt;
Then some code was used for processing, calculating, &lt;a href="https://postimg.cc/bdSVc43Y"&gt;visualizing&lt;/a&gt;, etc.
&lt;/p&gt;
&lt;p&gt;
Having a real programming language instead of an app let me make it very flexible and expressive, e.g.:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
I could define composite dishes as Python objects, and then easily reuse them.
&lt;/p&gt;
&lt;p&gt;
E.g. if I made four servings of soup on 10.08.2018, ate one immediately and froze other three I would define something like &lt;samp class="inline"&gt;soup_20180810 = [...]&lt;/samp&gt;, and then I can simply reuse &lt;samp class="inline"&gt;soup_20180810&lt;/samp&gt; when I eat it again.
(date was easy to find out as I label food when put it in the freezer anyway)
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;I could make many things implicit, making it pretty expressive without spending time on unnecessary typing&lt;/li&gt;
&lt;li&gt;I rarely had to in nutrient composition manually, I just pasted the product link to supermarket website and had an automatic script to parse nutrient information&lt;/li&gt;
&lt;li&gt;For micronutrients (that usually aren't listed on labels) I used the &lt;a href="https://github.com/alyssaq/usda-sqlite"&gt;USDA sqlite database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The hard thing was actually not entering, but rather not having nutrition information if you're eating out. That year I was mostly cooking my own food, so tracking was fairly easy.
&lt;/p&gt;
&lt;p&gt;
Also I was more interested in lower bounds, (e.g. "do I consume at least recommended amount of micronutrients"), so not having logged food now and then was fine for me.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
I mostly wanted to learn about food composition and how it relates to my diet, and I did
&lt;/p&gt;
&lt;p&gt;
That logging motivated me to learn about different foods and try them out while keeping dishes balanced.
I cooked so many different things, made my diet way more varied and became less picky.
&lt;/p&gt;
&lt;p&gt;
I stopped because cooking did take some time and I actually realized that as long as I actually vary
food and try to eat everything now and then, I hit all recommended amounts of micronutrients, so I stopped.
It's kind of an obvious thing that everyone recommends, but one thing is hearing it as a common wisdom
and completely different is coming to the same conclusion &lt;b&gt;from your data&lt;/b&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;nutritional information contributes to &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="photos"&gt;&lt;a class="headerlink" href="#photos"&gt;¶&lt;/a&gt;Photos&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-photos"&gt;
&lt;p&gt;
How: no extra effort required if you sync/organize your photos and videos now and then.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;obvious source of lifelogging, in addition comes with GPS data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="pdfs"&gt;&lt;a class="headerlink" href="#pdfs"&gt;¶&lt;/a&gt;PDF annotations&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-pdfs"&gt;
&lt;p&gt;
As in, &lt;a href="annotating.html#pdfs"&gt;native PDF annotations&lt;/a&gt;. 
&lt;/p&gt;
&lt;p&gt;
How: nothing needs to be done, PDFs are local to your computer. You do need &lt;a href="https://github.com/karlicoss/my/blob/master/my/pdfs.py"&gt;some tools&lt;/a&gt; to crawl your filesystem and extract the annotations.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
experience of using your PDF annotations (e.g. searching) is &lt;a href="annotating.html#comparison"&gt;&lt;b&gt;extremely poor&lt;/b&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I'm improving this by using &lt;a class="link-down" href="#orger"&gt;orger&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="pinboard"&gt;&lt;a class="headerlink" href="#pinboard"&gt;¶&lt;/a&gt;Pinboard&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-pinboard"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/pinbexport"&gt;karlicoss/pinbexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="notes"&gt;&lt;a class="headerlink" href="#notes"&gt;¶&lt;/a&gt;Plaintext notes&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-notes"&gt;
&lt;p&gt;
Mostly this refers to org-mode files, which I use for notekeeping and logging.
&lt;/p&gt;
&lt;p&gt;
How: nothing needs to be done, they are local. 
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;search&lt;/a&gt; comes for free, it's already local&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="pocket"&gt;&lt;a class="headerlink" href="#pocket"&gt;¶&lt;/a&gt;Pocket&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-pocket"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/pockexport"&gt;karlicoss/pockexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;, in particular implementing overlay with highlights&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="reddit"&gt;&lt;a class="headerlink" href="#reddit"&gt;¶&lt;/a&gt;Reddit&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-reddit"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/rexport"&gt;karlicoss/rexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="orger-todos.html#reddit"&gt;org-mode interface&lt;/a&gt; for processing saved Reddit posts/comments, via &lt;a class="link-down" href="#orger"&gt;orger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="rtm"&gt;&lt;a class="headerlink" href="#rtm"&gt;¶&lt;/a&gt;Remember the Milk&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-rtm"&gt;
&lt;p&gt;
How: ical export from the API.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I stopped using RTM in favor of org-mode, but I can still easily find my old task and notes, which allowed for a smooth transition.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="rescuetime"&gt;&lt;a class="headerlink" href="#rescuetime"&gt;¶&lt;/a&gt;Rescuetime&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-rescuetime"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/rescuexport"&gt;karlicoss/rescuexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;richer contexts for lifelogging&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="shell"&gt;&lt;a class="headerlink" href="#shell"&gt;¶&lt;/a&gt;Shell history&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-shell"&gt;
&lt;p&gt;
How: many shells support keeping timestamps along your commands in history.
&lt;/p&gt;
&lt;p&gt;
E.g. &lt;a href="http://jesrui.sdf-eu.org/remember-all-your-bash-history-forever.html"&gt;"Remember all your bash history forever"&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;potentially can be useful for detailed lifelogging&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="sleep"&gt;&lt;a class="headerlink" href="#sleep"&gt;¶&lt;/a&gt;Sleep&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-sleep"&gt;
&lt;p&gt;
Apart from &lt;a class="link-up" href="#emfit"&gt;automatic collection&lt;/a&gt; of HR data, etc., I collect some extra stats like:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;whether I woke up on my own or after alarm&lt;/li&gt;
&lt;li&gt;whether I still feel sleepy shortly after waking up&lt;/li&gt;
&lt;li&gt;whether I had dreams (and I log dreams if I did)&lt;/li&gt;
&lt;li&gt;I log every time I feel sleepy throughout the day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
How: org-mode, via &lt;a href="https://emacs.stackexchange.com/a/45640/19521"&gt;org-capture into table&lt;/a&gt;.
Alternatively, you could use a spreadsheet for that as well.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I think it's important to find connections between subjective feelings and objective stats like amount of exercise, sleep HR, etc.,
so I'm trying to find correlations using my &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dreams are quite fun part of lifelogging&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="sms_calls"&gt;&lt;a class="headerlink" href="#sms_calls"&gt;¶&lt;/a&gt;Sms/calls&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-sms_calls"&gt;
&lt;p&gt;
How: &lt;a href="https://play.google.com/store/apps/details?id=com.riteshsahu.SMSBackupRestore"&gt;SMS Backup &amp;amp; Restore&lt;/a&gt; app, automatic exports.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="spotify"&gt;&lt;a class="headerlink" href="#spotify"&gt;¶&lt;/a&gt;Spotify&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-spotify"&gt;
&lt;p&gt;
How: export script, using &lt;a href="https://github.com/plamere/spotipy"&gt;plamere/spotipy&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;potentially can be useful for better search in music listening history&lt;/li&gt;
&lt;li&gt;can be used for custom recommendation algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="stackexchange"&gt;&lt;a class="headerlink" href="#stackexchange"&gt;¶&lt;/a&gt;Stackexchange&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-stackexchange"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/karlicoss/stexport"&gt;karlicoss/stexport&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="taplog"&gt;&lt;a class="headerlink" href="#taplog"&gt;¶&lt;/a&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.waterbear.taglog"&gt;Taplog&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-taplog"&gt;
&lt;p&gt;
(not using it anymore, in favor of org-mode)
&lt;/p&gt;
&lt;p&gt;
How: regular copying of &lt;samp class="inline"&gt;/data/data/com.waterbear.taglog/databases/Buttons Database&lt;/samp&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;a quick way of single tap logging (e.g. weight/sleep/exercise etc), contributes to the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="telegram"&gt;&lt;a class="headerlink" href="#telegram"&gt;¶&lt;/a&gt;Telegram&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-telegram"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/fabianonline/telegram_backup"&gt;fabianonline/telegram_backup&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="twitter"&gt;&lt;a class="headerlink" href="#twitter"&gt;¶&lt;/a&gt;Twitter&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-twitter"&gt;
&lt;p&gt;
How: twitter archive (manually, once), after that regular automatic exports via API
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="vk"&gt;&lt;a class="headerlink" href="#vk"&gt;¶&lt;/a&gt;VK.com&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-vk"&gt;
&lt;p&gt;
How: &lt;a href="https://github.com/Totktonada/vk_messages_backup"&gt;Totktonada/vk_messages_backup&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
Sadly VK broke their API so the script stopped working. I'm barely using VK now anyway so not motivated enough to work around it.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="weight"&gt;&lt;a class="headerlink" href="#weight"&gt;¶&lt;/a&gt;Weight&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-weight"&gt;
&lt;p&gt;
How: manually, used &lt;a class="link-up" href="#nomie"&gt;Nomie&lt;/a&gt; and &lt;a class="link-up" href="#taplog"&gt;Taplog&lt;/a&gt;, but now just using org-mode and extracting data with &lt;a href="https://github.com/karlicoss/orgparse"&gt;orgparse&lt;/a&gt;.
Could be potentially automated via wireless scales, but not much of a priority for me.
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;obvious data source for the &lt;a class="link-down" href="#dashboard"&gt;dashboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="whatsapp"&gt;&lt;a class="headerlink" href="#whatsapp"&gt;¶&lt;/a&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Whatsapp&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-whatsapp"&gt;
&lt;p&gt;
Barely using it so haven't bothered yet.   
&lt;/p&gt;
&lt;p&gt;
How: Whatsapp doesn't offer API, so potentially going to require grabbing sqlite database from Android app (&lt;samp class="inline"&gt;/data/data/com.whatsapp/databases/msgstore.db&lt;/samp&gt;)
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a class="link-down" href="#search"&gt;better search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link-down" href="#promnesia"&gt;better browsing history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="23andme"&gt;&lt;a class="headerlink" href="#23andme"&gt;¶&lt;/a&gt;&lt;a href="https://www.23andme.com"&gt;23andme&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-23andme"&gt;
&lt;p&gt;
How: manual &lt;a href="https://customercare.23andme.com/hc/en-us/articles/212196868-Accessing-Your-Raw-Genetic-Data"&gt;raw data export&lt;/a&gt; from 23andme website. I hope your genome doesn't change so often to bother with automatic exports!
&lt;/p&gt;
&lt;p&gt;
Why:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
was planning to setup some sort of automatic search of new genome insights against open source analysis tools
&lt;/p&gt;
&lt;p&gt;
Haven't really had time to think about it yet, and it feels like a hard project out of my realm of competence.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="consumers"&gt;&lt;a class="headerlink" href="#consumers"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Data consumers&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-consumers"&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="search"&gt;&lt;a class="headerlink" href="#search"&gt;¶&lt;/a&gt;Instant search&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-search"&gt;
&lt;p&gt;
Typical search interfaces make me unhappy as they are &lt;b&gt;siloed, slow, awkward to use and don't work offline&lt;/b&gt;.
So I built my own ways around it! I write about it in detail &lt;a href="pkm-search.html#personal_information"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
In essence, I'm mirroring most of my online data like chat logs, comments, etc., as plaintext.
I can overview it in any text editor, and incrementally search over &lt;b&gt;all of it&lt;/b&gt; in a single keypress.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="orger"&gt;&lt;a class="headerlink" href="#orger"&gt;¶&lt;/a&gt;orger&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orger"&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/orger"&gt;orger&lt;/a&gt; is a tool and set of modules for accessing data via org-mode.
It allows searching and overviewing, and in addition, I'm using it for creating tasks straight from native app interfaces (e.g. Reddit/Telegram) and spaced repetition via &lt;a href="https://orgmode.org/worg/org-contrib/org-drill.html"&gt;org-drill&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
I write about it in detail &lt;a href="orger.html"&gt;here&lt;/a&gt; and &lt;a href="orger-todos.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="promnesia"&gt;&lt;a class="headerlink" href="#promnesia"&gt;¶&lt;/a&gt;promnesia&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-promnesia"&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/promnesia#demo"&gt;promnesia&lt;/a&gt; is a browser extension I'm working on to escape silos by &lt;b&gt;unifying annotations and browsing history&lt;/b&gt; from different data sources.
&lt;/p&gt;
&lt;p&gt;
I've been using it for more than a year now and working on final touches to properly release it for other people.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="dashboard"&gt;&lt;a class="headerlink" href="#dashboard"&gt;¶&lt;/a&gt;dashboard&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-dashboard"&gt;
&lt;p&gt;
As a big fan of &lt;a class="post-tag" href="./tags.html#quantified-self"&gt;#quantified-self&lt;/a&gt;, I'm working on personal health, sleep and exercise dashboard, built from various data sources.
&lt;/p&gt;
&lt;p&gt;
I'm working on making it public, you can see some screenshots &lt;a href="https://www.reddit.com/r/QuantifiedSelf/comments/cokt4f/what_do_you_all_do_with_your_data/ewmucgk"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="timeline"&gt;&lt;a class="headerlink" href="#timeline"&gt;¶&lt;/a&gt;timeline&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-timeline"&gt;
&lt;p&gt;
Timeline is a &lt;a class="post-tag" href="./tags.html#lifelogging"&gt;#lifelogging&lt;/a&gt; project I'm working on.
&lt;/p&gt;
&lt;p&gt;
I want to see all my digital history, search in it, filter, easily jump at a specific point in time and see the context when it happened.
That way it works as a sort of external memory.
&lt;/p&gt;
&lt;p&gt;
Ideally, it would look similar to Andrew Louis's &lt;a href="https://hyfen.net/memex"&gt;Memex&lt;/a&gt;, or might even reuse his interface if
he open sources it. I highly recommend watching his talk for inspiration.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="mypkg"&gt;&lt;a class="headerlink" href="#mypkg"&gt;¶&lt;/a&gt;&lt;a href="https://github.com/karlicoss/HPI"&gt;&lt;code class="inline"&gt;HPI&lt;/code&gt;&lt;/a&gt; python package&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-mypkg"&gt;
&lt;p&gt;
This python package is a my personal (python) API to access all collected data.
&lt;/p&gt;
&lt;p&gt;
I'm elaborating on it &lt;a href="hpi.html"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
Happy to answer any questions on my approach and help you with liberating your data.  
&lt;/p&gt;
&lt;p&gt;
In the &lt;a href="exports.html"&gt;next post&lt;/a&gt; I'm elaborating on design decisions behind my data export and access infrastructure.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Updates&lt;/b&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-14]&lt;/span&gt;&lt;/span&gt;: added 'Nutrition', 'Shell history' and 'Sleep' sections&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#dataliberation"&gt;#dataliberation&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#pkm"&gt;#pkm&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#quantifiedself"&gt;#quantifiedself&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;12 January 2020&lt;/div&gt;
    &lt;/section&gt;
    

    
    &lt;br/&gt;
    &lt;div&gt;Discussion:&lt;/div&gt;
    &lt;ul&gt;
    
        &lt;li&gt;&lt;a href="https://www.reddit.com/r/DataHoarder/comments/eol6hw/how_i_collect_and_use_50_sources_of_my_personal"&gt;/r/DataHoarder&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_my_data" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/my-data.html" rel="alternate"/>
    <published>2020-01-12T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/sad-infra.html</id>
    <title>The sad state of personal data and infrastructure</title>
    <updated>2019-12-15T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra pkm" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;The sad state of personal data and infrastructure | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/sad-infra.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/sad-infra.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="The sad state of personal data and infrastructure | beepb00p" property="og:title"/&gt;
        &lt;meta content="Why can't we have nice digital things?" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;The sad state of personal data and infrastructure&lt;/h1&gt;
    &lt;div class="summary"&gt;Why can't we have nice digital things?
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;p&gt;
&lt;b&gt;TLDR&lt;/b&gt;: in this post, I'm going to be exploring &lt;a class="link-down" href="#why"&gt;missed opportunities&lt;/a&gt; at engaging and interacting with your personal data and digital trace,
and speculating on &lt;a class="link-down" href="#exports_are_hard"&gt;why is it that way&lt;/a&gt; and &lt;a class="link-down" href="#data_mirror"&gt;how to make it easier&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
It might seem like a long rant, but I promise you I am not the kind of person who whines and vents just for the sake of it!
&lt;/p&gt;
&lt;p&gt;
In this particular post, I'm just building up motivation and engaging you, and I &lt;a class="link-down" href="#what_do_i_do"&gt;do have&lt;/a&gt; some workarounds and suggestions.
This article got long enough, I also didn't want to mix discussions on motivation (this one) and my take on more technical details and implementation (which will &lt;a class="link-down" href="#followups"&gt;follow&lt;/a&gt;).
&lt;/p&gt;
&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#data_is_trapped"&gt;1. Intro: your data is trapped&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why"&gt;2. Why does it bother me?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#why_search"&gt;search and information access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_productivity"&gt;productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_journalling"&gt;journaling and history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_content"&gt;consuming digital content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_health"&gt;health and body maintenance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_pfinance"&gt;personal finance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_offline"&gt;why I can't do anything when I'm offline or have a wonky connection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_thinking"&gt;tools for thinking and learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_uis"&gt;mediocre interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_social"&gt;communication and collaboration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_backups"&gt;backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why_fin"&gt;--&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#data_is_vanishing"&gt;3. Your data is vanishing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_do_i_want"&gt;4. What do I want?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#exports_are_hard"&gt;5. So what's the problem?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#auth"&gt;authorization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pagination"&gt;pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#consistency"&gt;consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ratelimit"&gt;rate limiting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#errorhandling"&gt;error handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation"&gt;documentation and discovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#parsing"&gt;parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#abstract"&gt;abstract representation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#locked_in"&gt;no access to data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_fin"&gt;--&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#data_mirror"&gt;6. How to make it easier: data mirror&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#caveats"&gt;potential caveats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unsolved"&gt;unsolved problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#what_do_i_do"&gt;7. What do I do?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#exports"&gt;regular data exports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mypkg"&gt;python package to access data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how_it_is_used"&gt;how do I use the data?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sync"&gt;data availability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backups"&gt;backups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;8. Related links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;9. --&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#followups"&gt;followups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="data_is_trapped"&gt;&lt;a class="headerlink" href="#data_is_trapped"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Intro: your data is trapped&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-data_is_trapped"&gt;
&lt;p&gt;
Note: for clarity, I will use &lt;b&gt;&lt;span style="color:green"&gt;'service'&lt;/span&gt; to refer to anything holding your data&lt;/b&gt; and manipulating it, whether it's a website, phone app or a device (i.e. not necessarily something having an online presence).
&lt;/p&gt;
&lt;p&gt;
On one hand, in 2019 things are pretty great. 
For almost anything you wish to do on your computer or phone, you can find several apps, platforms and ecosystems that will handle your task in one way or another.
&lt;/p&gt;
&lt;p&gt;
On the other hand, typically, once the service has your data it's &lt;b&gt;siloed and trapped&lt;/b&gt;.
You are completely at the mercy of service's developers and management. 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Within the same ecosystem (e.g. Google/Apple/Microsoft) you might get some integrations and interactions if the company spares them.
Apart from these, &lt;b&gt;integrations are virtually non-existent&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
We have so much data, yet it just sits there doing nothing.
&lt;/p&gt;
&lt;p&gt;
Now and then &lt;a href="https://github.com/woop/awesome-quantified-self#applications-and-platforms"&gt;some startup&lt;/a&gt; pops up that connects together couple of APIs for a fee.
I don't want to pick on startups but typically it's something trivial like displaying calories consumed from your food tracker app on the same plot as calories burnt from your fitness tracker.
Trivial is okay, and I do acknowledge it's way harder to implement than it looks (I even &lt;a class="link-down" href="#exports_are_hard"&gt;explore why later&lt;/a&gt;).
The sad reality is that as a user, you're lucky if you use the right kind of fitness tracker that the service supports, and you agree with their analysis methodology. Otherwise, sorry!
&lt;/p&gt;
&lt;p&gt;
There are also services like &lt;a href="https://ifttt.com"&gt;IFTTT&lt;/a&gt; which offer pretty primitive integrations and also require cooperation from all parties:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=11378278"&gt;My Heroic and Lazy Stand Against IFTTT (Pinboard)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=19458172"&gt;Google removing Gmail access from IFTTT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Often UIs have inconveniences (or just plain suck). They are often fine for an average user (aka KPIs)
but leave a number of dissatisfied users, who are often the power users.
&lt;/p&gt;
&lt;p&gt;
In essence, services fully control the way they present information to you.
&lt;/p&gt;
&lt;p&gt;
Sure, it's a free market, just switch to another/better service, right? 
Switching to new and unfamiliar tools is cognitively hard enough as it is, but what's even worse is that in most cases you have to &lt;b&gt;leave behind&lt;/b&gt; all your old data. 
You're lucky if you can do some sort of data import/export and if it works properly.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Personal data is in a sad state these days. Let me elaborate.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="why"&gt;&lt;a class="headerlink" href="#why"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Why does it bother me?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-why"&gt;
&lt;style&gt;.outline-4 h4              { font-weight: normal; } &lt;/style&gt;
&lt;style&gt;.outline-4 .outline-text-4 { margin-left: 1em; color: #666; } &lt;/style&gt;
&lt;p&gt;
To be fair, I don't understand how does it &lt;b&gt;not&lt;/b&gt; bother you!
&lt;/p&gt;
&lt;p&gt;
To start with, allow me to quote &lt;a href="orger.html#intro"&gt;myself&lt;/a&gt; here:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
I consume lots of digital content (books, articles, Reddit, Youtube, Twitter, etc.) and most of it I find somewhat useful and insightful.
I want to use that knowledge later, act and build on it. But there's an obstacle: the human brain.
&lt;/p&gt;
&lt;p&gt;
It would be cool to be capable of always remembering and instantly recalling information you've interacted with, metadata and your thoughts on it.
Until we get augmented though, there are two options: the first is just to suck it up and live with it. You might have guessed this is not an option I'm comfortable with.
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
The second option is compensating for your sloppy meaty memory and having information you've read at hand and a quick way of searching over it. 

&lt;/span&gt;&lt;aside class="sidenote"&gt;see &lt;a class="post-tag" href="./tags.html#extendedmind"&gt;#extendedmind&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
&lt;a id="motivation"&gt;&lt;/a&gt;
That sounds simple enough but as with many simple things, in practice you run into obstacles. 
I'll give some I've personally been overcoming as examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;convenience of access, e.g.:
&lt;ul class="org-ul"&gt;
&lt;li&gt;to access highlights and notes on my Kobo ebook I need to actually &lt;b&gt;reach my reader and tap through e-ink&lt;/b&gt; touch screen. Not much fun!&lt;/li&gt;
&lt;li&gt;&lt;div&gt;&lt;span class="before-aside"&gt;if you want to search over annotations in your PDF collections… well good luck, I'm just not aware of such a tool. It's actually way worse: many PDF viewers &lt;b&gt;wouldn't even let you search in highlights&lt;/b&gt; within the file you're currently viewing. &lt;/span&gt;&lt;aside class="sidenote"&gt;see PDF readers &lt;a href="./annotating.html#pdfs"&gt;overview&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;there is no easy way to quickly access all of your twitter favorites, people suggest using hacks like &lt;a href="https://webapps.stackexchange.com/a/131374/68104"&gt;autoscroll extension&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;searching data, e.g.:
&lt;ul class="org-ul"&gt;
&lt;li&gt;search function often just isn't available at all, e.g. on Instapaper, you can't restrict search to highlights. If it is available, it's &lt;b&gt;almost never incremental&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;builtin browser search (&lt;code class="inline"&gt;Ctrl-F&lt;/code&gt;) sucks for the most part: it's not very easy to navigate as you don't get previews and you have to look through every match&lt;/li&gt;
&lt;li&gt;sometimes you vaguely recall reading about something or seeing a link, but &lt;b&gt;don't remember where exactly&lt;/b&gt;. Was it on stackoverflow? Or in some github issue? Or in a conversation with friend?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;data ownership and liberation, e.g.
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
what happens if data disappears or service is down (temporary/permanently) or banned by your government?
&lt;/p&gt;
&lt;p&gt;
You may think you live in a civilized country and that would never affect you. Well, &lt;a href="https://www.theverge.com/2018/5/23/17387146/instapaper-gdpr-europe-access-shut-down-privacy-changes"&gt;in 2018&lt;/a&gt;, Instapaper was unavailable in Europe for several months (!) due to missing the GDPR deadline.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;div&gt;&lt;span class="before-aside"&gt;99% of services &lt;b&gt;don't have support for offline mode&lt;/b&gt;. This may be just a small inconvenience if you're on a train or something, but there is more to it.
What if some sort of apocalypse happens and you lose all access to data? 
That depends on your paranoia level of course, and apocalypse is bad enough as it is, but my take on it is that at least I'd have my data :) &lt;/span&gt;&lt;aside class="sidenote"&gt;see &lt;a class="post-tag" href="./tags.html#offline"&gt;#offline&lt;/a&gt;&lt;/aside&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;if you delete a book on Kobo, not only you can't access its annotations anymore, but they seem to get &lt;b&gt;wiped&lt;/b&gt; from the database.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;
As you can see, my main frustrations are around the lack of the very basic things that computers can do &lt;b&gt;extremely well&lt;/b&gt;: data retrieval and search.
&lt;/p&gt;
&lt;p&gt;
I'll carry on, just listing some examples. Let's see if any of them resonate with you:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_search"&gt;&lt;a class="headerlink" href="#why_search"&gt;¶&lt;/a&gt;search and information access&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_search"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000000"&gt;Why can't I search over all of my personal chat history with a friend, whether it's ICQ logs from 2005 or Whatsapp logs from 2019?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000001"&gt;Why can't I have incremental search over my tweets? Or browser bookmarks? Or over everything I've ever typed/read on the Internet?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000002"&gt;Why can't I search across my watched youtube videos, even though most of them have subtitles hence allowing for full text search?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000003"&gt;Why can't I see the places my friends recommended me on Google maps (or any other maps app)?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
It's just a matter of extracting links to maps from the chat apps and generating a list of coordinates. It's got to be trivial.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_productivity"&gt;&lt;a class="headerlink" href="#why_productivity"&gt;¶&lt;/a&gt;productivity&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_productivity"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000004"&gt;Why can't my Google Home add shopping list items to Google Keep? Let alone other todo-list apps.&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Instead, it puts them in a completely separate product, &lt;a href="https://shoppinglist.google.com"&gt;Shopping list&lt;/a&gt;.
If any of these had an API, &lt;b&gt;any programmer&lt;/b&gt; could write a script to synchronize them in a few hours.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000005"&gt;Why can't I create a task in my todo list or calendar from a conversation on Facebook Messenger/Whatsapp/VK.com/Telegram?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Often, a friend recommends a book to you so you want it to add to your reading list. Or they ask you for something and you want to schedule a reminder.
&lt;/p&gt;
&lt;p&gt;
Instead, these apps &lt;b&gt;actively prevent&lt;/b&gt; me from using builtin Android share functions (because it means leaving the app presumably).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_journalling"&gt;&lt;a class="headerlink" href="#why_journalling"&gt;¶&lt;/a&gt;journaling and history&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_journalling"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000006"&gt;Why do I have to lose all my browser history if I decide to switch browsers?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Even when you switch between major ones like Chrome/Firefox. Let alone for less common alternatives.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000007"&gt;Why can't I see all the places I traveled to on a single map and photos alongside?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I have location tracking and my photos have GPS and timestamps. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000008"&gt;Why can't I see what my heart rate (i.e. excitement) and speed were side by side with the video I recorded on GoPro while skiing?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I've used HR tracking and location tracking, surely that's possible?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000009"&gt;Why can't I easily transfer all my books and metadata if I decide to switch from Kindle to PocketBook or vice versa?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_content"&gt;&lt;a class="headerlink" href="#why_content"&gt;¶&lt;/a&gt;consuming digital content&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_content"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000a"&gt;Why can't I see stuff I highlighted on Instapaper as an overlay on top of web page?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
&lt;a href="https://hypothes.is"&gt;Hypothes.is&lt;/a&gt; and plenty other services can do it, so it's a solved problem, right?
Does every other annotation service really have to reimplement the algorithm from scratch?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000b"&gt;Why can't I have single 'read it later' list, unifying all things saved on Reddit/Hackernews/Pocket?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000c"&gt;Why can't I use my todo app instead of 'Watch later' playlist on youtube?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
'Watch later' is fine for short videos that I can watch over dinner or on my commute.
Longer videos like talks and lectures need proper time commitment hence prioritizing.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000d"&gt;Why can't I 'follow' some user on Hackernews?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Or any other service that doesn't have this feature implemnted.
It's just a matter of regularly fetching new stories/comments by a person and showing new items, right?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000e"&gt;Why can't I see if I've run across a Youtube video because my friend sent me a link months ago?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
The links are there in the chat history, surely it's a trivial task to find it?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000000f"&gt;Why can't I have uniform music listening stats based on my Last.fm/iTunes/Bandcamp/Spotify/Youtube?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000010"&gt;Why am I forced to use Spotify's music recommendation algorithm and don't have an option to try something else?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000011"&gt;Why can't I easily see what were the books/music/art recommended by my friends or some specific Twitter/Reddit/Hackernews users?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000012"&gt;Why my otherwise perfect hackernews &lt;a href="https://play.google.com/store/apps/details?id=io.github.hidroh.materialistic"&gt;app for Android&lt;/a&gt; doesn't share saved posts/comments with the website?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_health"&gt;&lt;a class="headerlink" href="#why_health"&gt;¶&lt;/a&gt;health and body maintenance&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_health"&gt;
&lt;p&gt;
Aka &lt;a class="post-tag" href="./tags.html#quantified-self"&gt;#quantified-self&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000013"&gt;Why can't I tell if I was more sedentary than usual during the past week and whether I need to compensate by doing a bit more exercise?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I have all my location (hence step data), so what's the issue?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000014"&gt;Why can't I see what's the impact of aerobic exercise on my resting HR?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I use HR tracker and sleep tracker, so all the necessary data is there.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000015"&gt;Why can't I have a dashboard for all of my health: food, exercise and sleep to see baselines and trends?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Why do I need to rely on some startup to implement this and trust them with my data?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000016"&gt;Why can't I see the impact of temperature or CO2 concentration in room on my sleep?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
My sensors have Bluetooth and Android apps, why can't they interact with my sleep data?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000017"&gt;Why can't I see how holidays (as in, not going to work) impact my stress levels?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
It's trivial to infer workdays by using my location data.    
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000018"&gt;Why can't I take my Headspace app data and see how/if meditation impacts my sleep?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000019"&gt;Why can't I run a short snippet of code and check some random health advice on the Internet against &lt;b&gt;my&lt;/b&gt; health data.&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_pfinance"&gt;&lt;a class="headerlink" href="#why_pfinance"&gt;¶&lt;/a&gt;personal finance&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_pfinance"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001a"&gt;Why am I forced to manually copy transactions from different banking apps into a spreadsheet?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001b"&gt;Why can't I easily match my Amazon/Ebay orders with my bank transactions?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_offline"&gt;&lt;a class="headerlink" href="#why_offline"&gt;¶&lt;/a&gt;why I can't do anything when I'm offline or have a wonky connection?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_offline"&gt;
&lt;p&gt;
Aka &lt;a class="post-tag" href="./tags.html#offline"&gt;#offline&lt;/a&gt;.
On one hand it's less and less of an issue as the Internet gets more reliable.
On the other if you start relying on it too much, it's becoming more and more of a single point of failure.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_thinking"&gt;&lt;a class="headerlink" href="#why_thinking"&gt;¶&lt;/a&gt;tools for thinking and learning&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_thinking"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001c"&gt;Why when something like &lt;a href="https://en.wikipedia.org/wiki/Method_of_loci"&gt;'mind palace'&lt;/a&gt; is &lt;b&gt;literally possible&lt;/b&gt; with VR technology, we don't see any in use?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001d"&gt;Why can't I easily convert select Instapaper highlights or new foreign words I encountered on my Kindle into Anki flashcards?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_uis"&gt;&lt;a class="headerlink" href="#why_uis"&gt;¶&lt;/a&gt;mediocre interfaces&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_uis"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001e"&gt;Why do I have to suffer from poor management and design decisions in UI changes, even if the interface is not the main reason I'm using the product?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org000001f"&gt;Why can't I leave priorities and notes on my saved Reddit/Hackernews items?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
I've got too many saved things to read them linearly and I'll probably never read them all.
I've also got other things to read and do in general, why can't I have a unified queue for consuming content?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000020"&gt;Why can't I leave private notes on Deliveroo restaurants/dishes, so I'd remember what to order/not to order next time?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000021"&gt;Why do people have to suffer from Google Inbox shutdown?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
Not to undervalue Inbox developers, but fundamentally it's &lt;b&gt;just&lt;/b&gt; a different interface.
I'm sure there are plenty of engineers who would happily support it in their spare time if only they had access to the APIs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_social"&gt;&lt;a class="headerlink" href="#why_social"&gt;¶&lt;/a&gt;communication and collaboration&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_social"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000022"&gt;Why can't I easily share my web or book highlights with a friend? Or just make highlights in select books public?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000023"&gt;Why can't I easily find out other person's expertise without interrogating them, just by looking what they read instead?&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_backups"&gt;&lt;a class="headerlink" href="#why_backups"&gt;¶&lt;/a&gt;backups&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_backups"&gt;
&lt;/div&gt;
&lt;div class="outline-4"&gt;
&lt;h4 id="org0000024"&gt;Why do I have to think about it and actively invest time and effort?&lt;/h4&gt;
&lt;div class="outline-text-4"&gt;
&lt;p&gt;
What about regular people who &lt;b&gt;have no idea&lt;/b&gt; how unreliable computers can be and might find out the hard way?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="why_fin"&gt;&lt;a class="headerlink" href="#why_fin"&gt;¶&lt;/a&gt;--&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-why_fin"&gt;
&lt;p&gt;
I think all of this is pretty sad. Note that I haven't mentioned any mad science fiction stuff like tapping directly into the brain (as much as I wish it was possible).
All these things are totally doable with the &lt;b&gt;technology we already possess&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
I wonder what computing pioneers like &lt;a href="https://en.wikipedia.org/wiki/Douglas_Engelbart#Career_and_accomplishments"&gt;Douglas Engelbart&lt;/a&gt;
(e.g. see &lt;a href="https://mnielsen.github.io/notes/engelbart/engelbart.html"&gt;Augmenting Human Intellect&lt;/a&gt;) or 
&lt;a href="https://en.wikipedia.org/wiki/Alan_Kay#Early_life_and_work"&gt;Alan Kay&lt;/a&gt; thought/think about it and if they'd share my disappointment.
So many years have passed since the computing (and personal computers) spread, and we're still not quite there.
And companies are &lt;b&gt;actively&lt;/b&gt; promoting these silos.
&lt;/p&gt;
&lt;p&gt;
Imagine if all of this was on your fingertips? If you didn't have to think about &lt;b&gt;how and where&lt;/b&gt; to find information and could just access it and interact with it?
If you could let computers handle the boring bits of your life and spend time on fun and creative things?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="data_is_vanishing"&gt;&lt;a class="headerlink" href="#data_is_vanishing"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Your data is vanishing&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-data_is_vanishing"&gt;
&lt;p&gt;
Things I listed above are frustrating enough as they are.
There is another aspect to this: your data is &lt;b&gt;slipping away&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
Privacy concerns are important and it's understandable when people are pissed about services keeping hold of their data instead of properly wiping it.
&lt;/p&gt;
&lt;p&gt;
However, oftentimes the opposite is the case and you find that your data is gone or very hard to access:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
Google Takeout data, that is, all your browser activity, Youtube watch history, etc., are only kept by Google for &lt;a href="./takeout-data-gone.html"&gt;few years&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
If you only began exporting it today, chances are you've already lost some of your history.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Chrome browser deletes history older than &lt;a href="https://superuser.com/a/364475/300795"&gt;90 days&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Firefox browser expires history based on some &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_Expiration"&gt;magic algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/karlicoss/rexport#limitations"&gt;Reddit API&lt;/a&gt; limits your requests to 1000 results only&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline"&gt;Twitter API&lt;/a&gt; would only give you 3200 latest tweets
&lt;/p&gt;
&lt;p&gt;
You can get the rest of your tweets via manual export, but then you'll have to integrate two different ways of accessing data.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://docs.monzo.com/#list-transactions"&gt;Monzo API&lt;/a&gt; only allows fetching all of your transactions within 5 minutes of authentication.
&lt;/p&gt;
&lt;p&gt;
I understand that it's a security measure, but my frustration still stands.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The problems above are sort of technical and in theory, can be solved by some engineering. There is another side to vanishing data:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;information is generally &lt;a href="https://www.gwern.net/Archiving-URLs#link-rot"&gt;rotting away&lt;/a&gt; from the Internet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
comments/posts/tweets you've interacted with get deleted by their authors
&lt;/p&gt;
&lt;p&gt;
While people have the right to delete their data from the Internet, arguably it doesn't extend to derived content like comments or thoughts that you had on it.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
And a bit more:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Jawbone_(company)#2014_to_2017"&gt;Jawbone UP&lt;/a&gt; has gone bust
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
In July 2017 Jawbone announced[73] it would liquidate its assets. Since the app is still available for at least some phones (Android) and the servers seem to be running, &lt;b&gt;it is unclear who has access to collected personal data&lt;/b&gt;. 
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
sweet. In addition, &lt;a href="https://www.jawbone.com/nudge/api"&gt;the API&lt;/a&gt; doesn't work anymore either, so if you haven't been exporting data, it's basically gone.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lobste.rs/s/dwjdml/my_github_account_has_been_restricted_due"&gt;'My GitHub account has been restricted due to US sanctions as I live in Crimea'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://news.ycombinator.com/item?id=22593595"&gt;HN: Github blocked me and all my libraries&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Ok, the author apparently violated Github's code of conduct, and Github has the right to ban him. Does it really require shadowbanning the code
and other people's comments on issues though? Would you be happy if your contributions were gone without any trace?
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://news.ycombinator.com/item?id=21737696"&gt;Verizon/Yahoo Blocking Attempts to Archive Yahoo Groups&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This one is particularly bad.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
If you consider your digital trace &lt;a href="./tags.html#extendedmind"&gt;part of yourself&lt;/a&gt;, this is completely unacceptable. But sadly it's happening all the time.
You &lt;b&gt;can't rely on third parties&lt;/b&gt; to keep it safe.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="what_do_i_want"&gt;&lt;a class="headerlink" href="#what_do_i_want"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; What do I want?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-what_do_i_want"&gt;
&lt;p&gt;
I want all these inconveniences somehow solved, but I live in the real world and it's not gonna magically happen.
So let me be more specific: I argue that one &lt;b&gt;major&lt;/b&gt; reason these tools and integration I want don't exist is that people don't have easy uniform access to their data in the first place.
&lt;/p&gt;
&lt;p&gt;
"Easy" is used here in two senses:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;easy for humans&lt;/b&gt; to look at and browse through
&lt;/p&gt;
&lt;p&gt;
This bit is hard in practice as (typically) the more machine friendly something is, the less human friendly it's.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;easy for programmers&lt;/b&gt; to manipulate, analyze and interact with
&lt;/p&gt;
&lt;p&gt;
Let's concentrate on this part for now. If this is solved, it automatically enables programmers to develop human-friendly tools.
In addition, playing with data and building tools on it feels fun as it is (unlike getting the data).
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
So how would 'easy access to data' look in an ideal world?
Let me present you my speculations on it, and I would be happy to hear your opinions on it!
&lt;/p&gt;
&lt;p&gt;
I want &lt;b&gt;an API&lt;/b&gt; that I can query and get any of my personal data.
Ideally, it wouldn't really matter where the data is and it could be a web API.
&lt;/p&gt;
&lt;p&gt;
Realistically, as of today, the easiest way to quickly access your data and more importantly, play with it, is when it's &lt;b&gt;already on your filesystem&lt;/b&gt;.
&lt;/p&gt;
&lt;div&gt;&lt;span class="before-aside"&gt;
Whether it's plaintext, sqlite or some sort of binary data – doesn't matter, already having it locally saves you from the whole class of problems (which I'm about to pinpoint in the following section).

&lt;/span&gt;&lt;aside class="sidenote"&gt;even better if it's already in your RAM and interpreter, but that's a bit too much to wish for at this point.&lt;/aside&gt;&lt;/div&gt;
&lt;p&gt;
As you've probably noticed, it's almost never the case that you have your personal data locally at hand. You need to spend extra effort to achieve this.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="exports_are_hard"&gt;&lt;a class="headerlink" href="#exports_are_hard"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; So what's the problem?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-exports_are_hard"&gt;
&lt;p&gt;
Hopefully we can agree that the current situation isn't so great.
But I am a software engineer. And chances that if you're reading it, you're very likely a programmer as well. Surely we can deal with that and implement, right?
&lt;/p&gt;
&lt;p&gt;
Kind of, but it's &lt;b&gt;really hard&lt;/b&gt; to retrieve data created by you.
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Recommended soundtrack for rest of the section: &lt;a href="https://www.youtube.com/watch?v=HFepeMG4-6A"&gt;The World's Smallest Violin&lt;/a&gt;, playing for us software engineers.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
At first glance it doesn't look like a big deal. It's just data, right? Every programmer should be capable of getting it from the API, right?
&lt;/p&gt;
&lt;p&gt;
This is until you realize you're probably using at least ten different services, and they all have different purposes,
with various kinds of data, endpoints and restrictions.
&lt;/p&gt;
&lt;p&gt;
Even if you have the capacity and are willing to do it, it's still damn hard.
&lt;/p&gt;
&lt;p&gt;
You're gonna have to deal with the following problems:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="auth"&gt;&lt;a class="headerlink" href="#auth"&gt;¶&lt;/a&gt;authorization&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-auth"&gt;
&lt;p&gt;
That's where it all starts with and it's a mess.
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;easiest scenario: the service lets you generate an API token from its settings and you can just use it. Example: &lt;a href="https://pinboard.in"&gt;pinboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
typical scenario: you need to do the whole &lt;a href="https://aaronparecki.com/oauth-2-simplified"&gt;Oauth&lt;/a&gt; thing. 
&lt;/p&gt;
&lt;p&gt;
That involves creating a client app, getting client id, dealing with scopes and redirect urls, etc.
Pretty tedious, and you certainly can't expect a &lt;b&gt;nonprogrammer&lt;/b&gt; to be able to follow these steps.
&lt;/p&gt;
&lt;p&gt;
Examples: almost every service with an API out there: Twitter/Instapaper/Pocket/Github/etc.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
worst case scenario: the service doesn't even offer a public API. That also has different grades of horrible:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
best worst: service uses a private API and you can spy on the token web app is using in browser dev tools.
&lt;/p&gt;
&lt;p&gt;
Not too bad, but a bit dubious.
&lt;/p&gt;
&lt;p&gt;
Example: Pocket API doesn't give you away highlights unless you &lt;a href="https://github.com/karlicoss/pockexport#setting-up"&gt;mess with it&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
typical worst: no private API, so you need to scrape the data. Sometimes you can grab the cookies from browser dev tools and use them to access your data.
&lt;/p&gt;
&lt;p&gt;
Scraping is orders of magnitude flakier, involves nasty parsing and obviously fragile.
Some services might even actively prevent you from doing so by banning unusual user agents.
&lt;/p&gt;
&lt;p&gt;
Examples: &lt;a href="https://fbchat.readthedocs.io/en/stable/intro.html#sessions"&gt;Facebook Messenger&lt;/a&gt;, &lt;a href="https://github.com/karlicoss/blinkist-backup"&gt;Blinkist&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
worst worst: you need to scrape the data and cookies don't work or expire often.
&lt;/p&gt;
&lt;p&gt;
Basically means you need to use your username/password. Bonus points if there is 2-factor auth involved.
&lt;/p&gt;
&lt;p&gt;
Potentially means you're going to store your password somewhere which is way less secure than using a token.
&lt;/p&gt;
&lt;p&gt;
Example: &lt;a href="https://takeout.google.com"&gt;Google Takeout&lt;/a&gt; exports are not only asynchronous, but also don't have an API so you have to login in order to export.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
All the 'worst' scenarios are extremely flaky and basically impossible for nonprogrammers to use.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="pagination"&gt;&lt;a class="headerlink" href="#pagination"&gt;¶&lt;/a&gt;pagination&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-pagination"&gt;
&lt;p&gt;
Whether you're using API or not, typically you'll have to retrieve multiple chunks of data and merge them after.
&lt;/p&gt;
&lt;p&gt;
In principle, it's not hard to implement it on a one off basis, but unclear how to do it in some universal way because there is no common standard.
&lt;/p&gt;
&lt;p&gt;
Pages might be addressed by page numbers and counts, offsets from start/end of data, before or after with respect to ids or timestamps, etc.
&lt;/p&gt;
&lt;p&gt;
It's quite error prone: content might change under your feet, and if the API developers or you are not careful, you might end up with missing data or even some logical corruption.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="consistency"&gt;&lt;a class="headerlink" href="#consistency"&gt;¶&lt;/a&gt;consistency&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-consistency"&gt;
&lt;p&gt;
If you simply start fetching a json and writing to disk, you'd very quickly end up with a corrupt file on the first network failure.
You've gotta be really careful and ensure atomic writing and updating.
&lt;/p&gt;
&lt;p&gt;
Even if you work around the atomicity issues, chances are you won't be able to guarantee atomic snapshotting as you're fetching your data within multiple requests,
and the data is changing as you retrieve it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="ratelimit"&gt;&lt;a class="headerlink" href="#ratelimit"&gt;¶&lt;/a&gt;&lt;a href="https://nordicapis.com/everything-you-need-to-know-about-api-rate-limiting"&gt;rate limiting&lt;/a&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-ratelimit"&gt;
&lt;p&gt;
No one likes their API hammered, fair enough.
However, rate limits often vary from API endpoint to endpoint and are inherently tedious to get right.
&lt;/p&gt;
&lt;p&gt;
If you're not using the API, you might get banned by DDOS prevention (e.g. Cloudflare) if you're not careful.
&lt;/p&gt;
&lt;p&gt;
Overall, painful and not fun to implement.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="errorhandling"&gt;&lt;a class="headerlink" href="#errorhandling"&gt;¶&lt;/a&gt;error handling&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-errorhandling"&gt;
&lt;p&gt;
Authorization, network, serializing, parsing, storing, synchronizing. 
There are among the most common error sources (as in, actual unrecoverable errors, not necessarily bugs) in software engineering. Generally, getting it right is required for reliably retrieving your data.
&lt;/p&gt;
&lt;p&gt;
In addition, you want to be somewhat &lt;b&gt;semi-defensive&lt;/b&gt;, and this is the hardest kind of error handling:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you want to progress slowly but surely&lt;/li&gt;
&lt;li&gt;you want to make sure it only fails in completely unrecoverable scenarios, otherwise it's going to require constant tending&lt;/li&gt;
&lt;li&gt;and you want to somehow let user know of problems/suspicious data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="documentation"&gt;&lt;a class="headerlink" href="#documentation"&gt;¶&lt;/a&gt;documentation and discovery&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-documentation"&gt;
&lt;p&gt;
If you want &lt;b&gt;all&lt;/b&gt; your data, you have to look carefully through all the documentation and make sure you've got it all covered.
&lt;/p&gt;
&lt;p&gt;
If the service adds some new endpoints, you might never find out.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="parsing"&gt;&lt;a class="headerlink" href="#parsing"&gt;¶&lt;/a&gt;parsing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-parsing"&gt;
&lt;p&gt;
For the most part not an issue, but some websites do not offer an API so you've got not choice but scraping and parsing HTML.
&lt;/p&gt;
&lt;p&gt;
Notorious example: some Hackernews (!) endpoints like 'favorites' are not exposed via &lt;a href="https://github.com/HackerNews/API"&gt;API&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="abstract"&gt;&lt;a class="headerlink" href="#abstract"&gt;¶&lt;/a&gt;abstract representation&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-abstract"&gt;
&lt;p&gt;
Having raw export data (e.g. sqlite database/json file/etc) is nice, but to actually use it you need an abstract representation.
You basically have to reinvent whatever the service developer does on the backend already. 
&lt;/p&gt;
&lt;p&gt;
Notable examples:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;unclear which data types to choose: nullable/non-nullable, string or integer for ids, float or integer for amounts&lt;/li&gt;
&lt;li&gt;timestamps: figuring out whether it was seconds or milliseconds, UTC or local timezone; and zillions of string formats which you need to parse (I had to do it so often that I even memorized the weird argument order in &lt;a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"&gt;&lt;code class="inline"&gt;datetime.strptime&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;which situations are valid, e.g. can id be used as a dictionary key, can you assume that they are increasing, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="locked_in"&gt;&lt;a class="headerlink" href="#locked_in"&gt;¶&lt;/a&gt;no access to data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-locked_in"&gt;
&lt;p&gt;
Sometimes you have no way to access your data at all:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;you are offline: nuff said&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
app data on your phone
&lt;/p&gt;
&lt;p&gt;
Very few apps support data exports; even fewer support it in an automatic and regular way.
Normally, internally, apps keep their data in sqlite databases which is even more convenient than plaintext/csv export. 
&lt;/p&gt;
&lt;p&gt;
However, there are caveats: e.g. on Android, app data is in &lt;code class="inline"&gt;/data/data/&lt;/code&gt; directory, which by default &lt;b&gt;isn't accessible unless you rooted the phone&lt;/b&gt;. 
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;devices that have no means of synchronizing

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="kobo_sync"&gt;&lt;/a&gt;Kobo &lt;b&gt;&lt;b&gt;doesn't seem to support cloud sync for annotations&lt;/b&gt;&lt;/b&gt;. I was considering syncing the database wirelessly, as &lt;a href="https://github.com/dropmeaword/kobo-aura-remote"&gt;there are&lt;/a&gt; some SSH modules for its firmware, but people report it &lt;a href="https://github.com/dropmeaword/kobo-aura-remote/issues/1"&gt;may break wifi&lt;/a&gt; on it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Some devices/apps and formats are &lt;a href="https://en.wikipedia.org/wiki/Vendor_lock-in"&gt;vendor locked&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="what_fin"&gt;&lt;a class="headerlink" href="#what_fin"&gt;¶&lt;/a&gt;--&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-what_fin"&gt;
&lt;p&gt;
Now, remember when I said it was tedious for programmers? 
Constant boilerplate, shitty APIs (you're lucky if the service offers one at all), latency, flakiness, having to code defensively, etc. 
&lt;/p&gt;
&lt;p&gt;
Now think about ordinary people who have no clue what 'API' is.
They deserve to use their data too.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="data_mirror"&gt;&lt;a class="headerlink" href="#data_mirror"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; How to make it easier: data mirror&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-data_mirror"&gt;
&lt;p&gt;
The way I see it, ideally the service you're using provides you with:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
a &lt;b&gt;data mirror&lt;/b&gt; app
&lt;/p&gt;
&lt;p&gt;
Best case scenario is if the service is &lt;a href="https://www.inkandswitch.com/local-first.html"&gt;local-first&lt;/a&gt; in the first place.
However, this may be a long way ahead and there are certain technical difficulties associated with such designs.
&lt;/p&gt;
&lt;p&gt;
I'm suggesting a data mirror app which merely runs in background on the client side
and continuously/regularly sucks in and synchronizes backend data to the latest state.
&lt;/p&gt;
&lt;p&gt;
Ideally this would be exactly the same state the backend uses, although in practice it would be hard from efficiency considerations
(e.g. it's faster for the backend to keep data in the same database instead of separate databases for each user).
&lt;/p&gt;
&lt;p&gt;
It shouldn't be too resource demanding for the backend, e.g. data sync via push notifications basically already does that, but in an even less efficient way.
&lt;/p&gt;
&lt;p&gt;
Data mirror app should dump data into an open machine-friendly format like json/sqlite database/etc.
&lt;/p&gt;
&lt;p&gt;
This solves:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
authorization: however tedious it's to implement, can be handled by the service's developers.
&lt;/p&gt;
&lt;p&gt;
They can make it as secure as necessary (e.g. 2FA/etc), and it's okay as long as you have to log onto it only once.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;pagination/consistency/rate limiting: non-problems, considering it's easier for the service's developers to correctly implement incremental data fetching&lt;/li&gt;
&lt;li&gt;error handling: also the developers' responsibility. They would be better aware of which situations are programming bugs and which have to be handled carefully&lt;/li&gt;
&lt;li&gt;documentation and discovery: hopefully developers are better suited to keep their internal representations and exports consistent (even incentivised as it allows for less code to be written)&lt;/li&gt;
&lt;li&gt;backups: will still have to be done by external means, but the task is massively simplified: you just need to point your backup tool at your data storage&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
minimalistic &lt;b&gt;data bindings&lt;/b&gt; in some reasonable programming language that represent all of this data.
&lt;/p&gt;
&lt;p&gt;
Hopefully, specific language doesn't matter, it's a simple task to map data from one programming language to another.
&lt;/p&gt;
&lt;p&gt;
This solves:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;parsing: developers know better how to get it right; in addition the code can potentially be shared with the backend&lt;/li&gt;
&lt;li&gt;abstract representation: would massively lower the barrier for integrating and interacting with data&lt;/li&gt;
&lt;li&gt;offline: if you have all data locally you've got efficient access without latency and need for extra error handling&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
That's perhaps a naive and oversimplified view.
But to be honest, we're so far away from that that even some small steps towards would be quite a progress.
&lt;/p&gt;
&lt;p&gt;
These suggestions would &lt;b&gt;decouple data from the UI&lt;/b&gt; and let the community develop better tools for consuming and working with it.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="caveats"&gt;&lt;a class="headerlink" href="#caveats"&gt;¶&lt;/a&gt;potential caveats&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-caveats"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
this might be &lt;b&gt;hard to support&lt;/b&gt; for everyone
&lt;/p&gt;
&lt;p&gt;
On the other hand, service developers would have more control on data access patterns, so in a way it might work better.
&lt;/p&gt;
&lt;p&gt;
It would definitely be more efficient than third parties writing kludgy tools to export and backup data.  
&lt;/p&gt;
&lt;p&gt;
In addition, for some services and scenarios, it would give better data locality and lower latencies.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
'average' users often are &lt;b&gt;not motivated enough&lt;/b&gt; to demand such things
&lt;/p&gt;
&lt;p&gt;
In particular, not everyone has or willing to set up necessary infrastructure to run all these things.
&lt;/p&gt;
&lt;p&gt;
However, if implemented properly, there is absolutely nothing preventing running a data mirror on your laptop or even phone.
It really doesn't require much CPU or bandwidth if you support incremental updates.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
services have little motivation to promote this, &lt;b&gt;silos benefit them&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
Having a monopoly on the client interface (e.g. web UI) keeps users on your platform even if you suck.
&lt;/p&gt;
&lt;p&gt;
If anyone can implement a better interface, there would be little opportunity for stuff like ads, and the only way for the service to make money
would be to collect a fee for data collection and hosting. (which I personally would be happy to pay)
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Hopefully all of these issues would be solved by distributed/federated services, but we're pretty far from it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="unsolved"&gt;&lt;a class="headerlink" href="#unsolved"&gt;¶&lt;/a&gt;unsolved problems&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-unsolved"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
deleted content
&lt;/p&gt;
&lt;p&gt;
E.g. imagine you liked someone's post on Facebook, it got mirrored locally, and then the author removed the post.
&lt;/p&gt;
&lt;p&gt;
What's the right thing to do for the data mirror app?
Should it erase just the post you liked from your data mirror?
Should it keep the fact that you liked it at all?
&lt;/p&gt;
&lt;p&gt;
You may disagree with the way such a policy is imposed by the service, hence implement additional logic to keep more data,
and at that point it seems like a matter for legal debate.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
synchronizing data
&lt;/p&gt;
&lt;p&gt;
If you want to access data from multiple devices, you either have to run multiple mirrors, which would be a bit of a hassle, or use some continuous sync service like Dropbox or &lt;a href="https://syncthing.net"&gt;Syncthing&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
That however might not be so atomic, depending on the way data is kept on the disk, since files might be pulled in random or lexicographic order, depending on sync configuration.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
protecting the data
&lt;/p&gt;
&lt;p&gt;
Even if you don't trust your average startup at securing your data, it might be even less safe on average user's disk.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
it's assumed that these tools/integrations are open source and running on computers you own.
&lt;/p&gt;
&lt;p&gt;
Realistically, closed source tools do exist and it's understandable when people want money for their efforts.
&lt;/p&gt;
&lt;p&gt;
From a user's perspective not everyone wants the hassle of running things locally either and many people are happy with online services for the most part.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="what_do_i_do"&gt;&lt;a class="headerlink" href="#what_do_i_do"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; What do I do?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-what_do_i_do"&gt;
&lt;p&gt;
Of course, I'm not expecting someone to come and implement all of this for me.
I could start some sort of movement to demand it from services and platforms, but I hardly see myself as a good fit for that role.
&lt;/p&gt;
&lt;p&gt;
Instead I've put effort into exporting, integrating and utilizing my data on my own according to the suggestions I formulated.
Putting this in writing helped me motivate and summarize many technical and infrastructural decisions.
&lt;/p&gt;
&lt;p&gt;
I'll be describing my setup in more detail in future posts, however here are some bits and pieces:
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="exports"&gt;&lt;a class="headerlink" href="#exports"&gt;¶&lt;/a&gt;regular data exports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-exports"&gt;
&lt;p&gt;
This corresponds to the 'data mirror' bit.
&lt;/p&gt;
&lt;p&gt;
I &lt;a href="my-data.html"&gt;exported/scraped/reverse engineered&lt;/a&gt; pretty much my entire digital trace and figured out automation and infrastructure which works for me.
&lt;/p&gt;
&lt;p&gt;
I've shared &lt;a href="https://github.com/search?type=Repositories&amp;amp;q=user%3Akarlicoss+++topic%3Aexport"&gt;some&lt;/a&gt; of my personal export scripts and tools.
&lt;/p&gt;
&lt;p&gt;
I also have some helper scripts to keep individual exporter's code as clean as possible while ensuring exports are reliable.
&lt;/p&gt;
&lt;p&gt;
As I mentioned, I'll share all of this later in a separate post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="mypkg"&gt;&lt;a class="headerlink" href="#mypkg"&gt;¶&lt;/a&gt;python package to access data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-mypkg"&gt;
&lt;p&gt;
Each data exporter comes with minimal bindings that merely map json/sqlite export into simple datatypes and data classes.
&lt;/p&gt;
&lt;p&gt;
That way anyone who wishes to use data can kick off some reasonable representation, which is not overfitted to my specific needs.
&lt;/p&gt;
&lt;p&gt;
Higher level querying and access, specific to myself is implemented in &lt;a href="hpi.html#examples"&gt;my.&lt;/a&gt; package (note that this post is still in draft stage).
&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://github.com/karlicoss/my"&gt;&lt;code class="inline"&gt;my.&lt;/code&gt;&lt;/a&gt; package allows me to query my data from anywhere, enabling me to use familiar data processing, analysis and visualization tools, and various integrations.
&lt;/p&gt;
&lt;p&gt;
As a nice byproduct I've also finally figured out a reliable and elegant way to deal with &lt;a href="mypy-error-handling.html"&gt;error handling in Python&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="how_it_is_used"&gt;&lt;a class="headerlink" href="#how_it_is_used"&gt;¶&lt;/a&gt;how do I use the data?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-how_it_is_used"&gt;
&lt;p&gt;
Finally, some tools and scripts I've implemented to make possible the interactions &lt;a class="link-up" href="#why"&gt;that I want&lt;/a&gt;:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;A &lt;a href="pkm-search.html"&gt;personal search engine&lt;/a&gt; for quick incremental search of my data and digital trace&lt;/li&gt;
&lt;li&gt;&lt;a href="orger.html"&gt;orger&lt;/a&gt;: tool to convert data into org-mode views for instant and offline search and overview
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="orger-todos.html#reddit"&gt;also&lt;/a&gt; for prioritizing content consumption (e.g. processing Reddit saves)&lt;/li&gt;
&lt;li&gt;&lt;a href="orger-todos.html#krill"&gt;also&lt;/a&gt; for populating my spaced repetition queue&lt;/li&gt;
&lt;li&gt;&lt;a href="orger-todos.html#telegram2org"&gt;also&lt;/a&gt; for creating TODOs straight from Telegram messages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./grasp.html"&gt;grasp&lt;/a&gt;, browser extension to clip links straight into my org-mode notes&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/karlicoss/promnesia"&gt;promnesia&lt;/a&gt;, a browser extension to escape silos by unifying annotations and browsing history from different data sources (still somewhat WIP and needs final touches, but planning to release soon)&lt;/li&gt;
&lt;li&gt;personal health, sleep and exercise dashboard, built from various data sources. I'm in the process of making it public, you can see some screenshots &lt;a href="https://www.reddit.com/r/QuantifiedSelf/comments/cokt4f/what_do_you_all_do_with_your_data/ewmucgk"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I wrote how each specific data source I export contributes to my personal infrastructure &lt;a href="my-data.html#why"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="sync"&gt;&lt;a class="headerlink" href="#sync"&gt;¶&lt;/a&gt;data availability&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-sync"&gt;
&lt;p&gt;
I'm synchronizing everything across my computers with &lt;a href="https://syncthing.net"&gt;syncthing&lt;/a&gt;.   
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="backups"&gt;&lt;a class="headerlink" href="#backups"&gt;¶&lt;/a&gt;backups&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-backups"&gt;
&lt;p&gt;
I'm simply using &lt;a href="https://borgbackup.readthedocs.io/en/stable"&gt;borg backup&lt;/a&gt; against exported data, whether it's kept in json files or sqlite databases.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="links"&gt;&lt;a class="headerlink" href="#links"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Related links&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-links"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;jborichevskiy: &lt;a href="https://news.ycombinator.com/item?id=21659876"&gt;Digital Tools I Wish Existed (HN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commandcenter.blogspot.com/2017/10/the-upspin-manifesto-on-ownership-and.html"&gt;The Upspin manifesto&lt;/a&gt;: On the ownership and sharing of data&lt;/li&gt;
&lt;li&gt;IndieWeb wiki on &lt;a href="https://indieweb.org/silo"&gt;silos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=21921323"&gt;The old Internet died and we watched and did nothing (HN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NetOpWibby: &lt;a href="https://news.ycombinator.com/item?id=21684949"&gt;A Personal API (HN)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Attempts of resolving this sad state:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Solid_(web_decentralization_project)"&gt;Solid&lt;/a&gt;, web decentralization project by Tim Berners-Lee, WWW pioneer and the director of W3C
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
The project "aims to radically change the way Web applications work today, resulting in true data ownership as well as improved privacy" by developing a platform for linked-data applications that are completely decentralized and fully under users' control rather than controlled by other entities.
&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; --&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;p&gt;
I'd be interested to know your opinion or questions, whether on my motivation, or particularities of my suggestions or implementation.
&lt;/p&gt;
&lt;p&gt;
Let me know if you can think of any other data integrations you are missing and perhaps we can think of something together!
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="followups"&gt;&lt;a class="headerlink" href="#followups"&gt;¶&lt;/a&gt;followups&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-followups"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;b&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-12]&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; &lt;a href="my-data.html"&gt;What data on myself I collect and why?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2020-01-18]&lt;/span&gt;&lt;/span&gt;&lt;/b&gt; &lt;a href="scheduler.html"&gt;In search of a friendlier scheduler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#pkm"&gt;#pkm&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;15 December 2019&lt;/div&gt;
    &lt;/section&gt;
    

    
    &lt;br/&gt;
    &lt;div&gt;Discussion:&lt;/div&gt;
    &lt;ul&gt;
    
        &lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=21844105"&gt;&lt;b&gt;hackernews&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
    
        &lt;li&gt;&lt;a href="https://lobste.rs/s/ztwbh4/sad_state_personal_data_infrastructure"&gt;lobste.rs&lt;/a&gt;&lt;/li&gt;
    
        &lt;li&gt;&lt;a href="https://www.reddit.com/r/QuantifiedSelf/comments/ecf8o5/the_sad_state_of_personal_data_and_infrastructure"&gt;/r/QuantifiedSelf&lt;/a&gt;&lt;/li&gt;
    
    &lt;/ul&gt;
    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_sad_infra" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/sad-infra.html" rel="alternate"/>
    <published>2019-12-15T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/exercise-bike-model.html</id>
    <title>Analyzing accuracy of power reported by stationary bike</title>
    <updated>2019-12-08T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="exercise quantifiedself ipython" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Analyzing accuracy of power reported by stationary bike | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        
        &lt;script type="text/javascript"&gt;
 window.MathJax = {
     tex2jax: {
         // note that hakyll source has got double dollar signs due to special meaning in templates
         inlineMath: [ ['$','$'], ["\\(","\\)"] ],
         processEscapes: true
     }
 };
&lt;/script&gt;
&lt;script async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;
        

        &lt;link href="https://beepb00p.xyz/exercise-bike-model.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/exercise-bike-model.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Analyzing accuracy of power reported by stationary bike | beepb00p" property="og:title"/&gt;
        &lt;meta content="How I found my exercise machine to violate laws of physics" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            
&lt;link href="./css/ipynb.css" rel="stylesheet"/&gt;
&lt;link href="./css/ipynb-syntax.css" rel="stylesheet"/&gt;




&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Analyzing accuracy of power reported by stationary bike&lt;/h1&gt;
    &lt;div class="summary"&gt;How I found my exercise machine to violate laws of physics
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
        
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I was curious how effort exerted during the exercise impacts heart rate and whether that correlates strongly with subjective fatigue and exhaustion.&lt;/p&gt;
&lt;p&gt;It seemed that easiest way to experiment would be stationary bike. Running only has single variable, speed. One could of course change incline, but that would be harder to predict.&lt;/p&gt;
&lt;p&gt;For elliptical machine or rowing machine it would be even more complicated!&lt;/p&gt;
&lt;p&gt;With stationary bike, there are two variables that potentially impact power you need to exert:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPM (revolutions per minute), or angular velocity, that should have linear effect on power (no air resistance as it's stationary!)&lt;/li&gt;
&lt;li&gt;resistance, which isn't exactly specified, but one would expect it to be proportional to the force you have to apply (i.e. &lt;a href="https://en.wikipedia.org/wiki/Torque"&gt;torque&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or, simply put, $P = \tau \omega$ (&lt;a href="https://en.wikipedia.org/wiki/Power_%28physics%29#Mechanical_power"&gt;wiki&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://www.technogym.com/gb/indoor-cycling-live-bike.html"&gt;indoor exercise bike&lt;/a&gt; displays the pace (i.e. revolutions per minute), so all you have to do is maintain it.
In addition it's displaying current resistance level (you can set it by adjusting a mechanical knob) and reports power in watts.&lt;/p&gt;
&lt;p&gt;During exercise, I'm using a chest HR tracker, so simplest thing to do would be take whatever power the machine reports and try to find correlation with moving total/average of HR.&lt;/p&gt;
&lt;p&gt;However, being paranoid and lacking any documentation for the machine, I decided no to trust its numbers blindly and check them instead. Technogym's website doesn't help in clarifying how power is computed. They have some sensible information &lt;a href="https://www.technogym.com/gb/newsroom/power-meter-what-is-how-it-works"&gt;like&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The power meter must be accurate.&lt;/p&gt;
&lt;p&gt;The power measurement must be precise and repeatable. A 3-5 watt error is not significant, but if a system is not reliable there may be deviations of many tens of watts, i.e. equal to or greater than the amount of power that is gained from one year's training.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's see how accurate is their power meter!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Initial-measurements-(2019-11-09)"&gt;Initial measurements (2019-11-09)&lt;a class="anchor-link" href="#Initial-measurements-(2019-11-09)"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Throughout different exercise sessions, I've taken bunch of measurements of RPM, resistance and power:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





   
   &lt;details class="cell-collapsed"&gt;
   &lt;summary&gt;Measurements &lt;span class="cell-collapsed-expand"&gt;(click to expand)&lt;/span&gt;&lt;/summary&gt;
       
&lt;div class="cell border-box-sizing code_cell rendered celltag_collapsed"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# TODO could only collapse inputs?&lt;/span&gt;
&lt;span class="n"&gt;datas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;58 10 129&lt;/span&gt;
&lt;span class="s2"&gt;56 10 127&lt;/span&gt;
&lt;span class="s2"&gt;56 10 127&lt;/span&gt;
&lt;span class="s2"&gt;56 8  94&lt;/span&gt;
&lt;span class="s2"&gt;57 8  98&lt;/span&gt;
&lt;span class="s2"&gt;56 8  94&lt;/span&gt;
&lt;span class="s2"&gt;58 10 133&lt;/span&gt;
&lt;span class="s2"&gt;56 10 126&lt;/span&gt;
&lt;span class="s2"&gt;56 8  93&lt;/span&gt;
&lt;span class="s2"&gt;55 8  91&lt;/span&gt;
&lt;span class="s2"&gt;56 8  94&lt;/span&gt;
&lt;span class="s2"&gt;56 10 128&lt;/span&gt;
&lt;span class="s2"&gt;55 10 124&lt;/span&gt;
&lt;span class="s2"&gt;54 10 119&lt;/span&gt;
&lt;span class="s2"&gt;53 8  87&lt;/span&gt;
&lt;span class="s2"&gt;55 8  93&lt;/span&gt;
&lt;span class="s2"&gt;55 8  90&lt;/span&gt;
&lt;span class="s2"&gt;95 8  240&lt;/span&gt;

&lt;span class="s2"&gt;70 10 198&lt;/span&gt;
&lt;span class="s2"&gt;55 8  85&lt;/span&gt;
&lt;span class="s2"&gt;95 8  226&lt;/span&gt;
&lt;span class="s2"&gt;95 8  229&lt;/span&gt;
&lt;span class="s2"&gt;95 8  228&lt;/span&gt;
&lt;span class="s2"&gt;95 8  227&lt;/span&gt;

&lt;span class="s2"&gt;97 8  236&lt;/span&gt;
&lt;span class="s2"&gt;95 8  227&lt;/span&gt;
&lt;span class="s2"&gt;95 8  227&lt;/span&gt;
&lt;span class="s2"&gt;95 8  230&lt;/span&gt;
&lt;span class="s2"&gt;60 10 156&lt;/span&gt;
&lt;span class="s2"&gt;61 10 154&lt;/span&gt;
&lt;span class="s2"&gt;62 10 162&lt;/span&gt;
&lt;span class="s2"&gt;61 10 156&lt;/span&gt;
&lt;span class="s2"&gt;55 10 125&lt;/span&gt;
&lt;span class="s2"&gt;56 10 128&lt;/span&gt;
&lt;span class="s2"&gt;57 8  89&lt;/span&gt;
&lt;span class="s2"&gt;56 8  87&lt;/span&gt;
&lt;span class="s2"&gt;57 8  90&lt;/span&gt;
&lt;span class="s2"&gt;57 8  91&lt;/span&gt;
&lt;span class="s2"&gt;60 8  101&lt;/span&gt;
&lt;span class="s2"&gt;56 10 129&lt;/span&gt;
&lt;span class="s2"&gt;57 10 131&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;datas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'resistance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'watts'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{row['rpm']}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{row['resistance']}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{row['watts']}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'columns'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;old_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# btw, if anyone knows a more elegant way of converting such a table in dataframe, I'd be happy to know!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
   &lt;/details&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea"&gt;
&lt;div&gt;
&lt;style scoped=""&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;rpm&lt;/th&gt;
      &lt;th&gt;resistance&lt;/th&gt;
      &lt;th&gt;watts&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;95_8_227&lt;/th&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;227&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;56_8_87&lt;/th&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;87&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;61_10_154&lt;/th&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;154&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;57_8_98&lt;/th&gt;
      &lt;td&gt;57&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;56_8_94&lt;/th&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;94&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;61_10_156&lt;/th&gt;
      &lt;td&gt;61&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;156&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;95_8_230&lt;/th&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;230&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;56_10_128&lt;/th&gt;
      &lt;td&gt;56&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;57_8_90&lt;/th&gt;
      &lt;td&gt;57&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;62_10_162&lt;/th&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;162&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;It's reasonable to assume that power depends linearly both on RPM and resistance, so we conjecture &lt;code&gt;watts = rpm x resistance&lt;/code&gt;. Let's see if it holds against what the exercise bike reports:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





   
   &lt;details class="cell-collapsed"&gt;
   &lt;summary&gt;hack to make seaborn plots deterministic &lt;span class="cell-collapsed-expand"&gt;(click to expand)&lt;/span&gt;&lt;/summary&gt;
       
&lt;div class="cell border-box-sizing code_cell rendered celltag_collapsed"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'seaborn.algorithms'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# prevents nondeterminism in plots https://github.com/mwaskom/seaborn/issues/1924&lt;/span&gt;
    &lt;span class="c1"&gt;# we only want to do it once&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bootstrap_hacked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bootstrap_orig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'seed'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bootstrap_orig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;algorithms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bootstrap_hacked&lt;/span&gt;
    
&lt;span class="c1"&gt;# apparently because of a dependency    &lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/statsmodels/statsmodels/blob/fdd61859568c4863de9b084cb9f84512be55ab33/setup.cfg#L17&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt;
&lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterwarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ignore'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Method .ptp is deprecated and will be removed.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;FutureWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'numpy.*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
   &lt;/details&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'seaborn'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font_scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# TODO not sure?&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm x resistance'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'resistance'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'color'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;

    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm x resistance'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'watts'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'rpm x resistance'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'watts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;scatter_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'facecolors'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
        &lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Power, theoretical, angular velocity multiplied by resistance'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Power, watts as reported by the machine'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;plot_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_6_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Wow, that doesn't look so well, I'd expect the regression line to intersect (0, 0). Let's double check this:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sm&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;dff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm x resistance'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'rpm'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'resistance'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;'rpm x resistance'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OLS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'watts'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt; &lt;span class="c1"&gt;# filter out nondeterministic stuff from the report&lt;/span&gt;
    &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Date:.*\d&lt;/span&gt;&lt;span class="si"&gt;{4}&lt;/span&gt;&lt;span class="s1"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Time:.*\d&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s1"&gt;:\d&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s1"&gt;:\d&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s1"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.982
Model:                            OLS   Adj. R-squared:                  0.981
Method:                 Least Squares   F-statistic:                     2109.
No. Observations:                  41   AIC:                             281.4
Df Residuals:                      39   BIC:                             284.8
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const             -110.6016      5.605    -19.732      0.000    -121.939     -99.264
rpm x resistance     0.4406      0.010     45.929      0.000       0.421       0.460
==============================================================================
Omnibus:                        1.196   Durbin-Watson:                   1.017
Prob(Omnibus):                  0.550   Jarque-Bera (JB):                1.049
Skew:                          -0.190   Prob(JB):                        0.592
Kurtosis:                       2.315   Cond. No.                     2.87e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 2.87e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Free parameter is about &lt;code&gt;-100&lt;/code&gt; watts, which is quite a lot considering my high intensity intervals are &lt;code&gt;250&lt;/code&gt; watts (so it means &lt;strong&gt;about 40% error&lt;/strong&gt;!). 
I don't think it can be explained by friction either: if anything, friction would shift the plot up and make the free coefficient positive.&lt;/p&gt;
&lt;p&gt;At this point, I'm not sure what it means. I guess I'll try to make more measurements at really low resistances and speeds to make the model more complete, but I would be too surprised if either watts or resistance reported by the machine are just made up.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="More-data-(2019-11-14)"&gt;More data (2019-11-14)&lt;a class="anchor-link" href="#More-data-(2019-11-14)"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I collected more data corresponding to different resistances/velocities. It's actually quite hard to consistently spin under low resistance setting, so I think I might need one more round of data collection to complete the picture!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





   
   &lt;details class="cell-collapsed"&gt;
   &lt;summary&gt;More measurements &lt;span class="cell-collapsed-expand"&gt;(click to expand)&lt;/span&gt;&lt;/summary&gt;
       
&lt;div class="cell border-box-sizing code_cell rendered celltag_collapsed"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;96  4  66&lt;/span&gt;
&lt;span class="s2"&gt;99  4  69&lt;/span&gt;
&lt;span class="s2"&gt;101 6  146&lt;/span&gt;
&lt;span class="s2"&gt;103 6  149&lt;/span&gt;
&lt;span class="s2"&gt;110 6  166&lt;/span&gt;
&lt;span class="s2"&gt;111 6  170&lt;/span&gt;
&lt;span class="s2"&gt;50  13 186&lt;/span&gt;
&lt;span class="s2"&gt;36  13 107&lt;/span&gt;
&lt;span class="s2"&gt;36  13 105&lt;/span&gt;
&lt;span class="s2"&gt;31  10 41&lt;/span&gt;
&lt;span class="s2"&gt;30  10 44&lt;/span&gt;
&lt;span class="s2"&gt;28  10 39&lt;/span&gt;
&lt;span class="s2"&gt;117 8  323&lt;/span&gt;
&lt;span class="s2"&gt;116 8  320&lt;/span&gt;
&lt;span class="s2"&gt;116 8  322&lt;/span&gt;
&lt;span class="s2"&gt;48  6  40&lt;/span&gt;
&lt;span class="s2"&gt;49  6  37&lt;/span&gt;
&lt;span class="s2"&gt;60  2  24&lt;/span&gt;
&lt;span class="s2"&gt;59  2  23&lt;/span&gt;
&lt;span class="s2"&gt;86  2  40&lt;/span&gt;
&lt;span class="s2"&gt;106 2  48&lt;/span&gt;
&lt;span class="s2"&gt;62  5  44&lt;/span&gt;
&lt;span class="s2"&gt;61  5  44&lt;/span&gt;
&lt;span class="s2"&gt;81  5  70&lt;/span&gt;
&lt;span class="s2"&gt;81  5  70&lt;/span&gt;
&lt;span class="s2"&gt;93  5  90&lt;/span&gt;
&lt;span class="s2"&gt;97  5  97&lt;/span&gt;
&lt;span class="s2"&gt;35  12 87&lt;/span&gt;
&lt;span class="s2"&gt;33  12 81&lt;/span&gt;
&lt;span class="s2"&gt;25  12 51&lt;/span&gt;
&lt;span class="s2"&gt;26  12 55&lt;/span&gt;
&lt;span class="s2"&gt;27  1  50&lt;/span&gt;
&lt;span class="s2"&gt;39  8  46&lt;/span&gt;
&lt;span class="s2"&gt;39  8  44&lt;/span&gt;
&lt;span class="s2"&gt;30  8  29&lt;/span&gt;
&lt;span class="s2"&gt;30  8  31&lt;/span&gt;
&lt;span class="s2"&gt;32  8  31&lt;/span&gt;
&lt;span class="s2"&gt;32  8  31&lt;/span&gt;
&lt;span class="s2"&gt;29  8  29&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
   &lt;/details&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;old_df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_df&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plot_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_12_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.924
Model:                            OLS   Adj. R-squared:                  0.923
Method:                 Least Squares   F-statistic:                     952.2
No. Observations:                  80   AIC:                             709.6
Df Residuals:                      78   BIC:                             714.3
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -60.3329      6.129     -9.843      0.000     -72.535     -48.130
rpm x resistance     0.3614      0.012     30.857      0.000       0.338       0.385
==============================================================================
Omnibus:                       57.648   Durbin-Watson:                   1.094
Prob(Omnibus):                  0.000   Jarque-Bera (JB):              238.330
Skew:                           2.326   Prob(JB):                     1.77e-52
Kurtosis:                      10.062   Cond. No.                     1.42e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.42e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Ok, it clearly started diverging from the nice linear dependency, especially at lower values of theoretical power. It's time to try to break it down and see what is to blame: e.g., resistance or speed component, or perhaps some individual measurements.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Analyzing-data-and-looking-at-outliers-(2019-11-24)"&gt;Analyzing data and looking at outliers (2019-11-24)&lt;a class="anchor-link" href="#Analyzing-data-and-looking-at-outliers-(2019-11-24)"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statsmodels.api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sm&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_influence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# TODO FIXME use it in prev section&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"watts ~ rpm * resistance - resistance - rpm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;influence_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;criterion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"cooks"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plot_influence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# sm.graphics.plot_partregress_grid(res, fig=fig)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_15_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;TODO hmm, 0.10 is not &lt;em&gt;that&lt;/em&gt; high leverage right?
Although depends on residual too, and here the residual is very high, so it would have high influence..
&lt;a href="https://www.statsmodels.org/dev/examples/notebooks/generated/regression_plots.html"&gt;https://www.statsmodels.org/dev/examples/notebooks/generated/regression_plots.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;'27_1_50' seems like a typo. Let's drop it and ignore.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'27_1_50'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Ok, that's somewhat better at least in terms of outliers. Let's see if that helps:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plot_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_19_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.950
Model:                            OLS   Adj. R-squared:                  0.949
Method:                 Least Squares   F-statistic:                     1467.
No. Observations:                  79   AIC:                             667.9
Df Residuals:                      77   BIC:                             672.7
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -69.9960      5.203    -13.454      0.000     -80.356     -59.636
rpm x resistance     0.3784      0.010     38.307      0.000       0.359       0.398
==============================================================================
Omnibus:                       27.329   Durbin-Watson:                   0.562
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               40.545
Skew:                           1.500   Prob(JB):                     1.57e-09
Kurtosis:                       4.823   Cond. No.                     1.49e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.49e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;So, on one hand that did make fit look more linear. On the other hand we've had to filter out all the low-resistance observations to achieve that.&lt;/p&gt;
&lt;p&gt;I guess I'll collect more observations to be absolutely sure.&lt;/p&gt;
&lt;p&gt;TODO add TOC or something?&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Even-more-data-(2019-11-25)"&gt;Even more data (2019-11-25)&lt;a class="anchor-link" href="#Even-more-data-(2019-11-25)"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I've collected a bit more data, especially at lower velocities and resistance:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





   
   &lt;details class="cell-collapsed"&gt;
   &lt;summary&gt;More measurements &lt;span class="cell-collapsed-expand"&gt;(click to expand)&lt;/span&gt;&lt;/summary&gt;
       
&lt;div class="cell border-box-sizing code_cell rendered celltag_collapsed"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;new_df_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;113 2  50&lt;/span&gt;
&lt;span class="s2"&gt;73  2  32&lt;/span&gt;
&lt;span class="s2"&gt;71  2  30&lt;/span&gt;
&lt;span class="s2"&gt;70  2  29&lt;/span&gt;
&lt;span class="s2"&gt;107 3  64&lt;/span&gt;
&lt;span class="s2"&gt;108 3  65&lt;/span&gt;
&lt;span class="s2"&gt;114 4  103&lt;/span&gt;
&lt;span class="s2"&gt;48  4  25&lt;/span&gt;
&lt;span class="s2"&gt;40  4  20&lt;/span&gt;
&lt;span class="s2"&gt;31  13 81&lt;/span&gt;
&lt;span class="s2"&gt;36  16 163&lt;/span&gt;
&lt;span class="s2"&gt;40  5  24&lt;/span&gt;
&lt;span class="s2"&gt;35  6  23&lt;/span&gt;
&lt;span class="s2"&gt;31  7  23&lt;/span&gt;
&lt;span class="s2"&gt;31  9  40&lt;/span&gt;
&lt;span class="s2"&gt;40  9  64&lt;/span&gt;
&lt;span class="s2"&gt;115 6  175&lt;/span&gt;
&lt;span class="s2"&gt;109 6  163&lt;/span&gt;
&lt;span class="s2"&gt;31  12 72&lt;/span&gt;
&lt;span class="s2"&gt;30  13 76&lt;/span&gt;
&lt;span class="s2"&gt;54  4  33&lt;/span&gt;
&lt;span class="s2"&gt;38  4  19&lt;/span&gt;
&lt;span class="s2"&gt;75  4  55&lt;/span&gt;
&lt;span class="s2"&gt;36  8  40&lt;/span&gt;
&lt;span class="s2"&gt;39  8  46&lt;/span&gt;
&lt;span class="s2"&gt;32  8  34&lt;/span&gt;
&lt;span class="s2"&gt;70  3  39&lt;/span&gt;
&lt;span class="s2"&gt;49  3  22&lt;/span&gt;
&lt;span class="s2"&gt;37  3  14&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ndf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;fdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_df_2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
   &lt;/details&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Let's check for outliers first:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plot_influence&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_24_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Residuals of 3 are borderline, but don't immediately mean outliers.&lt;/p&gt;
&lt;p&gt;Let's plot and analyze! Just out of curiosity, in addition we'll color values corresponding to different resistances (the darker, the more resistance):&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





    
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class="highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'resistance'&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt;
&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'navy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_colors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ress&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'color'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'resistance'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="c1"&gt;# if you know of an easier way to use column value as a color in seaborn, please let me know!&lt;/span&gt;
&lt;span class="n"&gt;plot_df&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print_stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ndf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;




&lt;div class="output_png output_subarea"&gt;
&lt;img src="exercise-bike-model_files/exercise-bike-model_26_0.png"/&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;                            OLS Regression Results                            
==============================================================================
Dep. Variable:                  watts   R-squared:                       0.943
Model:                            OLS   Adj. R-squared:                  0.942
Method:                 Least Squares   F-statistic:                     1754.
No. Observations:                 108   AIC:                             922.1
Df Residuals:                     106   BIC:                             927.5
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
====================================================================================
                       coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------------
const              -52.5400      4.002    -13.130      0.000     -60.474     -44.606
rpm x resistance     0.3483      0.008     41.880      0.000       0.332       0.365
==============================================================================
Omnibus:                       20.686   Durbin-Watson:                   0.646
Prob(Omnibus):                  0.000   Jarque-Bera (JB):               25.653
Skew:                           1.159   Prob(JB):                     2.69e-06
Kurtosis:                       3.574   Cond. No.                     1.17e+03
==============================================================================

Warnings:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 1.17e+03. This might indicate that there are
strong multicollinearity or other numerical problems.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;





    
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;So, there is a clear trend of points clumping towards 0, which means that the model ceases to be linear.&lt;/p&gt;
&lt;p&gt;If we try to fit the line to the points in a more reasonable exercise range (e.g. at least 50 RPM and resistance of 6, which would mean Power &amp;gt;= 300), that would skew the regression line even more to the right and move the coefficient even further away from zero.&lt;/p&gt;
&lt;p&gt;So overall it means that either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the assumption of linear dependency on resistance and velocity is wrong, but then it's completely unclear how the power is estimated&lt;/li&gt;
&lt;li&gt;I wasn't accurate during measurements on lower intensities, but I think it's pretty unlikely as I did multiple measurement sessions and even if you ignore the higher variance, mean is still way above the regression line &lt;/li&gt;
&lt;li&gt;the velocity/resistance reported by the machine are wrong or misleading. It's possible that the number machine assigns to 'resistance' doesn't really mean anything.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="Conclusion"&gt;Conclusion&lt;a class="anchor-link" href="#Conclusion"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;
&lt;p&gt;I guess be careful about trusting the equipment and do your own experiments.&lt;/p&gt;
&lt;p&gt;As you can see, my initial project of finding some correlation with my HR turned out in a completely different direction.&lt;/p&gt;
&lt;h3 id="Next-steps"&gt;Next steps&lt;a class="anchor-link" href="#Next-steps"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Would be interesting to at least compare watts (theoretical and reported by the machine) versus calories estimated by Endomondo (which takes heart rate into account).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



 


    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#exercise"&gt;#exercise&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#quantifiedself"&gt;#quantifiedself&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#ipython"&gt;#ipython&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;08 December 2019&lt;/div&gt;
    &lt;/section&gt;
    

    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_exercise_bike_model" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/exercise-bike-model.html" rel="alternate"/>
    <published>2019-12-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://beepb00p.xyz/scrapyroo.html</id>
    <title>Scrapyroo</title>
    <updated>2019-11-19T00:00:00+00:00</updated>
    <content type="html">&lt;!DOCTYPE html&gt;
&lt;html lang="en" prefix="og: http://ogp.me/ns#"&gt;&lt;head&gt;
        &lt;meta charset="utf-8"/&gt;
        &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt;

        &lt;!-- Icon made by Twitter --&gt;
        &lt;!-- https://twemoji.twitter.com/content/twemoji-twitter/en.html --&gt;
        &lt;link href="./robot-face.png" rel="icon"/&gt;
        &lt;link href="./robot-face.png" rel="apple-touch-icon"/&gt;

        &lt;meta content="hakyll" name="generator"/&gt;
        &lt;meta content="English" name="language"/&gt;
        
        &lt;meta content="infra scraping rust" name="keywords"/&gt;
        
        &lt;!-- TODO concat with keywords tags; also need to make comma separated? --&gt;

        &lt;title&gt;Scrapyroo | beepb00p&lt;/title&gt;

        &lt;link href="https://fonts.googleapis.com/css?family=Source+Serif+Pro" rel="stylesheet" type="text/css"/&gt;
        &lt;link href="./css/default.css?v=3" rel="stylesheet"/&gt;
        &lt;!-- TODO make conditional?? --&gt;
        &lt;link href="./css/posts-list.css" rel="stylesheet"/&gt; 
        &lt;link href="./css/links.css?v=4" rel="stylesheet"/&gt;

        

        &lt;link href="https://beepb00p.xyz/scrapyroo.html" rel="canonical"/&gt;

        &lt;!-- can test it with https://telegram.me/webpagebot --&gt;
        &lt;!-- or https://developers.facebook.com/tools/debug --&gt;
        &lt;meta content="website" property="og:type"/&gt;
        &lt;meta content="https://beepb00p.xyz/scrapyroo.html" property="og:url"/&gt; &lt;!-- TODO base? --&gt;
        &lt;meta content="Scrapyroo | beepb00p" property="og:title"/&gt;
        &lt;meta content="How I was unhappy about Deliveroo search and implemented my own" property="og:description"/&gt;
        &lt;!-- ugh. why is image necessary??? otherwise other parts aren't working or I get lots of 404s --&gt;
        &lt;!-- ugh. Facebook really wants jpg? --&gt;
        &lt;!-- also Facebook displays it with black background, but whatever, fuck it. --&gt;
        &lt;meta content="https://beepb00p.xyz/robot-face.jpg" property="og:image"/&gt;

    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- TODO make semantic --&gt;
        &lt;header&gt;
            &lt;nav&gt;
                &lt;span class="nav-left"&gt;
                    &lt;a class="fat" href="./"&gt;Home&lt;/a&gt;
                    &lt;!-- TODO eh, not sure if this symbol is good for that... --&gt;
                    ·
                    &lt;a class="fat" href="./ideas.html"&gt;Ideas&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./exobrain"&gt;Exobrain&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./tags.html"&gt;Tags&lt;/a&gt;
                &lt;/span&gt;
                &lt;span class="nav-right"&gt;
                    &lt;a class="fat" href="./feed.html"&gt;Feed&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./site.html"&gt;Site&lt;/a&gt;
                    ·
                    &lt;a class="fat" href="./me.html"&gt;Me&lt;/a&gt;
                &lt;/span&gt;
            &lt;/nav&gt;
        &lt;/header&gt;

        &lt;main&gt;
            

&lt;!-- &lt;link rel="stylesheet" href="/css/org.css" /&gt; --&gt;

&lt;link href="./css/htmlize.css" rel="stylesheet"/&gt;
&lt;link href="./css/org-default.css" rel="stylesheet"/&gt;

&lt;link href="./css/org-extra.css?v=3" rel="stylesheet"/&gt;



&lt;article&gt;
    
    &lt;section class="post-title"&gt;
    &lt;h1&gt;Scrapyroo&lt;/h1&gt;
    &lt;div class="summary"&gt;How I was unhappy about Deliveroo search and implemented my own
    &lt;/div&gt;&lt;/section&gt;
    &lt;!-- are sections appropriate for that? --&gt;

    &lt;section class="content"&gt;
    &lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org0000000"&gt;1. Past Rust experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000001"&gt;2. Deliveroo is great!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000006"&gt;3. The problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org000000b"&gt;4. What can we do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scrapyroo"&gt;5. Scrapy&lt;font color="#b7410e"&gt;r&lt;/font&gt;&lt;font color="#00ccbc"&gt;oo&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org000000d"&gt;6. Why Tantivy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org000000f"&gt;7. Tantivy: good&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tantivy_bad"&gt;8. Tantivy: bad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000012"&gt;9. Enhancing Tantivy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000013"&gt;10. Contributions back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000014"&gt;11. Outtakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000015"&gt;12. Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fin"&gt;13. Thanks!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0000018"&gt;14. Appendix: Tantivy details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org000001c"&gt;15. Appendix: random Rust things&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;style&gt;.NOTES {background-color: lightgray;}&lt;/style&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
These are my slides + speaker notes from &lt;a href="https://www.meetup.com/Rust-London-User-Group/events/266262531"&gt;November Rust London User Group meetup&lt;/a&gt;. 
Huge thanks to &lt;a href="https://twitter.com/ernestkissiedu"&gt;Ernest&lt;/a&gt; for organising!
&lt;/p&gt;
&lt;p&gt;
Presentation is done in org-reveal and source is available &lt;a href="https://github.com/karlicoss/scrapyroo-slides"&gt;here&lt;/a&gt;. &lt;b&gt;Grey areas are speaker notes&lt;/b&gt;, rest are actual slides.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Hi, I'm Dima and today I'm gonna tell you about &lt;a href="https://github.com/karlicoss/scrapyroo"&gt;Scrapyroo&lt;/a&gt;, which is a tool I built to search over Deliveroo menus and make my life a bit easier.
&lt;/p&gt;
&lt;p&gt;
The tool was made possible by &lt;a href="https://github.com/tantivy-search/tantivy"&gt;Tantivy&lt;/a&gt;, &lt;a href="https://github.com/scrapy/scrapy"&gt;scrapy&lt;/a&gt; and &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Also just to make clear: I'm not employed by Deliveroo!
So it's not like I'm just pitching you the feature I implemented on my day job :P
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000000"&gt;&lt;a class="headerlink" href="#org0000000"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Past Rust experience&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Virtually none apart from some Project Euler.
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
This time I also got away with not writing much of new Rust code.
Which is a good thing! Library I'm going to tell you about does deals with most of complicated and tedious stuff.
&lt;/p&gt;
&lt;p&gt;
But this is my first proper interaction with the Rust ecosystem.
&lt;/p&gt;
&lt;p&gt;
I am comfortable with many different other programming languages though and have been following Rust news, so haven't struggled with the languages specifically.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000001"&gt;&lt;a class="headerlink" href="#org0000001"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Deliveroo is great!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I can't imagine ordering food without a service like this.
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Not sure if there are any Deliveroo employees here, but I want to thank you for a great product!
&lt;/p&gt;
&lt;p&gt;
As a millennial/someone born in mid 90s, I am imagining life before services like Deliveroo and Uber as some sort of dark ages.
&lt;/p&gt;
&lt;p&gt;
My older friends told me some dreadful stories. Apparently you'd browse through paper menus, have to phone call the operator and coordinate the courier?
&lt;/p&gt;
&lt;p&gt;
Brrr.. I'm lucky to live now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000006"&gt;&lt;a class="headerlink" href="#org0000006"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; The problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
No search by menus, only restaurants/cuisines :(
&lt;/p&gt;
&lt;p&gt;
It's ok for getting &lt;b&gt;something&lt;/b&gt; to eat, but not great when you know what you want to order.
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
UPDATE: Some spooky stuff happened 🎃
On the morning of Tuesday, 19 November when I was to give this talk I found out that the search bar on Deliveroo has gone from "Restaurants or cuisines" to "Dishes, restaurants or cuisines"!
&lt;/p&gt;
&lt;p&gt;
Which meant  that Deliveroo supported searching in dish names.
I thought I'd gone bonkers until few of my friends confirmed that they didn't remember that and it must have been added very recently, over the weekend.
&lt;/p&gt;
&lt;p&gt;
I like to think that I'm very important and that wasn't a coincidence so maybe I have some sort of superpower.
If you miss a feature in some web service you're using, let me know, maybe I can implement it and that would get the service to implement it too :P (could start with editing tweets, perhaps?)
&lt;/p&gt;
&lt;p&gt;
So, you can search in dishes too now, however hopefully that doesn't make my tool irrelevant, you'd be able to see for yourself later.
(e.g. full text menu search, not just titles, search as you type, queries)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000002"&gt;&lt;a class="headerlink" href="#org0000002"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; You can't find specific dishes!&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;craving things&lt;/li&gt;
&lt;li&gt;varying your diet&lt;/li&gt;
&lt;li&gt;accommodating multiple people's prefs at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Why would you want this?
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Craving: e.g. if you want to treat yourself with some dessert, better get something you'd &lt;b&gt;really&lt;/b&gt; enjoy instead of mediocre one because that's what the restaurant offered.&lt;/li&gt;
&lt;li&gt;Varying: I'm trying to expose myself to all kinds of food to make sure I'm not missing on some important nutrients.&lt;/li&gt;
&lt;li&gt;Multiple people: you and your friends want different things and you need to choose a single restaurant to order from.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000003"&gt;&lt;a class="headerlink" href="#org0000003"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; &lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;img alt="categories.png" src="pic/categories.png"/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Just to demonstrate what I'm talking about, here's the Deliveroo web interface (mobile looks similar).
&lt;/p&gt;
&lt;p&gt;
You can filter by dietary restrictions, fair enough, but then finest you can do is to pick "Categories".
&lt;/p&gt;
&lt;p&gt;
Some of them kinda make sense (e.g. "Bagels"), some of them are too broad (e.g. what is "Asian/American"? could be anything).
Some of them are just plain weird, like what is "Back to school" supposed to mean?
&lt;/p&gt;
&lt;p&gt;
This is the best you're gonna get from Deliveroo.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000004"&gt;&lt;a class="headerlink" href="#org0000004"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; &lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;img alt="tabs.png" src="pic/tabs.png"/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Say, you want some grilled tuna and green vegetables. 
&lt;/p&gt;
&lt;p&gt;
Best you can do is open all 15 places that serve fish in different tabs,
Ctrl-F tuna and then try to decide among them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000005"&gt;&lt;a class="headerlink" href="#org0000005"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;3.4&lt;/span&gt; Sad!&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;p&gt;
Full text search is a basic human right!     
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
I asked people and apparently they just accepted and never questioned that sad workflow!  
&lt;/p&gt;
&lt;p&gt;
It feels especially wrong to me because human brains are good at creative things.
Not so good at stuff like text search – that's one of things computers are &lt;b&gt;exceptionally&lt;/b&gt; good at and we're ought to exploit that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org000000b"&gt;&lt;a class="headerlink" href="#org000000b"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; What can we do?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
scrape menu data off Deliveroo website
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
e.g. every day at 10 AM
&lt;/p&gt;
&lt;p&gt;
About 600 restaurants deliver to my postcode.
&lt;/p&gt;
&lt;p&gt;
Results in huge json file.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
index menu data
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Indexing needed mostly because I want
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;search operators&lt;/li&gt;
&lt;li&gt;stemming, e.g. removing inflection, so there's no difference, between 'grill and grilled'&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;backend to serve indexed data&lt;/li&gt;
&lt;li&gt;frontend to search in the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000007"&gt;&lt;a class="headerlink" href="#org0000007"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; Scraping menus&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
Python (&lt;a href="https://github.com/scrapy/scrapy"&gt;scrapy&lt;/a&gt;). Almost no need for HTML parsing!
&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;p&gt;&lt;img alt="json.png" src="pic/json.png"/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
To try it for yourself, go to some restaurant, e.g.
&lt;a href="https://deliveroo.co.uk/menu/london/spitalfields/tokyo-sushi-finsbury-park"&gt;https://deliveroo.co.uk/menu/london/spitalfields/tokyo-sushi-finsbury-park&lt;/a&gt;
open chrome inspector and type &lt;code class="inline"&gt;{"&lt;/code&gt; .  &lt;code class="inline"&gt;js-react-on-rails-context&lt;/code&gt; should be among the results.
&lt;/p&gt;
&lt;p&gt;
If there are any Deliveroo developers here, sorry for public dissection of your website!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000008"&gt;&lt;a class="headerlink" href="#org0000008"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; Scraping menus&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-json"&gt;{
  "urls": ["/menu/london/liverpool-street/pub-classics-from-greene-king-bishopsgate"],
  "delivery_location": { "address": [ -0.0623, 51.123 ]},
  "id": 189155,
  "name": "Pub Classics from Greene King - Kings Arms",
  "description": "Bringing the pub to your door",
  "uname": "pub-classics-from-greene-king-bishopsgate",
  "menu": {"items": [
     {
	 "id": 31299189,
	 "name": "Chickpea, Red Pepper &amp;amp; Hoisin Burger (VE)",
	 "description": "Chickpea and mixed vegetable burger",
	 "price": "\u00a310.79"
     },
     {
	 "id": 31085809,
	 "name": "Fish &amp;amp; Chips with Wine for 2",
	 "description": "2 x cod with chips and a bottle of wine\r\n",
	 "price": "\u00a338.99"
     }
  ]}
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
We get something like that (I've filtered out irrelevant stuff) for each restaurant.
&lt;/p&gt;
&lt;p&gt;
Scraped json data is kept separately to checkpoint in case scraping/indexing fails.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000009"&gt;&lt;a class="headerlink" href="#org0000009"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;4.3&lt;/span&gt; Indexing menus &amp;amp; serving data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-3"&gt;
&lt;p&gt;
&lt;a href="https://github.com/tantivy-search/tantivy"&gt;Tantivy&lt;/a&gt;!   
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
I'm going to be explaining why it works well later in the presentation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org000000a"&gt;&lt;a class="headerlink" href="#org000000a"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;4.4&lt;/span&gt; Frontend&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-4"&gt;
&lt;p&gt;
HTML and some Javascript/React
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="scrapyroo"&gt;&lt;a class="headerlink" href="#scrapyroo"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Scrapy&lt;font color="#b7410e"&gt;r&lt;/font&gt;&lt;font color="#00ccbc"&gt;oo&lt;/font&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-scrapyroo"&gt;
&lt;p&gt;
(Live demo). You can try it here: &lt;a href="https://scrapyroo.karlicoss.xyz"&gt;scrapyroo.karlicoss.xyz&lt;/a&gt;
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Note that this only indexes my district (Whitechapel).
Also not sure for how long I'll expose it, but I'll make a demo video before shutting it down.
&lt;/p&gt;
&lt;p&gt;
Also there is a screenshot in &lt;a href="https://github.com/karlicoss/scrapyroo"&gt;readme&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org000000c"&gt;&lt;a class="headerlink" href="#org000000c"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;5.1&lt;/span&gt; Features&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
search queries
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
demo: say you want some halloumi and green vegetables.
&lt;/p&gt;
&lt;p&gt;
Type: 'halloumi AND vegetables'. Whoa, vegetable smoothie in results? No, thank you.
So we can use phrase query (quotes) and exclusive query (-): add 'AND -"vegetable smoothie"'. Ah, that's better now!
&lt;/p&gt;
&lt;p&gt;
Say you also want some desert. Add 'AND cheesecake' or 'AND "ice cream"'. Nice, few places actually serve this combination!
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Or you're ordering with two other friends. 
&lt;/p&gt;
&lt;p&gt;
You want prawns, another one wants chicken salad, and the third wants some feta.
&lt;/p&gt;
&lt;p&gt;
'prawns AND "chicken salad" AND "feta"' – and we instantly find few matches!
&lt;/p&gt;
&lt;p&gt;
Without full text search there is no way you would ever find it, and someone would be unsatisfied about collective choice.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
search as you type
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
At the moment requests index on almost every keystroke, would be nice to keep a persistent connection,
although that's something that is hard to implement in a generic way.
&lt;/p&gt;
&lt;p&gt;
Demonstrate in dev tools
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;works from phone as well as desktop browser&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="NOTES"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;show debug mode? maybe later if I got a bit more time&lt;/li&gt;
&lt;li&gt;ui perhaps is a bit rough&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org000000d"&gt;&lt;a class="headerlink" href="#org000000d"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Why Tantivy?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
initial &lt;a href="https://lunrjs.com"&gt;lunrjs&lt;/a&gt; implementation was visibly laggy even on desktop
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Need to carry data inside the huge html – not that great.
&lt;/p&gt;
&lt;p&gt;
You need internet anyway to make an order, so I didn't mind having a proper backend.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
also, why not?
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Wanted to try out Rust for some real project.
&lt;/p&gt;
&lt;p&gt;
Never used any other search engine libraries and was recommended Tantivy.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org000000f"&gt;&lt;a class="headerlink" href="#org000000f"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Tantivy: good&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
Features:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://docs.rs/tantivy/0.10.3/tantivy/struct.Snippet.html"&gt;highlight positions&lt;/a&gt;, snippets
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
alt-tab to the presentation and show what I mean by snippets?
&lt;/p&gt;
&lt;p&gt;
Without the snippets: pretty sad. 
&lt;/p&gt;
&lt;p&gt;
Demonstrate lack of snippets:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;disable highlights in chrome inspector&lt;/li&gt;
&lt;li&gt;tick 'show unmatched'&lt;/li&gt;
&lt;li&gt;untick 'show matched first'&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://docs.rs/tantivy/0.10.3/tantivy/struct.IndexWriter.html"&gt;transactional&lt;/a&gt; index updates
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
add/delete/rollback/commit
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://docs.rs/tantivy/0.10.3/tantivy/enum.ReloadPolicy.html"&gt;autoreloading&lt;/a&gt; latest commit in searchers 
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;

Caveat: have to be careful when deploying index remotely, &lt;code class="inline"&gt;meta.json&lt;/code&gt; file has to be deployed &lt;b&gt;last&lt;/b&gt;!
&lt;/p&gt;
&lt;p&gt;
I'm in progress of writing up a github issue, will put the link here.  
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tantivy-search/tantivy-py"&gt;Python bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
well documented, easy to modify
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Mention &lt;a href="https://tantivy-search.github.io/tantivy/tantivy/schema/struct.Facet.html"&gt;facets&lt;/a&gt;? 
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org000000e"&gt;&lt;a class="headerlink" href="#org000000e"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;7.1&lt;/span&gt; Tantivy CLI: awesome&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-7-1"&gt;
&lt;p&gt;
Takes you from zero to prototype in a matter of &lt;b&gt;minutes&lt;/b&gt; without distracting on irrelevant stuff.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;tantivy-cli new    -i your_index  &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;interactive!&lt;/span&gt;
tantivy-cli index  -i your_index &amp;lt; data.jsonl
tantivy-cli serve  -i your_index &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;http interface&lt;/span&gt;
tantivy-cli search -i your_index -q &lt;span class="org-string"&gt;"spinach AND paneer"&lt;/span&gt; &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;cli queries&lt;/span&gt;
tantivy-cli bench  &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;query benchmarking&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
And I'm not exaggerating about minutes!
You can index data and expose it to your frontend without a singe line of code.
&lt;/p&gt;
&lt;p&gt;
I spent most time on scraping and frontend.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="tantivy_bad"&gt;&lt;a class="headerlink" href="#tantivy_bad"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Tantivy: bad&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-tantivy_bad"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
no nested document support (&lt;a href="https://github.com/tantivy-search/tantivy/issues/617"&gt;yet&lt;/a&gt;)
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;would be nice to have queries like &lt;samp class="inline"&gt;starter:dumpling AND main:salad&lt;/samp&gt;&lt;/li&gt;
&lt;li&gt;potentially less resource wasteful&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
You can't return matched menu items only, have to index and serve the whole menu.
&lt;/p&gt;
&lt;p&gt;
It's not too bad though, I'm getting around this by relying on line breaks to only display matched items.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000012"&gt;&lt;a class="headerlink" href="#org0000012"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; Enhancing Tantivy&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;p&gt;
Rust observations:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
single binary: very easy to deploy
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;cargo install tantivy-cli --root /Dropbox/soft/tantivy-cli
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Especially on VPS, which only (huh!) got two cores and wouldn't handle compiling Rust well
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://doc.rust-lang.org/edition-guide/rust-2018/platform-and-target-support/musl-support-for-fully-static-binaries.html"&gt;&lt;code class="inline"&gt;musl&lt;/code&gt;&lt;/a&gt;: minimal libc implementation
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;apt install musl-tools 
rustup target add x86_64-unknown-linux-musl
cargo build/install --target x86_64-unknown-linux-musl
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Turned out my desktop and my VPS where I wanted to run the backend use different libc version.
&lt;/p&gt;
&lt;p&gt;
Normally that would mean crosscompiling and all the associated horror.
&lt;/p&gt;
&lt;p&gt;
With Rust it turned out to be a matter of adding a target via rustup and that's it!
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://doc.rust-lang.org/rust-by-example/trait/derive.html"&gt;derive&lt;/a&gt; debug/serialize
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
First seen in Haskell!
&lt;/p&gt;
&lt;p&gt;
Python: kind of there via NamedTuples/dataclasses
&lt;/p&gt;
&lt;p&gt;
I often miss it in C++!
You can implement it with templates, macros or &lt;code class="inline"&gt;boost::preprocessor&lt;/code&gt; depending on how much you hate yourself/your team :P
But it's a very reasonable default feature to have.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000010"&gt;&lt;a class="headerlink" href="#org0000010"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;9.1&lt;/span&gt; &lt;/h3&gt;
&lt;div class="outline-text-3" id="text-9-1"&gt;
&lt;p&gt;
Cargo: &lt;b&gt;very&lt;/b&gt; easy to change dependency to local
&lt;/p&gt;
&lt;pre class="example"&gt;tantivy-cli/Cargo.toml:
- tantivy = "0.10"
+ tantivy = { path = "/coding/tantivy" }
&lt;/pre&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
I managed to run this with the minimal effort.
&lt;/p&gt;
&lt;p&gt;
There is tantivy, tantivy-cli and tantivy-py.
I was experimenting with exposing this snippet API from tantivy so needed to change dependency.
&lt;/p&gt;
&lt;p&gt;
To be fair, not too bad in pip:
&lt;/p&gt;
&lt;p&gt;
&lt;code class="inline"&gt;pip3 install --user 'git+https://github.com/karlicoss/tantivy-py@delete-all-documents'&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
However, not discoverable via &lt;code class="inline"&gt;--help&lt;/code&gt;, you have to know what to look for!
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
or, github: 
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bash"&gt;cargo install  &lt;span class="org-sh-escaped-newline"&gt;\&lt;/span&gt;
--git https://github.com/karlicoss/tantivy-cli &lt;span class="org-sh-escaped-newline"&gt;\&lt;/span&gt;
--branch serve-snippets
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
I had to patch tantivy a bit, and it would take me a bit of time to get PRs accepted to upstream.
&lt;/p&gt;
&lt;p&gt;
You can try it as easy as you would 
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000011"&gt;&lt;a class="headerlink" href="#org0000011"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;9.2&lt;/span&gt; &lt;/h3&gt;
&lt;div class="outline-text-3" id="text-9-2"&gt;
&lt;p&gt;
&lt;a href="https://github.com/tantivy-search/tantivy-py"&gt;tantivy-py&lt;/a&gt;: surprisingly simple integration
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
just &lt;code class="inline"&gt;pip install&lt;/code&gt; thanks to &lt;a href="https://github.com/PyO3/setuptools-rust"&gt;&lt;samp class="inline"&gt;setuptools-rust&lt;/samp&gt;&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Benefits from existing Rust ecosystem: e.g. can run &lt;code class="inline"&gt;cargo build&lt;/code&gt;, etc. You just write normal Rust code.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
easy to interface
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-rust"&gt;fn delete_all_documents(&amp;amp;mut self) -&amp;gt; PyResult&amp;lt;u64&amp;gt; {
  self.inner_index_writer.delete_all_documents().map_err(to_pyerr)
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Powered by &lt;a href="https://github.com/PyO3/pyo3#using-rust-from-python"&gt;PyO3&lt;/a&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000013"&gt;&lt;a class="headerlink" href="#org0000013"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;10&lt;/span&gt; Contributions back&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-10"&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
I figured Tantivy could benefit from some things I implemented.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
Pull requests in progress:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
exposing absolute highlight positions
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
&lt;a href="https://docs.rs/tantivy/0.10.2/tantivy/struct.Snippet.html#method.to_html"&gt;&lt;code class="inline"&gt;to_html&lt;/code&gt;&lt;/a&gt; isn't gonna work well, you'll want to restyle it.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
React boilerplate to interact with CLI backend
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Most of my time was spent on getting around frontend quirks, so that would make prototyping even easier.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000014"&gt;&lt;a class="headerlink" href="#org0000014"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;11&lt;/span&gt; Outtakes&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-11"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
rust &amp;amp; tantivy
&lt;/p&gt;
&lt;p&gt;
Very pleasant experience, no frustration
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
my life is simpler now!
&lt;/p&gt;
&lt;p&gt;
I don't have to waste time browsing through the website
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;discovered places I'd have never found otherwise&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
you don't have to suffer from inconvenience in your life   
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
If you can program, you are literally capable of anything you can think of (well, given enough time :P).
&lt;/p&gt;
&lt;p&gt;
You can bend the interactions with the outside world the way you want.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000015"&gt;&lt;a class="headerlink" href="#org0000015"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;12&lt;/span&gt; Credits&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-12"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://github.com/petr-tik"&gt;github.com/petr-tik&lt;/a&gt;: ask him about Tantivy!
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Petr pushed me to actually give a talk, helped with Tantivy and gave me lots of helpful advice on improving the presentation. Thank you!
&lt;/p&gt;
&lt;p&gt;
He's passionate about Tantivy and will be happy to help you if you think something is missing or can be improved.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/katya_titkova"&gt;Katya&lt;/a&gt;: beta testing and ghostwriting&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="fin"&gt;&lt;a class="headerlink" href="#fin"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;13&lt;/span&gt; Thanks!&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-fin"&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
Questions?  
&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/karlicoss/scrapyroo"&gt;github.com/karlicoss/scrapyroo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
&lt;a href="https://beepb00p.xyz/scrapyroo.html"&gt;beepb00p.xyz/scrapyroo.html&lt;/a&gt;: speaker notes!
&lt;/p&gt;
&lt;div class="NOTES"&gt;
&lt;p&gt;
The presentation will be available as plain text (as well as my notes), so hopefully you won't miss anything.
&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Tantivy: 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://github.com/tantivy-search"&gt;github.com/tantivy-search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitter.im/tantivy-search/tantivy"&gt;gitter.im/tantivy-search/tantivy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/tantivy"&gt;docs.rs/tantivy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Me:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;💻 &lt;a href="https://github.com/karlicoss"&gt;github.com/karlicoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 &lt;a href="https://twitter.com/karlicoss"&gt;twitter.com/karlicoss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org0000018"&gt;&lt;a class="headerlink" href="#org0000018"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;14&lt;/span&gt; Appendix: Tantivy details&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-14"&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000016"&gt;&lt;a class="headerlink" href="#org0000016"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;14.1&lt;/span&gt; how are scores calculated?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-14-1"&gt;
&lt;p&gt;
See &lt;a href="https://docs.rs/tantivy/0.10.3/tantivy/query/struct.Explanation.html"&gt;&lt;code class="inline"&gt;Explanation&lt;/code&gt;&lt;/a&gt;. Basically builds a computation tree for a given match.
&lt;/p&gt;
&lt;p&gt;
Demonstrate &lt;a href="https://docs.rs/tantivy/0.10.3/tantivy/query/trait.Query.html#method.explain"&gt;&lt;code class="inline"&gt;explain&lt;/code&gt;&lt;/a&gt; in logs?
&lt;/p&gt;
&lt;p&gt;
'pretty' json is a little rough at the moment.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000017"&gt;&lt;a class="headerlink" href="#org0000017"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;14.2&lt;/span&gt; how are snippets selected?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-14-2"&gt;
&lt;p&gt;
Somewhat heuristic, see &lt;a href="https://github.com/tantivy-search/tantivy/blob/42756c7474317c2b1aa0610278b54c0bb0c70fb9/src/snippet/mod.rs#L144"&gt;&lt;code class="inline"&gt;search_fragment&lt;/code&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
The returned list is non-empty and contain less than 12 possibly overlapping fragments.
&lt;/p&gt;
&lt;p&gt;
It is ok to emit non-overlapping fragments, for instance, one short and one long containing the same keyword, in order
to leave optimization opportunity to the fragment selector upstream.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-2"&gt;
&lt;h2 id="org000001c"&gt;&lt;a class="headerlink" href="#org000001c"&gt;¶&lt;/a&gt;&lt;span class="section-number-2"&gt;15&lt;/span&gt; Appendix: random Rust things&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-15"&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org0000019"&gt;&lt;a class="headerlink" href="#org0000019"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;15.1&lt;/span&gt; Unicode handling&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-15-1"&gt;
&lt;p&gt;
didn't have time to figure it out, so I just stripped all non-ascii
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org000001a"&gt;&lt;a class="headerlink" href="#org000001a"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;15.2&lt;/span&gt; &lt;a href="https://github.com/serde-rs/serde"&gt;serde&lt;/a&gt; and &lt;code class="inline"&gt;#[derive(Serialize)]&lt;/code&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-15-2"&gt;
&lt;p&gt;
ran into &lt;a href="https://serde.rs/remote-derive.html"&gt;orphan rule&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="outline-3"&gt;
&lt;h3 id="org000001b"&gt;&lt;a class="headerlink" href="#org000001b"&gt;¶&lt;/a&gt;&lt;span class="section-number-3"&gt;15.3&lt;/span&gt; binary size:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-15-3"&gt;
&lt;pre class="example"&gt;/coding/tantivy-cli/target $ du -hd1
2.2G	./x86_64-unknown-linux-musl
2.2G	./debug
1.5G	./release
5.8G	.
&lt;/pre&gt;
&lt;p&gt;
Not very cloud sync-friendly! However happily accepts symlink as &lt;code class="inline"&gt;target&lt;/code&gt; directory, so not too bad.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

    &lt;/section&gt;

    
    &lt;section class="footer"&gt;
        &lt;div class="post-tags"&gt;&lt;a class="post-tag" href="./tags.html#infra"&gt;#infra&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#scraping"&gt;#scraping&lt;/a&gt;  &lt;a class="post-tag" href="./tags.html#rust"&gt;#rust&lt;/a&gt; &lt;/div&gt;
        &lt;!-- TODO post-date? --&gt;
        &lt;div class="date"&gt;19 November 2019&lt;/div&gt;
    &lt;/section&gt;
    

    

    &lt;section class="comments"&gt;
    &lt;script data-isso="https://beepb00p.xyz/comments/" data-isso-reply-to-self="true" src="https://beepb00p.xyz/comments/js/embed.min.js"&gt;
&lt;/script&gt;

&lt;section data-isso-id="isso_scrapyroo" id="isso-thread"&gt;&lt;/section&gt;
    &lt;/section&gt;

&lt;/article&gt;
        &lt;/main&gt;

        &lt;!-- TODO hmm maybe display something in a footer, so it's clear it's end of content... --&gt;
        

        &lt;!-- TODO make semantic --&gt;
        &lt;footer&gt;
            &lt;span style="float:left"&gt;
            &lt;a href="https://twitter.com/karlicoss"&gt;🐦 me @twitter&lt;/a&gt;
            ·
            &lt;a href="https://github.com/karlicoss"&gt;💻 me @github&lt;/a&gt;
            &lt;/span&gt;

            &lt;a href="http://creativecommons.org/licenses/by/4.0"&gt;CC BY 4.0&lt;/a&gt;
            
            
        &lt;/footer&gt;
    
&lt;/body&gt;&lt;/html&gt;</content>
    <link href="https://beepb00p.xyz/scrapyroo.html" rel="alternate"/>
    <published>2019-11-19T00:00:00+00:00</published>
  </entry>
</feed>
